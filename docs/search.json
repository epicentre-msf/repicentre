[
  {
    "objectID": "sessions_extra/example.html",
    "href": "sessions_extra/example.html",
    "title": "Example Satellite Session",
    "section": "",
    "text": "There is nothing specific to show here, please refer to the example or template in the core session categories instead."
  },
  {
    "objectID": "pathway.html",
    "href": "pathway.html",
    "title": "Pathway",
    "section": "",
    "text": "These sessions can be followed in order to get a baseline level in R. The series assumes no prior experience in R and is suitable for beginners.\nLooking for more? Want more flexibility? Consider browsing the full session catalog.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Core Session\n\n\n\n\n\nJust an example\n\n\n\n\n\nDec 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nImport data\n\n\n\n\n\nStarting your first project. Creating an Rstudio project, installing packages and importing data\n\n\n\n\n\nDec 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to R\n\n\n\n\n\nYour first steps in R. Learn your way around Rstudio, and meet some common R objects\n\n\n\n\n\nDec 11, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site…coming soon."
  },
  {
    "objectID": "sessions_core/template.html",
    "href": "sessions_core/template.html",
    "title": "Session Title",
    "section": "",
    "text": "Objective 1\nObjective 2"
  },
  {
    "objectID": "sessions_core/template.html#objectives",
    "href": "sessions_core/template.html#objectives",
    "title": "Session Title",
    "section": "",
    "text": "Objective 1\nObjective 2"
  },
  {
    "objectID": "sessions_core/template.html#setup",
    "href": "sessions_core/template.html#setup",
    "title": "Session Title",
    "section": "Setup",
    "text": "Setup\n\nDescription of something participants need to setup, primarily used at the beginning of a section but can also be used for tasks like setting up an Rproject file, folder structure, etc."
  },
  {
    "objectID": "sessions_core/template.html#main-section",
    "href": "sessions_core/template.html#main-section",
    "title": "Session Title",
    "section": "Main Section",
    "text": "Main Section\nLorem ipsum…\n\nprint('some example code')\n\nHere are the validated callouts that you can use, please do not use any callouts not defined here. If you think there is an important callout that is missing, please submit an issue.\n\n\n\n\n\n\nNote\n\n\n\nNote about something of interest, like helpful hint or a relevant warning.\n\n\n\n\n\n\n\n\nTip\n\n\n\nComment about a genral tip / trick or best practice.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWarning / comment on something really important.\n\n\n\nDescription of something participants should observe, investigate, etc.\n\n…lorem ispum again !\n\nDescription of a coding exercise that participants are expected to complete.\n\nDon’t forget to include a solution"
  },
  {
    "objectID": "sessions_core/introduction.html",
    "href": "sessions_core/introduction.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Familiarize yourself with RStudio\nLearn how to work with the console\nCreate and execute a script\nCreate basic R objects, including vectors and dataframes"
  },
  {
    "objectID": "sessions_core/introduction.html#objectives",
    "href": "sessions_core/introduction.html#objectives",
    "title": "Introduction to R",
    "section": "",
    "text": "Familiarize yourself with RStudio\nLearn how to work with the console\nCreate and execute a script\nCreate basic R objects, including vectors and dataframes"
  },
  {
    "objectID": "sessions_core/introduction.html#exercise-format",
    "href": "sessions_core/introduction.html#exercise-format",
    "title": "Introduction to R",
    "section": "Exercise Format",
    "text": "Exercise Format\nThese exercises are in the format of a self-paced tutorial containing short explanations of key concepts, examples, and exercises for you to follow. The course uses a “learning by doing” approach, and while this first session will start a slow, giving you time to explore the RStudio interface, future sessions will focus heavily on having you write your own code.\nInstructions for exercices will be given in the following formats:\n\n\n\n\n\n\nCode. This box is used for active coding exercise\nExample: Create an object called region that contains the value \"Mandoul\".\n\n\n\n\n\n\n\n\n\nLook. This box is used for exercices where you need to explore and observe\nExample: Inspect the RStudio interface.\n\n\n\nAs you move through these exercises, you may run into some errors. This is completely normal and happens to all programmers, novice and expert. Much like a natural language, R is something you will get better at the more you practice and work through your mistakes.Errors occur when R is unable to complete a command. This can happen for a lot of reasons, for example because you mispelled the name of an object: you’ve asked R to look for a data file that doesn’t exist, or you’ve provided the wrong type of data to a function. Whenever an error occurs, R will stop any ongoing calculation and give you a message explaining what went wrong. We will see and discuss a lot of different errors throughout this course.\nAt the end of each session, we ask that you email us your tutorial code. This will help us to assess how everyone is doing as the course progresses and allow us to provide feedbacks or come back on some muddy points."
  },
  {
    "objectID": "sessions_core/introduction.html#rstudio-and-r",
    "href": "sessions_core/introduction.html#rstudio-and-r",
    "title": "Introduction to R",
    "section": "RStudio and R",
    "text": "RStudio and R\nR is a functional programming language[Functional programming languages are designed primarily to run analyses and focus on tools for data manipulation, computation, and visualization. This can be contrasted with object oriented languages which are more adept at building complex programs (such as operating systems).] that can be used to clean and manipulate data, run analyses (especially statistical ones), visualize results, and much more.\nRStudio is a piece of software that provides a user-friendly interface (or IDE to be precise) for R.1 While using a graphical interface isn’t technically required, it is strongly recommended for beginners.\nGetting Started with RStudio\nLet’s get started!\n\n\n\n\n\n\nDo. Open RStudio using the start menu or desktop shortcut; if RStudio is already open, please close it open a new session.\n\n\n\nYou should see an interface that looks something like this:\n\n\nView of the Rstudio IDE interface at opening\n\n\n\n\n\n\n\nLook. Inspect the RStudio interface.\n\n\n\nYou will have either three or four panels, including:\nUper Right Corner\nTo the upper right there will be a panel with several tabs. Many of these are beyond the scope of this course, and we will focus on these two:\n\nEnvironment. A list of the objects saved by the user in the current session.2 Because you’ve just started a new session, your environment should be empty.\nHistory. A record of all the commands you have executed during the current session.\nBottom Right Corner\nTo the bottom right there will be another multi tab panel, including:\n\n\nFiles. A file explorer for the working directory.\n\nPlots. A location where RStudio will display static visualizations; this tab should be empty for the moment.\n\nPackages. A list of all the R packages installed on your computer.\n\nHelp. A place to read help pages and documentation for functions and packages.\n\n\nViewer. A location where RStudio will display html outputs.\nDocumentation refers to additional narrative text either in a code file or an external document that is written to help folks understand what a piece of code, function, or package does and how it should be used. Code documentation is a bit analogous to creating a data dictionary for a set of survey data and is an invaluable part of making robust and reusable codeLeft Side\nTo the left or bottom left (if you have four panels) you should see the console (we will come back to it in Section 3.2).\nTo the top left (if you have four panels) will be any open scripts (we will come back to it in Section 3.3).\nThe Console\nThe console is where R itself is run.\nWhenever you open a new session, R will start by printing a bit of information about your set up, such as your R version number. Below this there should be a line containing the &gt; symbol and a blinking cursor. To run a command in R, you simply need to type it in after this &gt; and press Enter. R will then process your code and print the result (if there is one). A new &gt; line will then appear ready for the next command.\n\n\n\n\n\n\nBeware of unfinished commands\n\n\n\nIf the last line shown in the console starts with a + instead of a &gt; that means the console is not ready for a new command either because it is still processing a previous one or because it received a bit of incomplete code. If at any point you would like to cancel an ongoing or incomplete command, press Esc.\n\n\n\n\n\n\n\n\nCode. Run the following commands in the console and observe the output.\n\n\n\n\n5 + 90\n\n6 * 171\n\n189 / 36.6\n\n92^3\n\n(12 + 9)^4 / 1000\n\n\n\n\n\n\n\nCode. Run the following command. Note that the final ) is missing, making the command incomplete. What happens when you do this?\n\n\n\n\n3 / (2 + 97\n\nWe can also run functions in the console:\n\n\n\n\n\n\nCode. Run the following commands in the console (one line at a time).\n\n\n\n\n# Find the minimum value\nmin(5, 10)\nmin(1, 8, 56, 0.3)\n\n# Find the maximum value\nmax(568, 258, 314)\n\n\n\n\n\n\n\nLet your code breathe\n\n\n\nBest Practices. You may have noticed in the above examples that our code includes a lot of spaces between characters. This is not by accident. It is considered best practice to include spaces around most operators, such as +, -, *, /, &lt;, &gt;, =, and &lt;-. Not only do these spaces make your code more readable3, in some cases they may even be necessary to avoid errors. That said, do be aware that there are a small number of operators that should not be surrounded by spaces, such as ^ and ..\n\n1+29+4.8/3*3           # BAD\n1 + 29 + 4.8 / 3 * 3   # GOOD\n\n\n\nScripts\nScripts are text files that contain a series of commands for a particular programming language. The extension of the file indicates which language the commands were written in, and we will be using .R. Scripts allow us to create code that can be reused, shared, and even automated.\nWriting Your First Script\n\n\nSteps to create a new script in the RStudio IDE\n\nTo create a new script, follow the menu File &gt; New File &gt; R Script. Alternatively, you can also click on the small green + sign just below the File menu or use the keyboard shortcut CTRL+SHIFT+N. This new and unsaved script will appear as a blank document in the top left panel.\nTo save your script, either use the menu File &gt; Save As our the keyboard shortcut CTRL+S.\n\n\n\n\n\n\nCode. Create and save a new script called discovery.R. Don’t forget to include the .R extension.\n\n\n\nExecuting Code from a Script\nTo run code from a script simply place your cursor on the line you wish to run (or select multiple lines) and do one of the following:\n\nClick the Run icon at the top right of the script panel\nUse the shortcut CTRL+Enter (cursor will move to the next line)\nUse the shortcut ALT+Enter (cursor will stay on the current line)\n\n\n\n\n\n\n\nCode. Copy the code you ran in the previous exercises into your script and try running it using each of the above methods.\n\n\n\nComments\nIn R, any text prefaced by a # (until the end of a line) is called a comment. R does not consider comments to be code and will ignore them whenever you run your scripts. This makes comments an excellent way to document your code.\n\n# This is a comment\n\n2 + 3  # This is also a comment\n\n[1] 5\n\n\n\n\n\n\n\n\nBest Practice. You should start your scripts with a few commented lines providing some information about the file.\n\n#### IMPORT & PREPARE DATA ####\n# Author :  Mathilde Mousset\n# Creation Date : 23/11/2024\n# Last Update : 30/11/2024\n# Description : Import and clean measles surveillance data from Moissala\n\n\n\n\n\n\n\n\n\n\nCode. Add some comments to the top of your script describing it.\n\n\n\nComments are also a handy way to split longer scripts into thematic sections, such as “Data Importation”, “Analysis”, “Visualization”, etc. For example:\n\n# NAME OF SECTION 1 -----------------------------------------------             \n\n# NAME OF SECTION 2 -----------------------------------------------             \n\n\n\n\n\n\n\nCode. Use comments to create sections in your script that correspond to the sections in this tutorial.\n\n\n\nFinally, comments allow us write helpful notes for our colleagues (and our future selves!) that can help them understand the code and why we wrote it the way we did. While the exact style and amount of comments that is “best” is debatable, the general rule is to focus on comments that explain “why” rather than “what”. This is because the “what” of well written code should be relatively self explanatory.\nThis comment, for example, is completely superfluous:\n\n1 + 3  # Code to add one to three\n\nBy comparison, here are a few use cases that would warrant comments:\n\nYou define a constant, say a seroprevalence threshold value. You may want to add a comment providing the reference for where the value comes from.\nYour code contains a value or filename that needs to be updated every week. You should indicate this with a comment to ensure that anyone else using the code is aware.\nYou think of an additional bit of analysis or plot that you’d like to add to a particular part of your script. You can use a comment to add a TODO: (to do) reminding you to come back later.\n\n\n\n\n\n\n\nTip\n\n\n\nWhile “what” comments aren’t per se recommended in final scripts that we will use for projects or share with our colleagues, do feel free to use them at will during this course to add additional notes that you might helpful during the learning process.\n\n\n\n\n\n\n\n\nTip 1: Keyborad shortcuts\n\n\n\nYou can comment a selected line with the shortcut CTRL+SHIFT+C You can add a first level section with CTRL+SHIFT+R\n\n\n\n\n\n\n\n\nCode. Add some comments to describe the code that you’ve written thus far."
  },
  {
    "objectID": "sessions_core/introduction.html#data-types",
    "href": "sessions_core/introduction.html#data-types",
    "title": "Introduction to R",
    "section": "Data Types",
    "text": "Data Types\nR has several different data types. The ones we will see most often in this course include:\n\nnumeric\nstring (text)\nboolean (TRUE / FALSE)\ndate\nfactor"
  },
  {
    "objectID": "sessions_core/introduction.html#numerics",
    "href": "sessions_core/introduction.html#numerics",
    "title": "Introduction to R",
    "section": "Numerics",
    "text": "Numerics\nThe numeric type includes both integers and doubles (numbers that include a decimal) and can be created by simply writing the value into your script.\nStrings\nStrings are the R version of text and can be created by surounding text with single or double quotation marks, for example '\"istrict\" or \"cases\".\n\n\n\n\n\n\nBest Practice. While both single and double quotations can be used to create strings, double quotations are typically considered best practice.\n\n\n\nIf you would like to create a string that contains a quotation mark the best practice is to escape the character by putting a ’' in front of it, ie: \"She said \\\"Hello\\\" then left\" or 'it\\’s a beautiful day'.  Equivalently, if you used a double quotation to create the string you can use single quotes inside of it freely (ie: \"it’s a beautiful day\") and vice versa (i.e.: 'She said \"Hello\" then left').Certain characters in R (and in most programming languages) are special, meaning that they are usually a type of command unto themselves. Quotation marks are a good example of this as they are used to tell R to treat a certain word or phrase as a string rather than the name of a variable. Whenever you’d like to use one of these special characters in normal text, you need to explicitly tell R to ignore the ‘special functionality’ of the character. This process is called escaping the special character and is done by placing a ’' directly in front of the character in question.\n\n\n\n\n\n\nCode. Compare the output in the console for the following commands.\n\n\n\n\n28         # numeric\n\"28\"       # text\n28 + \"28\"  # produces an error\n\nThe last command above will give an error because we cannot perform arithmetic operations that combine text and numbers.\n\n\n\n\n\n\nR is case sensitive, meaning that the string \"ABC\" is not the same as \"abc\".\n\n\n\nBoolean (Logical)\nThe boolean (or “logical”) type stores true/false values and is created by writing either TRUE or FALSE in all capitals without quotation marks. Technically we can also write T or F but this is discouraged as T and F can also be used as object or variable names. TRUE and FALSE, however, are protected in R, meaning they cannot be reassigned to another value.\nInternally, R thinks of TRUE and FALSE as being a special version of 1 and 0 respectively, and boolean values can be easily translated to these numeric equivalents for arithmetic operations.\nDetermining the Type of an Object\nThere are several functions to determine the type of an object (often called the class of the object in R).\n\n\n\n\n\n\nCode. Run the following commands:\n\n\n\n\n# Get the Type of an Object\nclass(28)  \nclass(\"Mandoul\")\n\n# Test the Type of an Object\nis.numeric(28)\nis.numeric(\"Mandoul\")\nis.character(\"Mandoul\")\n\nis.numeric(TRUE)\nis.character(TRUE)\nis.logical(FALSE)"
  },
  {
    "objectID": "sessions_core/introduction.html#sec-assignement-operator",
    "href": "sessions_core/introduction.html#sec-assignement-operator",
    "title": "Introduction to R",
    "section": "Saving an Object",
    "text": "Saving an Object\nBefore continuing with more complex data structures, we need to take an important detour to discuss how objects are saved into your environment.\nOften, we will want to reuse the same values or data throughout a script and it is therefore useful to store them as objects in our environment. To do this we use the assignment operator, &lt;-.\n\n\n\n\n\n\nLook. Look at the environment panel on the top right, verifying that it is empty.\n\n\n\n\n\n\n\n\n\nCode. Type the following command to save a variable called cases into your environment.\n\n\n\n\ncases &lt;- 28\n\n\n\n\n\n\n\nLook. Look at the environment again. Is it still empty?\n\n\n\nIf you’d like to access the value of your new object, cases, you simply need to execute it’s name.\n\ncases\n\n[1] 28\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe reason we need to wrap strings in quotation marks is actually to allow R to differentiate between strings and object names.\n\n\nOnce created, objects can be used in other commands:\n\ncases + 5\n\n[1] 33\n\n\n\n\n\n\n\n\nCode. Create an object called region that contains the value \"Mandoul\". Do you see it in your environment?\n\n\n\n\n\n\n\n\n\nBest Practice. Don’t forget that we should always surround &lt;- with spaces to improve readability and avoid errors.\n\nx&lt;-3     # BAD\nx &lt;- 3   # GOOD\n\n\n\n\nUpdating an Object\nWe often want to update the value stored in an object. To do this, we simply assign a new value with the same syntax we used to create it in the first place:\n\ncases &lt;- 32\n\n\n\n\n\n\n\nCode. Update the value of region to \"Moyen Chari\".\n\n\n\nObject Names\nWhen naming your objects, there are a few (relatively) hard rules:\n\nDon’t start with a number\nDon’t use spaces (use a _ instead)\nDon’t use protected values (like TRUE and FALSE) or function names (like mean)\nDon’t use capital letters\n\nBeyond these hard rules, there are also more subjective best practices and personal styles. In general aim for names that are short and descriptive:\n\na &lt;- 19                             # BAD (not informative)\nage_du_patient_a_l_admission &lt;- 19  # BAD (too long)\nage &lt;- 19                           # GOOD\n\nGiving your objects clear and informative names helps to make your code readable, making it easy for others to understand without the need for excessive documentation."
  },
  {
    "objectID": "sessions_core/introduction.html#data-structures",
    "href": "sessions_core/introduction.html#data-structures",
    "title": "Introduction to R",
    "section": "Data Structures",
    "text": "Data Structures\nUp until now we have looked only at simple objects that store single values, let’s now turn our focus to more complex structures that can store entire datasets.\nVectors\nWe can collect multiple values (such as numerics or strings) into a single object, called a vector.\nTechnically, there are several types of vectors, for example:\n\n\nSimple vectors (or atomic vectors) can only contain one type of values. For example, a numeric vector 2, 4, 6 or a string vector \"Mandoul\", \"Moyen Chari\".\n\nRecursive vectors (usually called lists) are far more complex and can contain multiple dimensions and types of data. We will not learn about them in this lesson, but there is a satellite module introducing them\n\n\nThis course will not go into detail on the more abstract concepts behind these structures and instead focus only on those you will encounter most often in your daily work.\nSimple Vectors\nSimple vectors can contain one or more values of a single data type, they thus have two key properties: length and type. For the purpose of this class, we will use the terms “simple vector” and “vector” interchangeably (as is typical in the R community).\nYou’ve technically already created your very first simple vectors when you built cases and region. These were simply vectors with a length of one. To create a vector with more than one value, we will use the function c():4\n\ncases &lt;- c(2, 5, 8, 0, 4)\n\n\n\n\n\n\n\nCode. Update cases with the above values and update region to create a string vector containing the values: Mandoul, Moyen-Chari, Logone Oriental, Tibesti, Logone Occidental.\n\n\n\nWe can now use functions on the objects we have created:\n\nmean(cases)      # calculate the mean value of the cases vector\n\n[1] 3.8\n\ntoupper(region)  # convert all the values in region to lower case\n\n[1] \"MANDOUL\"           \"MOYEN-CHARI\"       \"LOGONE ORIENTAL\"  \n[4] \"TIBESTI\"           \"LOGONE OCCIDENTAL\"\n\n\n\n\n\n\n\n\nCode. Use the function sum() to calculate the sum of cases\n\n\n\n\n\n\n\n\n\nCode. Pass region to the function tolower()\n\n\n\nAccessing the Values of a Vector\nIt is possible to access the value of a vector using square brackets containing the index (position) of the desired value, ie: [3] or [189].\n\ncases[2]   # 2nd value of cases\n\n[1] 5\n\ncases[10]  # 10th value of cases\n\n[1] NA\n\n\nOoops it does not exist! We will come back to what this NA means in Section 8.\nWe can also access a range of values, just as we might do in Excel. To create a range we use the : operator to separate the desired minimum and maximum index:\n\ncases[2:4]  # 2nd to 4th values of cases\n\n[1] 5 8 0\n\n\n\n\n\n\n\n\nCode. Get the 3rd value of region.\nCode. Write code to access the values “Mandoul” and “Moyen-Chari” in the vector region.\n\n\n\nDataframes\nDataframes are a special type of list that is composed of multiple simple vectors of the same length. Dataframes take the shape of a table where each of these vectors is a named column, similar to a table in Excel. As epidemiologists, this type of data structure is perhaps the most useful and you will likely use them on a daily basis.\nCreating a Dataframe\nWe can create a dataframe using the function data.frame():\n\ndata.frame(col1 = c(1, 4, 2, 9),\n           col2 = c(\"a bit of text\", \"some more text\", \"hello\", \"epidemiologists\"))\n\n  col1            col2\n1    1   a bit of text\n2    4  some more text\n3    2           hello\n4    9 epidemiologists\n\n\n\n\n\n\n\n\nCode. In your script, create a dataframe called data_cases that contains cases in one column and region in the other.\n\n\n\nExploring a Dataframe\ndata_cases should now appear in your environment. You can click on its name to see some additional information, or click on the blue circle with a white triangle in it to open the object in the Viewer.\n\n\nThe data_case dataframe now appears in the Environment pane\n\nThere are several handy functions we can use to explore a dataframe:\n\n\n\n\n\n\nCode. Run the following commands and try to determine what they type of information they are returning.\n\n\n\n\nstr(data_cases)     # STRucture of the object\ndim(data_cases)     # DIMension of the object\nnrow(data_cases)    # Number of ROWs\nncol(data_cases)    # Number of COLumns\nnames(data_cases)   # column NAMES\n\nR comes with several built in data sets that can be accessed directly, including one called iris. We can see the first few lines of this dataset using the function head():The iris dataset is convenient because we don’t need to use extra functions to enable you to use it but its content not really interesting to us. Be reassured, we will learn how to import a dataset in the next core session, and work on linelist data onwards.\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n\n\n\n\n\nCode. How many rows and columns are there in iris? What are the names of its columns?\n\n\n\nAccessing Data in a Dataframe\nIn R, there are several methods for accessing the rows and/or columns of a dataframe. We will present a versatile one, and redirect you to the indexing satellite to learn about the use of [[ ]] and $.\nWe use square brackets to access single values or ranges within our dataframe. To do this we must give R both a row number (or range of rows) and column number/name (or range of columns), using the syntax [row, column].\n\ndata_cases[1, 2]          # the value of row one, column 2\n\n[1] \"Mandoul\"\n\ndata_cases[1, \"region\"]   # first value in the region column\n\n[1] \"Mandoul\"\n\n\nIf we want to access all of the rows (or columns) we can simple leave a space in the place of the number/name:\n\ndata_cases[1, ]           # values of all columns in row one\n\n  cases  region\n1     2 Mandoul\n\ndata_cases[2:4, ]         # values of all columns for rows 2 through 4\n\n  cases         region\n2     5       Sud Kivu\n3     8 Kasai oriental\n4     0          Kasai\n\ndata_cases[ , \"region\"]    # values of all rows for the region column\n\n[1] \"Mandoul\"        \"Sud Kivu\"       \"Kasai oriental\" \"Kasai\"         \n[5] \"Haut Katanga\"  \n\n\n\n\n\n\n\n\nCode. Write a command to calculate the sum of the cases column of your dataframe.\n\n\n\nWe can even select multiple non-consecutive indices by using a numeric vector:\n\ndata_cases[c(1, 3), ]  # lines 1 and 3 (all columns)\n\n  cases         region\n1     2        Mandoul\n3     8 Kasai oriental\n\n\nDo be careful, as the type of output returned when extracting data from a dataframe can sometimes depend on the style of indexing used:\n\nstr(data_cases[1 , ])   # returns a dataframe\n\n'data.frame':   1 obs. of  2 variables:\n $ cases : num 2\n $ region: chr \"Mandoul\"\n\nstr(data_cases[ , 1])   # returns a simple vector\n\n num [1:5] 2 5 8 0 4\n\n\nAnother syntaxt to extract the various columns of a dataframe:\n\ndata_cases[2]           # returns the second column (as a dataframe)\n\n          region\n1        Mandoul\n2       Sud Kivu\n3 Kasai oriental\n4          Kasai\n5   Haut Katanga\n\ndata_cases[\"region\"]    # returns the region column (as a dataframe)\n\n          region\n1        Mandoul\n2       Sud Kivu\n3 Kasai oriental\n4          Kasai\n5   Haut Katanga\n\n\nNotice that these commands returned single-column dataframes.\n\n\n\n\n\n\nCode. Write a command to access the third value in the region column of your dataframe.\nCode. Write a command to return the second and third values of the cases column."
  },
  {
    "objectID": "sessions_core/introduction.html#sec-missing-values",
    "href": "sessions_core/introduction.html#sec-missing-values",
    "title": "Introduction to R",
    "section": "Missing Values",
    "text": "Missing Values\nAs epidemiologists, we work with missing data all the time. In R, missing values are coded using a special value: NA (meaning Not Available). NA is somewhat unique in R as it doesn’t per se have a fixed type, rather, it will take on the type of the values around it. For example, an NA in a numeric column will then take on the numeric type. We will discuss the idea of missing data in more depth in later sessions of the course."
  },
  {
    "objectID": "sessions_core/introduction.html#sec-functions",
    "href": "sessions_core/introduction.html#sec-functions",
    "title": "Introduction to R",
    "section": "Functions",
    "text": "Functions\nFunctions are objects that contain commands (instead of values) that are run whenever the function is called. You are without doubt familiar with functions in Excel such as SUM and the idea of functions in R is exactly the same.\nMost functions require some sort of input, such as a dataset or parameter. These inputs are called arguments and are normally named. For example, when we ran sum(cases), we provided the vector cases as the first (and only) argument to the function sum.\nOften, a function will have a combination of both obligatory and optional arguments. The first argument of a function is almost always obligatory and is typically a dataset. As an obligatory and rather obvious argument, most people omit its name when calling a function; ie: i.e. people will write mean(cases) instead of mean(x = cases). Optional arguments on the other hand are usually added using their name, i.e.: mean(x = cases, na.rm = TRUE).\nOptional arguments typically have default values and we only include them when we want to change their defaults (and thus change the default behavior of the function). For example, the na.rm argument of mean determines whether R will ignore missing values when calculating a mean. The default state of the na.rm argument is FALSE, so by default, the mean performed on data with missing values will always return NA as the result:5\n\nmean(c(1, 3, NA))\n\n[1] NA\n\n\nIf we want R to calculate the mean on whatever data is available (and ignore the missing values) we need to explicitly set na.rm = TRUE:\n\nmean(c(1, 3, NA), na.rm = TRUE)\n\n[1] 2\n\n\n\n\n\n\n\n\nBest Practice. Notice that arguments are separated by commas. These commas should always be followed by a space and whenever a named argument is used the = should be surrounded by spaces:\n\nmean(cases,na.rm=TRUE)     # BAD\nmean(cases, na.rm = TRUE)  # GOOD\n\nAs you work with increasingly complex functions, you may start to have a lot of arguments. For readability, it is typically recommended to split each argument onto its own line:\n\nmean(cases, \n     na.rm = TRUE) \n\n\n\n\nWhat happens if we put the arguments in the wrong order? Well, if they are named then the function will still work exactly as expected. That being said, doing this would make your code harder to read and we encourage you to stick with a standard order of putting obligatory arguments like data first.\n\n# technically functional but hard to read:\nmean(na.rm = TRUE,  \n     x = cases) \n\n# better:\nmean(cases,         \n     na.rm = TRUE)\n\nOf course, if you mess up the ordering of arguments and didn’t include their names your code will throw an error:\n\nmean(TRUE, cases)     # throws an error"
  },
  {
    "objectID": "sessions_core/introduction.html#footnotes",
    "href": "sessions_core/introduction.html#footnotes",
    "title": "Introduction to R",
    "section": "Footnotes",
    "text": "Footnotes\n\nIntegrated Development Environments are a group of softwares that provide a convenient interface to use one or more programming languages. Many IDEs are specialized for a specific language (such as RStudio being specialized for R). Others, like VS Code are more general and can be used for any language.↩︎\nYou can think of an R session like you would think of starting up a computer. Whenever a session starts, everything is blank and ready for computation in the same way that there aren’t any programs open when you first turn on your computer. In general, we encourge you to stop and start your R sessions regularly, you may just find that turning it off an on again will fix some of your bugs!↩︎\nReadability refers to how easy (or not) it is for a person to read your code and understand it easily. The spacing of characters within and between lines is an important aspect of what makes code readable. In general, the more we include spacing and the shorter we keep our lines of code the easier it will be to read.↩︎\nMnemonic: c is the first letter of “concatenate”↩︎\nthis is true for many arithmetic operations in R↩︎"
  },
  {
    "objectID": "sessions_core/example.html",
    "href": "sessions_core/example.html",
    "title": "Example Core Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin –&gt;\n\n\n\nHi! I’m a side note!\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_core/example.html#text-formatting",
    "href": "sessions_core/example.html#text-formatting",
    "title": "Example Core Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin –&gt;\n\n\n\nHi! I’m a side note!\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_core/example.html#code",
    "href": "sessions_core/example.html#code",
    "title": "Example Core Session",
    "section": "Code",
    "text": "Code\nInline coding will turn out like this\nCode blocks will appear like this:\n\nprint('hello world')\n\nWarning: For these tutorials, code blocks are not evaluated by default. If you want to evaluate them, you must indicate it specifically.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nAdditionally, solution code blocks are not included by default, including them is done by setting the solutions parameter (in the YAML) to TRUE when rendering.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nNote, this website has code linking activated, so you can click on functions to get their documentation."
  },
  {
    "objectID": "sessions_core/example.html#callouts",
    "href": "sessions_core/example.html#callouts",
    "title": "Example Core Session",
    "section": "Callouts",
    "text": "Callouts\nThings are a bit quick and dirty at the moment. Ultimately I will make nice new classes in a full repicentre theme that can be used for exercised etc. For the moment we will just frankenstine some existing callouts.\nIMPORTANT: please do not use callouts not explicitly defined here; they have not been included in the css theme and therefore will not render well in the final document. If you think that there is another callout outside these three options that should be included, please submit an issue.\n\n\n\n\n\n\nNote\n\n\n\nThis is a callout using {.callout-note}\n\n\n\n\n\n\n\n\nTip\n\n\n\nComment about a genral tip / trick or best practice.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWarning / comment on something really important."
  },
  {
    "objectID": "sessions_core/example.html#action-boxes",
    "href": "sessions_core/example.html#action-boxes",
    "title": "Example Core Session",
    "section": "Action Boxes",
    "text": "Action Boxes\nThese are used for things participants are expected to actually do, ie: exercises. They are split into three categories.\n\nDescription of something participants need to setup, primarily used at the beginning of a section but can also be used for tasks like setting up an Rproject file, folder structure, etc.\n\n\nDescription of something participants should observe, investigate, etc.\n\n\nDescription of a coding exercise that participants are expected to complete."
  },
  {
    "objectID": "sessions_core/example.html#tabsets",
    "href": "sessions_core/example.html#tabsets",
    "title": "Example Core Session",
    "section": "Tabsets",
    "text": "Tabsets\n\n\nOne\nTwo\nThree\n\n\n\nContent that will show under the first tab\n\n\nContent that will show under the second tab\n\n\nContent that will show under the third tab"
  },
  {
    "objectID": "sessions_core/example.html#images",
    "href": "sessions_core/example.html#images",
    "title": "Example Core Session",
    "section": "Images",
    "text": "Images\nYou can insert images by referring to their relative path using markdown syntax or HTML. Note that the markdown syntax does not allow you to modify image size. In either case, make sure to add alt text for accessibility.\nMarkdown style syntax:\n\n\nexample image alt text\n\nHTML style syntax (with specification of desired size):"
  },
  {
    "objectID": "sessions_core/example.html#linking-to-other-pages",
    "href": "sessions_core/example.html#linking-to-other-pages",
    "title": "Example Core Session",
    "section": "Linking to Other Pages",
    "text": "Linking to Other Pages\nEasy, use relative paths within a standard href, ie: link to template or link to satilite example."
  },
  {
    "objectID": "sessions_core/example.html#footnotes",
    "href": "sessions_core/example.html#footnotes",
    "title": "Example Core Session",
    "section": "Footnotes",
    "text": "Footnotes\n\nexample footnote↩︎"
  },
  {
    "objectID": "sessions_core/import_data.html",
    "href": "sessions_core/import_data.html",
    "title": "Import data",
    "section": "",
    "text": "Set up organized and well documented code\nCreate an RStudio Project\nInstall and load packages\nWrite robust file paths\nImport and inspect data\n\nThe principles you learned in the Data Management module will apply here as well: we should do our best to ensure that our projects won’t just work today but can also be reused and shared in the future. While doing this is not always easy, there are several best practices that can help us, and one of the most important is to start with a good, organized code base."
  },
  {
    "objectID": "sessions_core/import_data.html#objectives",
    "href": "sessions_core/import_data.html#objectives",
    "title": "Import data",
    "section": "",
    "text": "Set up organized and well documented code\nCreate an RStudio Project\nInstall and load packages\nWrite robust file paths\nImport and inspect data\n\nThe principles you learned in the Data Management module will apply here as well: we should do our best to ensure that our projects won’t just work today but can also be reused and shared in the future. While doing this is not always easy, there are several best practices that can help us, and one of the most important is to start with a good, organized code base."
  },
  {
    "objectID": "sessions_core/import_data.html#seting-up-your-project",
    "href": "sessions_core/import_data.html#seting-up-your-project",
    "title": "Import data",
    "section": "Seting up your Project",
    "text": "Seting up your Project\nFolder Structure\n\n\n\n\n\n\nDo. If not done already, download the course folder and save it to a location that is not connected to OneDrive.\n\n\n\nOneDrive doesn’t play well with R as it will attempt to constantly synchronize certain project files in a way that can cause errors or memory problems.This folder gives an example of a typical (and highly recommended) structure for your code projects:\n\n📁 data\n\n📁 clean\n📁 raw\n\n\n📁 R\n📁 Rmd\n📁 outputs\nREADME\n\nThis folder will be you working directory for all the sessions of this course. You will create an Rstudio project (explanations below) in it, and save all your scripts in /R. The course datasets are already in data/raw. Additionaly, there are a couple of resources (pdfs and links to online books) in the /resources subfolder.\nDefinitions\nTo better understand the concepts from the rest, you need to understand the two following concepts:\nWorking directory. The working directory is the location (folder) where your R session is actively working. If you save a file, for example, it will be saved into this folder by default. Similarly, when you want to open a file, this folder will be shown by default. All relative paths (which will be explained in Section 5.1) will be relative to this working directory.1\nRoot. The root refers to the top-most folder level of the working directory. If your course folder was called FETCHR, the root would then be directly inside it (as opposed to being inside one of its subfolders like R or Data).\nRStudio Projects\nAn RStudio Project can be used to make your life easier and help orient RStudio around the various files used in your code.2\nAs a quick reminder, your interface should look something like this:\n\n\n\n\n\nFigure 1: Screenshot of a typical Rstudio interface\n\n\n\n\n\n\n\n\nCode. Open RStudio and create a new project by clicking File &gt; New Project &gt; Existing Directory &gt; Browse, navigating into (opening) the course folder, and clicking Create Project.\n\n\n\n\n\n\n\n\n\nLook. In the Windows Explorer, look at the course folder. You should now see a new file with the extention .Rproj that has a small blue icon with an R in it.\nDon’t see? If you don’t see this file, it’s probably because it is hidden by default on your computer. To change this setting in Windows Explorer, go into the View menu and select Filename Extensions.\n\n\n\n\n\nIcon associated with RStudio projects\n\nWhen you open an RStudio Project, RStudio will start a new R session, open the associated project files, and set your working directory to the root of the course folder. At this time, RStudio will also display the subfolders of this directory in the panel on the bottom right.\n\n\n\n\n\n\nBest Practice. It is strongly recommended to set up a separate RStudio Project for each of your analyses to ensure that your project files remain orgnaized and managable.\n\n\n\nThere are several ways to open an RStudio Project, including:\n\nUsing the RStudio menu File &gt; Open Project and then selecting the relevant .Rproj file\nClicking on the Project: (none) button on the top right of the RStudio interface (see Figure 1)\nNavigating in the folder explorer to the analysis folder and double clicking on the file with the .Rproj extension\nRStudio Options\nBefore continuing, let’s update some of RStudio’s problematic default settings:\n\n\n\n\n\n\nCode. Open the globabl options (Tools &gt; Global Options) and open the tab General (left menu). Make sure that none of the boxes in the sections R Sessions, Workspace, or History are checked.\n\n\n\n\n\nScreenshot of the Rstudio options\n\nWhen checked, these options cause RStudio to save the objects in your environment and reload them as well as any files you previously had open when you open a new R session. While these default may seem like a good idea, it is better (especially as a beginner) to always start your work from a fresh, empty R session to avoid bugs.\n\n\n\n\n\n\nImportant\n\n\n\nRemember that any commands or outputs that is needed for the cleaning and analysis should be saved explicitly in a script, in the correct, functional order."
  },
  {
    "objectID": "sessions_core/import_data.html#creating-a-new-script",
    "href": "sessions_core/import_data.html#creating-a-new-script",
    "title": "Import data",
    "section": "Creating a New Script",
    "text": "Creating a New Script\n\n\n\n\n\n\nDo Open a new script and save it in the R folder of your project under the name import_data.R.\nCode. Add some metadata to the top as seen in the first session using comments. Be sure to include:\n\nTitle\nAuthor\nCreation Date\nDescription\n\n\n\n\nNow you’re ready to start coding!"
  },
  {
    "objectID": "sessions_core/import_data.html#sec-packages",
    "href": "sessions_core/import_data.html#sec-packages",
    "title": "Import data",
    "section": "Packages",
    "text": "Packages\nPackages are collections of functions that extend the functionality of R. You’ll use them a lot, both in this course and in your daily life. Fortunately, as an open source language, R packages can be downloaded and installed for free from the internet.\nInstallation\nWe can install a new package using the function install.packages(), which downloads and installs it into the package library on your computer.\n\ninstall.packages(\"here\") # install the \"here\" package\n\n\n\n\n\n\n\nWarning\n\n\n\nDon’t forget to wrap the package name in quotation marks when using install.packages(). What happens if you don’t do this?\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo avoid any potential internet connectivity issues during the training, we already had you install most of the course packages (including the one in the example below).\nIf you have not installed the packages used in the course yet, you will have to manually do it each time you encounter a new package.\n\n\nUsage\nOnce a package is installed you can use it by “going to get it from your library” using the function library(). This process is called loading the package.\n\nlibrary(here) # load the \"here\" package\n\n\n\n\n\n\n\nCode. Use the library() function to load the packages here and rio, which will be used in Section 5.2.\n\n\n\nBased on your computer’s set up and the package you are trying to load, you may get a warning message3 noting that some functions have been masked or that the current version of the package was built for a different version of R. These messages are not usually a problem but are still important to note.\n\n\n\n\n\n\nCode. Try to run the following code. Can you work out what the error means?\n\n\n\n\nlibrary(ggplot)\n\nThe above code throws an error because you have asked for a library that doesn’t exist. Remember that R is fickle and case sensitive and many of your errors will come from small typos in the names of functions or objects. Here, for example, we wanted to load the package ggplot2 but wrote ggplot instead.\n\n\n\n\n\n\nBest Practice. Most of the time, you’ll need to load a number of packages for your script and it is recommended to have a section at the start of your code that loads everything you’ll need in one place:\n\n# Packages ----------------------------\nlibrary(tidyverse)   # data manipulation\nlibrary(lubridate)   # date manipulation\n\nThis practice makes it easy to tell which packages need to be installed to run a script.\n\n\n\n\n\n\n\n\n\nCode. Use comments to create a “Packages” section to your script.\n\n\n\nUpdating Packages\nR has a very active community of developers and it’s pretty common for packages to be updated from time to time as their owners add in new functions and fix existing bugs. In order to update the packages in your library, you can go into the Packages tab of the bottom right panel and click Update. Don’t forget that you’ll need to be connected to the internet during this process.\n\n\n\n\n\n\nWarning\n\n\n\nSometimes packages are updated in a way that might remove or change a function that you used in some of your scripts, causing your code to no longer work. Don’t panic if this happens: it is always possible to go back and install an older version of a package if you need to. Details on how to do this are beyond the scope of this class, however, and we do note that the best practice is always to adapt your code rather than forcibly install an old version of a package."
  },
  {
    "objectID": "sessions_core/import_data.html#data-importation",
    "href": "sessions_core/import_data.html#data-importation",
    "title": "Import data",
    "section": "Data Importation",
    "text": "Data Importation\nFinding your files: Understanding File Paths\nTo open a file in R you need to provide a file path. A file path is simply a longer name for a file, that includes not only its name but also its location on your computer. There are several ways of defining these path, including absolute, relative, and absolute.\nAbsolute Paths\nAbsolute paths are specific to your computer and create a file path that goes all the way up to the level of your harddrive. For example, an absolute path may look something like this: D:/OneDrive - MSF/Documents/MATHILDE/1_MONITORING/CHOLERA/data/raw/exemple_linelist.xlsx. Clearly, this path will only work on one computer.\nThe use of hardcoded absolute paths is strongly discouraged as they would all need to be changed any time your code is shared or the project folder is moved; if not, the code would no longer run properly.\nRelative Paths\nRelative paths are defined relative to your current working directory (Section 2.2). For example, keeping in mind that our handy .Rproj file will set our working directory to the root of our project folder; we could create a relative path that looked like data/raw/exemple_linelist.xlsx. This means that as long as we maintain the internal structure of our project folder and have an .Rproj file our code would theoretically run on multiple computers.\n\n\n\n\n\n\nNote\n\n\n\nForeshadowing. File paths actually work a bit differently in RMarkdown files than they do in R scripts, but this is something we will talk about much later in the course. If you don’t know what RMarkdown is at the moment, don’t worry about it.\n\n\nRobust Paths\nWhile using a combination of relative paths and an RStudio project has fixed a lot of our problems, there are still a couple remaining issues. One is that different operating systems interpret characters like /, \\, and // differently, meaning the file paths described above (whether relative or absolute) may not work across multiple systems. Fortunately, we have a few options.\nThe first is to use the base R function file.path(), which will accept a set of the relevant parts (folders) in your desired path and combine them into a file path using the syntax of your local operating system, whichever it is:\n\nfile.path(\"data\", \"raw\", \"exemple_linelist.xlsx\")\n\n[1] \"data/raw/exemple_linelist.xlsx\"\n\n\nNote that the path is relative, here to the current working directory\nWhile file.path() works fine, the function here() (from the package of here) works even better. One of the other outstanding problems with our relative path solution is that if ever we change our working directory during an R session the relative paths from our scripts will no longer be correct. here accepts a set of names in the same style as file.path() but will then use them to dynamically construct an absolute path adapted to your operating system and based on the location of your .Rproj file. In this course we strongly encourage you to use here() whenever you need to create a file path.\n\nlibrary(here)\nhere(\"data\", \"raw\", \"exemple_linelist.xlsx\")\n\n[1] \"/home/catherine/Documents/epicentre/training/repicentre/data/raw/exemple_linelist.xlsx\"\n\n\n\n\n\n\n\n\nCode. Run the above code in the console. What file path does here(\"data\", \"raw\") give you?\n\n\n\nWe will often want to source multiple data files in a single project. To make that process easier, it can be helpful to create a variable with the path to your raw (or clean) data.\n\n\n\n\n\n\nCode. Create a new section in your code called File Paths\nCode. Add the code to create an object called path_data_raw that contains the path to your raw data folder using the function here().\n\n\n\nWe can now pass our new variable path_data_raw back into here() in order to create a full path to a specific data file.\n\n\n\n\n\n\nCode. Using here() and path_data_raw, create a complete filepath for the file msf_linelist_moissala_2023-09-24.xlsx.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nhere() simply creates a file path stored in a string, it doesn’t actually check if a file exists on your computer. What is more, any typos in the file or folder names will result in an error. If you would like to use a function to check if a file exists, check out file.exists() function.\n\n\nImport function\nIn R different file formats are often imported using different, often specialized, functions. This can be tedious as it requires you to memorize and load a large number of functions just to get your data imported. To avoid this problem, we recommend that you use the import() function from the package rio. This function is able to open a large variety of of files (including Excel, csv, Stata, and many others) by recognizing the file extension of your data and calling a relevant specialized function from another package so that you don’t have to..This type of function, providing an unified interface to other specific functions is known as a wrapper\nTo see the full list of all the file types you can load (and save!) with rio, check out their website and in particular the list of supported formats. In the rest of the lesson we will focus on importing data from Excel .xlsx files and .csv text files.\n\n\n\n\n\n\nNote\n\n\n\nBecause import() is actually just calling other functions in the background, it is possible that it will need different arguments depending on the type of file you want to load.\n\n\nImporting .xlsx files\nFrom the First Sheet\nIn general, the usage of import() is pretty simple:\n\nimport(file = here(path_data_raw, \"exemple_linelist.xlsx\"))\n\nNotice that we have nested the command here() inside the import() command. Nesting functions is absolutely allowed in R and is something you will do all the time. When functions are nested, R will evaluate them in the order of the innermost function (in this case here()) to the outermost (in this case import()). In this way, the output of here() is being used as the input of import().\n\n\n\n\n\n\nCode. Import the file msf_linelist_moissala_2023-09-24.xlsx that is in your raw data subfolder into R using here() and import().\n\n\n\nIf your import worked correctly, R will print the data into the console but not save it into the environment because we have not assigned them to an object.\n\n\n\n\n\n\nWarning\n\n\n\nYou may not want to have R print very large datasets into the console and assign them directly to an object.\n\n\n\n\n\n\n\n\nCode. Re-ipmort your data but this time save it to an object called df_linelist.\n\n\n\nFrom Any Sheet\nAs you just saw, R selects the first sheet by default. It is however possible to pass the number (or name) of a specific worksheet in your Excel data to import() using the argument which:\n\nimport(file = here(path_data_raw, \"exemple_linelist.xlsx\"),\n       which = 2)\n\n\n\n\n\n\n\nNote\n\n\n\nThe which argument is specific to the file types that have multiple sheets, such as an Excel or .Rdata file. If you try to use it on a .csv file the argument will be ignored.\n\n\nImporting .csv files\nWe can import a .csv file in exactly the same way as an .xlsx file, we need only change the extension:\n\nimport(file = here(path_data_raw, \"exemple_linelist.csv\"))\n\n.csv files sometimes use different delimiters and decimal characters depending on where the file comes from. You can indicate to import() which characters to use for these using the sep and dec arguments respectively:\n\nimport(file = here(path_data_raw, \"exemple_linelist.csv\"),\n       sep = \";\",\n       dec = \",\")\n\n\n\n\n\n\n\nCode. Import the file msf_linelist_moissala_2023-09-24.csv from the raw data folder and store it in an object called df_linelist_csv."
  },
  {
    "objectID": "sessions_core/import_data.html#taking-a-look-at-your-data",
    "href": "sessions_core/import_data.html#taking-a-look-at-your-data",
    "title": "Import data",
    "section": "Taking a Look at your Data",
    "text": "Taking a Look at your Data\nWe have now imported a dataset into R and assigned it to a dataframe (df_linelist). The natural next step is to inspect this dataset, to check that the import went well, get to know it a bit better, and assess if it requires any cleaning before analysis.\nUseful Functions\nWe can start by taking a quick look at the first few lines of the dataframe using the function head(). This function takes a dataframe as its first argument and optionally accepts a second argument n indicating the number of lines we would like to see.\n\nhead(df_linelist, n = 6)\n\nActually, the default value of n is already 6, meaning our above code was equivalent to head(df_linelist).You can check the default value of an argument (if it exists) by checking the documentation of a function. We well show you how to do this in a later session, but you can read a bit here if you are dying to know.\n\n\n\n\n\n\nCode. Use head() to examine the first 12 lines of df_linelist.\n\n\n\nWe can also use the functions we learned in the introduction session to learn more about the shape of our dataframe and the type of data it contains.\n\n\n\n\n\n\nCode. Using dim() and names(), check the dimensions and column names of df_linelist. Do these results match what you see when you open the data in Excel?\n\n\n\n\n\n\n\n\n\nCode. Use str() to check the data type of each column. Does anything look odd? Remember that you can also use functions like is.character() and is.numeric() if you’d like to test the type of a particular column.\n\n\n\nThe Environment\nWe can also check out our data by looking at the Environment tab of the top-right panel. Here, we can see our dataframe in the environment and look at its structure.\n\n\n\n\n\n\nCode. Click on the round blue button next to df_linelist in your environment to see its structure.\n\n\n\nThe Viewer\n\n\n\n\n\n\nCode. Click on the name of your dataframe in the Environment tab. This should open the dataset in a new tab in the same corner as your script (top left).\n\n\n\nThe Viewer displays dataframes as tables and is a convenient way to quickly look at your data. You can even sort and filter your data in the Viewer, though be aware that these actions will not make any changes to the actual object df_linelist. The Viewer can also be opened by using the function View().\n\n\n\n\n\n\nCode. Open df_linelist in the viewer using the function View().\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe overwhelming majority of buttons in RStudio are actually just convenient shortcuts for R functions that are run in the background, as we have now seen in the case of View() and str().\n\n\nData Summaries\nThe function summary accepts a dataframe and is a handy way to get some quick statistics on each of the columns in a dataset:\n\nsummary(iris)\n\n\n\n\n\n\n\nCode. Use summary() to inspect the minimum and maximum values for each column in df_linelist. Do you notice anything odd?\n\n\n\nMake notes of types of data that you think is not correct and of values to check later, it will save you time in the next session."
  },
  {
    "objectID": "sessions_core/import_data.html#done",
    "href": "sessions_core/import_data.html#done",
    "title": "Import data",
    "section": "Done !",
    "text": "Done !\nDon’t forget to save your code!\nIf you want to learn about importing several sheets in one go, or several similar files from a folder, go to the satellite on multiple imports."
  },
  {
    "objectID": "sessions_core/import_data.html#resources",
    "href": "sessions_core/import_data.html#resources",
    "title": "Import data",
    "section": "Resources",
    "text": "Resources\n\nThe rio website\nMore examples on importing data of various file types"
  },
  {
    "objectID": "sessions_core/import_data.html#footnotes",
    "href": "sessions_core/import_data.html#footnotes",
    "title": "Import data",
    "section": "Footnotes",
    "text": "Footnotes\n\nBy default, R usually picks the “Documents” folder as the working directory on Windows machines.↩︎\nTechnically an RStudio Project is just a file containing some metadata that tell RStudio what files to open and where to set your working directory. It will spare you the headache of managing the working directory yourself.↩︎\nUnlike error messages, warnings will not cause R to stop an ongoing command. They are used to signal potential but not severe issues and do not always need to be fixed.↩︎"
  },
  {
    "objectID": "explore.html",
    "href": "explore.html",
    "title": "Explore",
    "section": "",
    "text": "Choose your own adventure by browsing all available sessions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Core Session\n\n\n\nCore\n\n\nExample\n\n\n\nJust an example\n\n\n\n\n\n\nDec 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Satellite Session\n\n\n\nSatellite\n\n\nExample\n\n\nFor fun\n\n\n\nJust an example\n\n\n\n\n\n\nDec 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImport data\n\n\n\nCore\n\n\nRStudio projects\n\n\nPackages\n\n\nImport data\n\n\n\nStarting your first project. Creating an Rstudio project, installing packages and importing data\n\n\n\n\n\n\nDec 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to R\n\n\n\nCore\n\n\nRstudio interface\n\n\nR basics\n\n\nData types\n\n\n\nYour first steps in R. Learn your way around Rstudio, and meet some common R objects\n\n\n\n\n\n\nDec 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSession Title\n\n\n\nCore/Satellite\n\n\nCategory 1\n\n\nCategory 2\n\n\n\nShort description (appears on cards in pathway / explore pages)\n\n\n\n\n\n\nDec 11, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Repicentre",
    "section": "",
    "text": "work in progress… check back later."
  }
]