[
  {
    "objectID": "sessions_core/example.html",
    "href": "sessions_core/example.html",
    "title": "Example Core Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin –&gt;\n\n1 example footnote\nHi! I’m a side note!\n\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_core/example.html#text-formatting",
    "href": "sessions_core/example.html#text-formatting",
    "title": "Example Core Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin –&gt;\n\n1 example footnote\nHi! I’m a side note!\n\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_core/example.html#code",
    "href": "sessions_core/example.html#code",
    "title": "Example Core Session",
    "section": "Code",
    "text": "Code\nInline coding will turn out like this\nCode blocks will appear like this:\n\nprint('hello world')\n\nWarning: For these tutorials, code blocks are not evaluated by default. If you want to evaluate them, you must indicate it specifically.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nAdditionally, solution code blocks are not included by default, including them is done by setting the solutions parameter (in the YAML) to TRUE when rendering.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nNote, this website has code linking activated, so you can click on functions to get their documentation."
  },
  {
    "objectID": "sessions_core/example.html#callouts",
    "href": "sessions_core/example.html#callouts",
    "title": "Example Core Session",
    "section": "Callouts",
    "text": "Callouts\nThings are a bit quick and dirty at the moment. Ultimately I will make nice new classes in a full repicentre theme that can be used for exercised etc. For the moment we will just frankenstine some existing callouts.\n\n\n\n\n\n\nNote\n\n\n\nThis is a callout using {.callout-note}\n\n\n\n\n\n\n\n\nLook. This callout can be used for “observation activities” (ie: look at this thing in the console). Eventually it will be more beautiful, just make sure you use this class.\nWARNING. For the moment this class looks just like the “code activities” class, please make sure you use the right one.\n\n\n\n\n\n\n\n\n\nCode. This callout can be used for “code activities”. Eventually it will be more beautiful, just make sure you use this class.\nWARNING. For the moment this class looks just like the “observation activities” class, please make sure you use the right one."
  },
  {
    "objectID": "sessions_core/example.html#tabsets",
    "href": "sessions_core/example.html#tabsets",
    "title": "Example Core Session",
    "section": "Tabsets",
    "text": "Tabsets\n\n\nOne\nTwo\nThree\n\n\n\nContent that will show under the first tab\n\n\nContent that will show under the second tab\n\n\nContent that will show under the third tab"
  },
  {
    "objectID": "sessions_core/example.html#images",
    "href": "sessions_core/example.html#images",
    "title": "Example Core Session",
    "section": "Images",
    "text": "Images\nYou can insert images by referring to their relative path using markdown syntax or HTML. Note that the markdown syntax does not allow you to modify image size. In either case, make sure to add alt text for accessibility.\nMarkdown style syntax:\n\n\nexample image alt text\n\nHTML style syntax (with specification of desired size):"
  },
  {
    "objectID": "sessions_core/template.html",
    "href": "sessions_core/template.html",
    "title": "Session Title",
    "section": "",
    "text": "Objective 1\nObjective 2"
  },
  {
    "objectID": "sessions_core/template.html#objectives",
    "href": "sessions_core/template.html#objectives",
    "title": "Session Title",
    "section": "",
    "text": "Objective 1\nObjective 2"
  },
  {
    "objectID": "sessions_core/template.html#setup",
    "href": "sessions_core/template.html#setup",
    "title": "Session Title",
    "section": "Setup",
    "text": "Setup\n\n\n\n\n\n\nSETUP. Description of setup for the tutorial (what packages to use, what to name the file, etc.)."
  },
  {
    "objectID": "sessions_core/template.html#main-section",
    "href": "sessions_core/template.html#main-section",
    "title": "Session Title",
    "section": "Main Section",
    "text": "Main Section\nLorem ipsum…\n\nprint('some example code')\n\n\n\n\n\n\n\nNote\n\n\n\nNote about something of interest, like a best practice or helpful hint.\n\n\n\n\n\n\n\n\nLook. Description of something participants should observe.\n\n\n\n…lorem ispum again !\n\n\n\n\n\n\nCode. Description of something participants should code themselves.\n\n\n\nDon’t forget to include a solution"
  },
  {
    "objectID": "sessions_extra/example.html",
    "href": "sessions_extra/example.html",
    "title": "Example Satellite Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin –&gt;\n\n1 example footnote\nHi! I’m a side note!\n\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_extra/example.html#text-formatting",
    "href": "sessions_extra/example.html#text-formatting",
    "title": "Example Satellite Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin –&gt;\n\n1 example footnote\nHi! I’m a side note!\n\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_extra/example.html#code",
    "href": "sessions_extra/example.html#code",
    "title": "Example Satellite Session",
    "section": "Code",
    "text": "Code\nInline coding will turn out like this\nCode blocks will appear like this:\n\nprint('hello world')\n\nWarning: For these tutorials, code blocks are not evaluated by default. If you want to evaluate them, you must indicate it specifically.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nAdditionally, solution code blocks are not included by default, including them is done by setting the solutions parameter (in the YAML) to TRUE when rendering.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nNote, this website has code linking activated, so you can click on functions to get their documentation."
  },
  {
    "objectID": "sessions_extra/example.html#callouts",
    "href": "sessions_extra/example.html#callouts",
    "title": "Example Satellite Session",
    "section": "Callouts",
    "text": "Callouts\nThings are a bit quick and dirty at the moment. Ultimately I will make nice new classes in a full repicentre theme that can be used for exercised etc. For the moment we will just frankenstine some existing callouts.\n\n\n\n\n\n\nNote\n\n\n\nThis is a callout using {.callout-note}\n\n\n\n\n\n\n\n\nLook. This callout can be used for “observation activities” (ie: look at this thing in the console). Eventually it will be more beautiful, just make sure you use this class.\nWARNING. For the moment this class looks just like the “code activities” class, please make sure you use the right one.\n\n\n\n\n\n\n\n\n\nCode. This callout can be used for “code activities”. Eventually it will be more beautiful, just make sure you use this class.\nWARNING. For the moment this class looks just like the “observation activities” class, please make sure you use the right one."
  },
  {
    "objectID": "sessions_extra/example.html#tabsets",
    "href": "sessions_extra/example.html#tabsets",
    "title": "Example Satellite Session",
    "section": "Tabsets",
    "text": "Tabsets\n\n\nOne\nTwo\nThree\n\n\n\nContent that will show under the first tab\n\n\nContent that will show under the second tab\n\n\nContent that will show under the third tab"
  },
  {
    "objectID": "sessions_extra/example.html#images",
    "href": "sessions_extra/example.html#images",
    "title": "Example Satellite Session",
    "section": "Images",
    "text": "Images\nYou can insert images by referring to their relative path using markdown syntax or HTML. Note that the markdown syntax does not allow you to modify image size. In either case, make sure to add alt text for accessibility.\nMarkdown style syntax:\n\n\nexample image alt text\n\nHTML style syntax (with specification of desired size):"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site…coming soon."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Repicentre",
    "section": "",
    "text": "work in progress… check back later."
  },
  {
    "objectID": "pathway.html",
    "href": "pathway.html",
    "title": "Pathway",
    "section": "",
    "text": "These sessions can be followed in order to get a baseline level in R. The series assumes no prior experience in R and is suitable for beginners.\nLooking for more? Want more flexibility? Consider browsing the full session catalog.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to data visualization with ggplot2\n\n\n\n\n\nLearn the basics of buidling plots with ggplot2, and create your first epicurve.\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nExample Core Session\n\n\n\n\n\nJust an example\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "explore.html",
    "href": "explore.html",
    "title": "Explore",
    "section": "",
    "text": "Choose your own adventure by browsing all available sessions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Core Session\n\n\n\nCore\n\n\nExample\n\n\n\nJust an example\n\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Satellite Session\n\n\n\nSatellite\n\n\nExample\n\n\nFor fun\n\n\n\nJust an example\n\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to data visualization with ggplot2\n\n\n\nCore\n\n\nGraphs\n\n\nggplot2\n\n\nepicurve\n\n\n\nLearn the basics of buidling plots with ggplot2, and create your first epicurve.\n\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLists\n\n\n\nSatellite\n\n\nR basics\n\n\nData types\n\n\nLists\n\n\n\nLearn about the basic about R lists.\n\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSession Title\n\n\n\nCore/Satellite\n\n\nCategory 1\n\n\nCategory 2\n\n\n\nShort description (appears on cards in pathway / explore pages)\n\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "sessions_core/06_ggplot.html",
    "href": "sessions_core/06_ggplot.html",
    "title": "Introduction to data visualization with ggplot2",
    "section": "",
    "text": "Grasp the very basics of data visualization in R using ggplot2\n\nBuild a basic epicurve"
  },
  {
    "objectID": "sessions_core/06_ggplot.html#objectives",
    "href": "sessions_core/06_ggplot.html#objectives",
    "title": "Introduction to data visualization with ggplot2",
    "section": "",
    "text": "Grasp the very basics of data visualization in R using ggplot2\n\nBuild a basic epicurve"
  },
  {
    "objectID": "sessions_core/06_ggplot.html#introduction",
    "href": "sessions_core/06_ggplot.html#introduction",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Introduction",
    "text": "Introduction\nThis session is a short introduction to data visualization using the popular ggplot2 package. Keep in mind that visualization in general and even ggplot2 in particular are huge subjects that we can’t cover in a single core session. This tutorial is intended as a taster to give you a feel for how plotting is typically done. To do that, we will come back to one of our most beloved epidemiological plots: the epicurve.1\n1 An epicurve is a particular type of plot that shows the number of daily (or weekly) cases observed during an outbreak. These curves are fundamental in epidemiology and often use multicolored (stacked) bars to indicate not only the number of cases but also the proportion that were suspected/confirmed, alive/dead, etc.Our final plot will look like this:"
  },
  {
    "objectID": "sessions_core/06_ggplot.html#setup",
    "href": "sessions_core/06_ggplot.html#setup",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Setup",
    "text": "Setup\nBefore we get into the theory, let’s get your data and script ready.\n\nOpen your RStudio project and create a new script called epicurves.R with appropriate metadata. Load the following packages: here, rio, dplyr, lubridate, and ggplot2.\nAdd a section to your script called # IMPORT DATA where you import the clean course dataset (linelist_moissala_clean.RDS). Verify that the head() of your data looks like this:\n\n\n\n  id               site            case_name sex age age_unit     age_group\n1  1    Bedaya Hospital             Lan Mock   f   5   months    &lt; 6 months\n2  2  Moïssala Hospital Gabrielle Digregorio   f   1   months    &lt; 6 months\n3  3 Danamadji Hospital        Amaya Solomon   f   4    years   1 - 4 years\n4  6     Bouna Hospital       Phillip Suzuki   m   5   months    &lt; 6 months\n5  7  Bekourou Hospital      Aaqil al-Yousif   m  11   months 9 - 11 months\n6 10   Koumogo Hospital         Travis Engel   m   1   months    &lt; 6 months\n       region sub_prefecture date_onset hospitalisation date_admission ct_value\n1     Mandoul         Bedaya 2022-08-13             yes     2022-08-18       NA\n2     Mandoul       Moissala 2022-08-18             yes     2022-08-19     26.6\n3 Moyen Chari      Danamadji 2022-08-17             yes     2022-08-18     26.6\n4     Mandoul          Bouna 2022-08-22             yes     2022-08-23       NA\n5     Mandoul       Bekourou 2022-08-30             yes     2022-08-31       NA\n6 Moyen Chari        Koumogo 2022-08-30             yes     2022-09-02       NA\n   malaria_rdt fever rash cough red_eye pneumonia encephalitis muac\n1     negative     0    0     1       0         0            0  179\n2 inconclusive     1    1     0       1         0            0   63\n3 inconclusive     0    0     1       1         0            0  235\n4     negative     1    0     1       1         0            0  117\n5 inconclusive     0    1     0       0         0            0  143\n6         &lt;NA&gt;     0    0     1       0         0            0  205\n               muac_cat vacc_status vacc_doses   outcome date_outcome\n1       Green (125+ mm)          No       &lt;NA&gt;      dead   2022-08-21\n2         Red (&lt;115 mm)          No       &lt;NA&gt; recovered   2022-08-22\n3       Green (125+ mm)        &lt;NA&gt;       &lt;NA&gt;      dead   2022-08-19\n4 Yellow (115 - 124 mm)          No       &lt;NA&gt;      &lt;NA&gt;   2022-08-25\n5       Green (125+ mm)          No       &lt;NA&gt; recovered   2022-09-04\n6       Green (125+ mm)          No       &lt;NA&gt; recovered   2022-09-05\n  epi_classification week_admission week_outcome\n1          confirmed             33           33\n2          suspected             33           34\n3          suspected             33           33\n4           probable             34           34\n5          suspected             35           35\n6          confirmed             35           36"
  },
  {
    "objectID": "sessions_core/06_ggplot.html#paradigms-of-plotting",
    "href": "sessions_core/06_ggplot.html#paradigms-of-plotting",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Paradigms of Plotting",
    "text": "Paradigms of Plotting\nIn R, and indeed in everything, there are a lot of ways to approach data visualization. Two of the biggest paradigms are :\n\nThe All-In-One: this approach is characterized by having a single, typically somewhat complex, function that handles all aspects of building a plot. Base R as well as a variety of specialized packages tend to use this approach.\nLayered (or modular)2: here, instead of creating a plot with a single function, we will use separate functions to add (or modify) different features of a plot (such as the primary shapes, labels, error bars, themes, etc). This is the strategy used by packages like ggplot2, highcharter, or echarts4r.\n\n2 This paradigm is sometimes refered to as a ‘Grammar of Graphics’ approach as it it was first articulated in a book of the same name.An in depth discussion of why one might use one approach versus another is beyond the scope of this course, though we will note that most modern visualization packages tend to use a layered model. With that in mind, let’s take a look at the types of layers we are talking about in our “layered” approach.\nBreaking it Down: A Visualization and its Parts\nFor the purpose of this tutorial we will talk about only four visualization components (layers):\n\n\nCanvas / Data\n\nPrimary Shapes\nLabels\nTheme\n\nTo illustrate these components, let’s look at a basic schematic of an epicurve:\n\n\nThe main components of a plot\n\nThe most conceptually complex of the above layers is probably the canvas itself. Much as an artist needs to buy a canvas and conceptualize what they want to paint before they start painting, so too does a user of ggplot2. Creating the canvas is where we tell R that we want to start making a plot and what parts of the data that plot will use. Here, for example, we will tell R “I want to make a plot where the x axis represents weeks and the y axis represents cases”. Once that canvas is set up we can start adding other layers in the same way that an artist would begin adding paint, their signature, or a frame.\nNow, let’s look at the syntax for these layers in ggplot2 and how to put them together.\nGetting Started with {ggplot2}\n\nThe method of building a ggplot is relatively simple and takes the form:\n\nCreate a canvas using a duo of functions ggplot(aes(...))\n\nAdd things to the canvas\n\nggplot2 takes the idea of “adding something to the canvas” very literally: each new layer will be introduced to your plot using the + sign.\nThe general syntax of a ggplot is then:\n\n# PSEUDO CODE -- DO NOT RUN\ndf %&gt;%                     # pipe in your data \n  ggplot(aes(x = ...,      # step 1: create canvas\n             y = ...)) +\n  layer_one(...) +         # step 2: add a first layer\n  layer_two(...) +         # step 3: add another layer\n  ...                      # continue adding layers...\n\nThe number of layers you add depends on how complex you want your plot to be. In our case, we will be adding three layers to our canvas with the following functions:\n\n# PSEUDO CODE -- DO NOT RUN\ndf %&gt;%                    # pipe in your data\n  ggplot(aes(x = ...,     # step 1: create canvas\n             y = ...)) +\n  geom_col(...) +         # step 2: add shapes (bars)        \n  labs(...) +             # step 3: add titles\n  theme_classic(...)      # step 4: add a nicer theme\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that in the above example, our very first line is actually our dataset being piped into the ggplot() function. This makes sense since ggplot2 needs to know what data you’d like to visualize. But be careful, make sure that this line ends in a pipe (%&gt;%) and not in a + sign like the other ones.\n\n\n\n\nThe main components of a plot, with their associated functions\n\nIn the next part of the tutorial we will go through each of these steps (layers) individually using our course dataset to make your first epicurve."
  },
  {
    "objectID": "sessions_core/06_ggplot.html#sec-epicurve-steps",
    "href": "sessions_core/06_ggplot.html#sec-epicurve-steps",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Building Your First ggplot\n",
    "text": "Building Your First ggplot\n\nPreparing Your Data: Aggregate by Week\nUltimately we would like to plot an epicurve of weekly cases. You may have noticed, however, that our current data is daily, so we need to do some aggregation. To start let’s determine the week associated with each admission date using the function isoweek() from the lubridate package, which takes a date (or a vector of dates) and returns the associated ISO week.3\n3 ISO weeks offer an internationally standardized approach to dates that avoid differences between countries on when a week starts and how to define the first week of the year. ISO weeks begin on Monday.\nexample_date &lt;- '27-01-2023'\n\nisoweek(example_date)\n\n[1] 3\n\n\n\nCreate a new section in your script called # PREPARE DATA, then use mutate() and isoweek() to create a new column in your dataframe called week_admission that contains the ISO week associated with every admission date. The head of date_admission and week_admission columns should look like this:\n\n\n\n  date_admission week_admission\n1     2022-08-18             33\n2     2022-08-19             33\n3     2022-08-18             33\n4     2022-08-23             34\n5     2022-08-31             35\n6     2022-09-02             35\n\n\nNow we need to aggregate the total number of cases that were observed each week; because we are using linelist data, the number of cases is simply the number of rows.\n\nUsing count(), create a new dataframe called df_cases that summarizes the total number of cases observed each week. The head of this data frame should look like this:\n\n\n\n  week_admission  n\n1              1 32\n2              2 34\n3              3 41\n4              4 49\n5              5 58\n6              6 86\n\n\nGreat! Now we are ready to make our epicurve. In the following steps, you’ll be asked to use df_cases to plot a classic epicurve of the number of weekly admissions. To demonstrate the functions you’ll be using, I will plot the curve of the number of weekly outcomes as an example. To do that, I’ve build myself another dataframe, df_outcome, which looks like this:\n\nhead(df_outcome)\n\n  week_outcome patients\n1            1       30\n2            2       32\n3            3       28\n4            4       37\n5            5       58\n6            6       75\n\n\nSet up a Canvas: Initialize a Plot\nThe first step is creating your canvas by specifying your dataset and the names of the columns you’d like to visualize. This is done using ggplot(aes(...)) with the following syntax:\n\n# PSEUDO CODE -- DO NOT RUN\ndf_data %&gt;%\n  ggplot(aes(x = x_axis_variable_name,\n             y = y_axis_variable_name))\n\nFor an epicurve of outcomes, I’d like to plot the ISO week (week_outcome) on the x-axis and the number of patients hospitalized (patients) on the y-axis. Let’s update our pseudo-code to do that:\n\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients))\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nJust like with dplyr, we write our column names without quotation marks. This is unsurprising as ggplot2, like dplyr, is a member of the tidyverse and therefore uses similar syntax.\n\n\nFabulous, take a look at that big beautiful box of potential. This is our empty canvas. In RStudio this plot should show up in the panel on the bottom right of the screen.\n\n\nThe plot pannel in RStudio IDE\n\n\n\n\n\n\n\nWhat does aes stands for?\n\n\n\nNow, you may be wondering what is this aes() function that we’ve nested inside of ggplot()? The short answer is that aes() creates an AESthetic mapping that tells ggplot2 which columns of our data should be represented by which visual elements of our plot (like the axes, for example).\nAesthetic mappings create a map that defines how data elements (variables) are to be represented by visual elements (like axes, colors, and sizes). For example, here we are mapping the ISO week number to the x-axis and the number of patients to the y-axis. We could also imagine, for example, an epicurve where bars are colored based on whether patients lived or died. This would be an example where the variable outcome is being mapped to the visual element of color.\nFor now it is enough to know that aes() is the place where you will define your x-and y-axis.\n\n\n\nCreate a new section in your script called # PLOT EPICURVE. Then create an empty canvas for your epicurve using df_cases.\n\nAt this point, your plot should look like this:\n\n\n\n\n\n\n\n\nExcellent! Now let’s add some bars.\nPlot the Bars\nNow that we have our canvas, it’s time to add some shapes. In ggplot2, the shapes plotted on a figure are called geometries.4 Geometries are the primary visual representation of your data and should feel pretty familiar. A few common types of geometries include:\n4 You’ll notice in the below examples that the function for all geometries starts with geom_. This is designed to improve human readability and indeed all geometries in ggplot2 start this way for consistency\n\nBar Plots (geom_col() or geom_bar())\nHistograms (geom_hist())\nScatterplots (geom_point())\nLine Plots (geom_line())\nBoxplots (geom_boxplot())\n\nToday, we’re doing epicurves so we are most interested in learning how to make a bar plot. In our case, we will be using geom_col().5 Remember that adding a new layer (in this case a geometry) to our ggplot is as simple as using a +, so we can add bars to the epicurve of hospitalized cases in the following way:\n5 The exact difference between geom_bar() and geom_col() is a bit beyond our scope. But, in essence, whereas geom_col() is designed to work with pre-aggregated data, geom_bar() will do some degree of aggregation on its own.\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col()\n\n\n\n\n\n\n\nBrilliant! That sure looks like an epicurve to me. Though it does look a bit…grey. If we’d like to update the color of our bars (called the fill), we simply need to add the fill = argument to geom_col().6\n6 Fills and border colors in ggplot2 can be specified in several ways. Here we have used a hex code, which allows us to give a unique code for specific colors. In a pinch, however, you can also specify simple colors by name. For example, arguments like \"blue\" or \"green\" would also be accepted (see a list of R named colors).Let’s give it a try:\n\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col(fill = \"#2E4573\")\n\n\n\n\n\n\n\n\nUpdate your epicurve plot to add bars with the color #E4573.\n\nYour plot should now look like this:\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_col()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn the ggplot2 framework, layers must be added to an existing canvas. This means that running geom_col() by itself will not produce any visual output. This, however, makes sense. Continuing with our analogy of ggplots being like paintings, running geom_col() by itself would be like having paint with no canvas to put it on.\n\n\nLooking good. Now it’s time to make our plot just a bit more informative and just a bit more attractive by adding labels and a nicer theme.\nAdd Some Labels\nA good plot needs some good labeling; n is hardly an informative axis title. Fortunately, ggplot2 makes adding labels easy with the function labs(). This function will accept a variety of arguments allowing you to add a variety of label/title elements to your plot, for example:\n\nAxis Titles (x = and y =)\nPlot Title (title =)\n\nCaption (caption =)\n\nAs for other layers, we can include a label layer by adding labs() to our current plot with the + sign:\n\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"ISO Week\",\n       y = \"Outcomes\",\n       title = \"Measles outcomes in Moissala\")\n\n\n\n\n\n\n\n\nUpdate your epicurve plot to add some reasonable axis labels and a nice title.\nExtra Credit! Try adding a data source using caption =.\n\nYour plot might now look like (for example):\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_col()`).\n\n\n\n\n\n\n\n\nAdd a Theme\nIf we wanted to, we could stop here if our goal is to produce an informal plot. Ideally, however, it would be nice to use a somewhat more attractive theme and to increase the text size. To do this, we will add one last layer to our plot: a theme layer. Much like how geometries in ggplot2 all start with geom_, all themes start with theme_. There are several themes available to you and you can check out what they look like on the {ggplot2} website.\nToday, we will use theme_classic(), which offers a simple but elegant output:\n\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"ISO Week\",\n       y = \"Outcomes\",\n       title = 'Measles outcomes in Moissala') +\n  theme_classic()\n\n\n\n\n\n\n\nOk, nice. But we’d also like to increase the size of that tiny font. To do that we can adjust the base_size = argument:7\n7 The base size of a plot is a baseline font size that is used to calculate the size of all text elements in a plot. If it is increased, the font size of all elements will be increased proportionally.\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"ISO Week\",\n       y = \"Outcomes\",\n       title = 'Measles outcomes in Moissala') +\n  theme_classic(base_size = 20)\n\n\n\n\n\n\n\nThat looks better! Keep in mind that the font size needed will depend on what the plot is going to be used for (i.e.: a presentation, an informal review, or a final report). Similarly, the exact theme you will want to use is ultimately a subjective choice. While there are guidelines, data visualization is as much an art as a science.\n\nAdd one final layer to your plot that adds a theme of your choice with an appropriate base_size =.\n\nSave your plot\nIf you would like to save your epicurve, you can click on the “Export” button in the plot panel of RStudio:\n\n\nSave plot button in the RStudio plot pannel"
  },
  {
    "objectID": "sessions_core/06_ggplot.html#facetting-this-plot-by-age-group-or-site",
    "href": "sessions_core/06_ggplot.html#facetting-this-plot-by-age-group-or-site",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Facetting: This Plot By Age Group or Site",
    "text": "Facetting: This Plot By Age Group or Site\nNow, this plot is cool, but in you sitrep you want to show the data by age group, or by site. There are several ways to do that.\n\nThe intuitive way, which you already have the skill to do, is to copy and reuse the graph code, passing different, filtered dataframes to the ggplot() command\nUse a for loop or apply or map family functions: these are ways to automatize actions that involve less copy and pasting\nTrust ggplot2 to have a solution\n\nThe first option is tedious and it is easy to make errors; the second option can be quite powerfull and I hope that at some point you will learn some of these tools, but it is out of the scope of this tutorial. We will focus on the third option, which is powerfull and sufficient for many contexts.\nThe function facet_wrap() allow you to replicate a graph based on the categories of a variable. For example, you could make the outcome graph by sex, or by site. As other layers of a ggplot graph, you add it to your existing graph with a +. It will create a a figure with multiple small graphs, that ggplot2 calls facets or small multiples.\nGet the Data Ready\nIf we want to to plot anything by site, the site variable must be present in the aggregated datadata. Our current summarised dataset is only summarised by week though:\n\nhead(df_outcome)\n\n  week_outcome patients\n1            1       30\n2            2       32\n3            3       28\n4            4       37\n5            5       58\n6            6       75\n\n\nLet’s create a new summarized dataset that has the number of outcomes by week and by site!\n\n# Summarise the data\ndf_outcome_site &lt;- df_linelist %&gt;%\n  mutate(week_outcome = isoweek(date_outcome)) %&gt;%\n  count(week_outcome, site,\n        name = 'patients') %&gt;%\n  tidyr::drop_na(week_outcome)\n\n# Inspect the first line\nhead(df_outcome_site)\n\n  week_outcome               site patients\n1            1    Bedaya Hospital        3\n2            1  Bekourou Hospital        7\n3            1     Bouna Hospital        8\n4            1 Danamadji Hospital        5\n5            1  Moïssala Hospital        7\n6            2    Bedaya Hospital        2\n\n\nAdd the Facet Layer to the Plot\nNow, let’s plot this data. Look at the code bellow: it is exactly the same as before but for the last line, which creates the facets:\n\ndf_outcome_site %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"ISO Week\",\n       y = \"Outcomes\",\n       title = 'Measles outcomes in Moissala') +\n  theme_classic(base_size = 15) +\n  \n  facet_wrap(vars(site))   # Make the plot by site!\n\n\n\n\n\n\n\nIsn’t that incredible? As you can see, the function facer_wrap() takes as argument a variable name wrapped in the vars() function.\n\nNow is your turn, you will draw a plot of the number of admissions by age group:\nPrepare a new aggregated dataframe, summarized by week and age. Then, draw the epicurve by age group (still keeping all the plots improvement: labels, themes etc.)\n\n\n\n\n\n\n\nTip\n\n\n\nTo go further Check out the function help page to learn how to control the number of facets by row with nrow =, or column with ncol =, and how to control the maximum values of the axes with scales =.\nTo go even further Check out their examples in detail: one of them show how to adapt your code to do this:\n\n\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_col()`)."
  },
  {
    "objectID": "sessions_core/06_ggplot.html#done",
    "href": "sessions_core/06_ggplot.html#done",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Done!",
    "text": "Done!\nVery well done team! You have build your first epicurve!"
  },
  {
    "objectID": "sessions_core/06_ggplot.html#resources",
    "href": "sessions_core/06_ggplot.html#resources",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Resources",
    "text": "Resources\nA full book on using ggplot2"
  }
]