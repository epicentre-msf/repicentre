[
  {
    "objectID": "sessions_extra/import_multiple.html",
    "href": "sessions_extra/import_multiple.html",
    "title": "Import multiple files and sheets",
    "section": "",
    "text": "Learn to efficiently import data from several files\nLearn to efficiently import data from several sheets in the same file"
  },
  {
    "objectID": "sessions_extra/import_multiple.html#objectives",
    "href": "sessions_extra/import_multiple.html#objectives",
    "title": "Import multiple files and sheets",
    "section": "",
    "text": "Learn to efficiently import data from several files\nLearn to efficiently import data from several sheets in the same file"
  },
  {
    "objectID": "sessions_extra/import_multiple.html#introduction",
    "href": "sessions_extra/import_multiple.html#introduction",
    "title": "Import multiple files and sheets",
    "section": "Introduction",
    "text": "Introduction\nIn the import data core session your learned how to use rio package to import any file formats, and in particular .xlsx and .csv files, which will probably cover 90% of your needs. In this session we will tackle the very common problem of scaterred data.\nYou may have already encountered these situations:\n\nYou have an Excel file with data in several sheets (linelist data, lab data, bed occupancy) and you need to import it all\nYou have several Excel files (linelist data, lab data, bed occupancy) with data to import.\nYou have an Excel file with data in several sheets, and all the sheets are formatted the same, and you wish the data was all together. A prime example of it is linelist or aggregated data where one sheet represent one week, or one district, and there are about 20 sheets…\nYou have multiple Excel file, all formatted the same (one linelist per site, for exemple)\n\nThe two first cases can be solved with several calls to the different sheets or files, and storing the data in different dataframes. If there are not too many files or shit, it is fine. The two last cases should however be automatized!\nThe following session will help with all of them anyway: the rio package has a import_list() function that can import several items in one go. These items can be files or sheets depending on what you provide as arguments."
  },
  {
    "objectID": "sessions_extra/import_multiple.html#setup",
    "href": "sessions_extra/import_multiple.html#setup",
    "title": "Import multiple files and sheets",
    "section": "Setup",
    "text": "Setup\nWe expect you to be working in the course project. You can add this tutorial to your import_data.R script that you created in the Import data core session, or create a new script.\n\n\n\n\n\n\nCode. If you are working in a new script, add metadata about it at the top and load the rio and here packages. Then create a path_data_raw object that points to the directory data / raw of the course folder."
  },
  {
    "objectID": "sessions_extra/import_multiple.html#import-multiple-sheets",
    "href": "sessions_extra/import_multiple.html#import-multiple-sheets",
    "title": "Import multiple files and sheets",
    "section": "Import Multiple Sheets",
    "text": "Import Multiple Sheets\nThe import_list() function can import all the sheets from a Excel file1 and store them into a list. It avoids you having to write multiple import() commands for each file separately.\n1 Or, in fact, all items from a multi-object file such as .Rdata or .zip\n# returns a list of dataframes\nimport_list(here(path_data_raw, \"example_linelist.xlsx\")) \n\nNow imagine someone gave you lab data with the positive, negative and inconclusive scattered in three different sheets.2 Let’s import this data.\n2 You wonder why they did that but you probably have seen weirder things.\n\n\n\n\n\nLook. In the course folder, go to the subfolder data / raw / multiple_sheets. There are two modified version of the lab data. Open them and look at their structure. Do you see how the second file differs form the first one?\n\n\n\nWe will tackle the first file, as it is less messy.\n\n\n\n\n\n\nCode. Use the import_list() function to import all the sheets of msf_laboratory_moissala_2023-09-24_first.xlsxin one go, and store it in an object called lab_data_list.\n\n\n\nThe object lab_data_list is a list that contains several dataframes (one dataframe per sheet). Maybe you have not followed the list satellite yet and are not sure what to do with it. For now, let’s just peek at it. You can inspect its structure with well known tools:\n\nstr(lab_data_list)     # Structure of the list\n\nList of 3\n $ inconclusive:'data.frame':   58 obs. of  5 variables:\n  ..$ MSF Number ID    : num [1:58] 147 414 455 469 533 ...\n  ..$ Laboratory id    : chr [1:58] \"BOU-4\" \"MOI-5\" \"DAN-12\" \"DAN-13\" ...\n  ..$ Date of the test : POSIXct[1:58], format: \"2022-10-12 18:40:49\" \"2022-12-09 05:55:56\" ...\n  ..$ CT value         : logi [1:58] NA NA NA NA NA NA ...\n  ..$ Final Test Result: chr [1:58] \"inconclusive\" \"inconclusive\" \"inconclusive\" \"inconclusive\" ...\n $ negative    :'data.frame':   101 obs. of  5 variables:\n  ..$ MSF Number ID    : num [1:101] 13 397 416 490 767 ...\n  ..$ Laboratory id    : chr [1:101] \"DAN-1\" \"DAN-9\" \"BOU-12\" \"BEK-12\" ...\n  ..$ Date of the test : POSIXct[1:101], format: \"2022-09-10 21:25:04\" \"2022-11-21 20:02:44\" ...\n  ..$ CT value         : logi [1:101] NA NA NA NA NA NA ...\n  ..$ Final Test Result: chr [1:101] \"negative\" \"negative\" \"negative\" \"negative\" ...\n $ positive    :'data.frame':   888 obs. of  5 variables:\n  ..$ MSF Number ID    : num [1:888] 1 10 21 39 62 71 73 75 105 107 ...\n  ..$ Laboratory id    : chr [1:888] \"BED-1\" \"KOU-1\" \"DAN-2\" \"BEK-1\" ...\n  ..$ Date of the test : POSIXct[1:888], format: \"2022-08-20 00:00:00\" \"2022-09-04 15:21:36\" ...\n  ..$ CT value         : num [1:888] 27 26.9 28.1 27.2 26.3 26 27.8 28.9 26.8 25.9 ...\n  ..$ Final Test Result: chr [1:888] \"positive\" \"positive\" \"positive\" \"positive\" ...\n\nlength(lab_data_list)  # Nb of items in the list\n\n[1] 3\n\nnames(lab_data_list)   # Name of the items of the list\n\n[1] \"inconclusive\" \"negative\"     \"positive\"    \n\n\nYou can also go and click on the list in the Environment panel to inspect its structure, and open it in the Viewer, as we did for dataframes.\n\n\n\n\n\n\nLook. The View is a bit different. Click on the buttons you see and see what happens.\nHint There are buttons that you can click on both on the left and right of the Viewer pane.\n\n\n\nYou can access elements of the list with these commands3:\n3 we added the head() function to shorten the output, but you can remove it to print the whole elements.\nhead(lab_data_list$positive)  # Access by name\n\n  MSF Number ID Laboratory id    Date of the test CT value Final Test Result\n1             1         BED-1 2022-08-20 00:00:00     27.0          positive\n2            10         KOU-1 2022-09-04 15:21:36     26.9          positive\n3            21         DAN-2 2022-09-12 00:54:38     28.1          positive\n4            39         BEK-1 2022-09-15 02:31:22     27.2          positive\n5            62         BOU-1 2022-09-30 17:51:01     26.3          positive\n6            71         BEK-2 2022-10-02 15:03:51     26.0          positive\n\nhead(lab_data_list[1])        # Access by position the first element of the list\n\n$inconclusive\n   MSF Number ID  Laboratory id    Date of the test CT value Final Test Result\n1            147          BOU-4 2022-10-12 18:40:49       NA      inconclusive\n2            414          MOI-5 2022-12-09 05:55:56       NA      inconclusive\n3            455         DAN-12 2022-11-22 17:09:53       NA      inconclusive\n4            469         DAN-13 2022-11-18 07:03:57       NA      inconclusive\n5            533          MOI-9 2023-01-05 03:38:26       NA      inconclusive\n6            882         DAN-21 2023-02-05 21:57:09       NA      inconclusive\n7           1070         BEK-20 2023-01-29 19:46:36       NA      inconclusive\n8           1163         BEK-25 2023-02-08 01:12:21       NA      inconclusive\n9           1326         BED-11 2023-02-23 22:48:47       NA      inconclusive\n10          1600         DAN-31 2023-03-03 12:47:31       NA      inconclusive\n11          1869         MOI-50 2023-03-18 00:41:43       NA      inconclusive\n12          1948         MOI-56 2023-04-01 08:46:37       NA      inconclusive\n13          1987         BOU-42 2023-03-16 15:04:54       NA      inconclusive\n14          2242         MOI-73 2023-03-27 10:37:40       NA      inconclusive\n15          2268         MOI-74 2023-04-07 13:24:03       NA      inconclusive\n16          2449         BOU-48 2023-04-29 23:22:57       NA      inconclusive\n17          2536         MOI-91 2023-04-07 11:09:42       NA      inconclusive\n18          2928        MOI-124 2023-04-21 09:21:41       NA      inconclusive\n19          3068        MOI-136 2023-04-25 03:29:41       NA      inconclusive\n20          3580        MOI-166 2023-05-07 09:01:07       NA      inconclusive\n21          3759        MOI-175 2023-06-02 18:53:39       NA      inconclusive\n22          3820        MOI-177 2023-05-12 06:22:39       NA      inconclusive\n23          3928         BED-61 2023-06-09 07:45:48       NA      inconclusive\n24          4050         BOU-74 2023-06-18 12:26:59       NA      inconclusive\n25          4316         BED-70 2023-06-02 23:11:48       NA      inconclusive\n26          4331         BOU-80 2023-06-06 15:23:00       NA      inconclusive\n27          4609        MOI-216 2023-07-14 06:03:25       NA      inconclusive\n28          4680        MOI-225 2023-07-19 17:24:27       NA      inconclusive\n29          4721        MOI-229 2023-07-22 12:43:41       NA      inconclusive\n30          5025         BOU-86 2023-06-05 04:24:20       NA      inconclusive\n31          5111        MOI-249 2023-08-04 17:51:58       NA      inconclusive\n32          5283        MOI-261 2023-08-12 09:09:33       NA      inconclusive\n33          5337         BED-91 2023-06-28 16:46:56       NA      inconclusive\n34          5634        MOI-281 2023-08-27 08:31:02       NA      inconclusive\n35          5844        MOI-297 2023-06-23 13:13:51       NA      inconclusive\n36          6142        BOU-105 2023-09-06 17:26:24       NA      inconclusive\n37          6591        MOI-346 2023-09-26 10:45:51       NA      inconclusive\n38          6675        MOI-353 2023-08-02 07:21:04       NA      inconclusive\n39          6788        BOU-113 2023-08-31 16:29:50       NA      inconclusive\n40          6945        MOI-369 2023-07-13 08:48:11       NA      inconclusive\n41          7236        BED-123 2023-07-31 09:45:47       NA      inconclusive\n42          7314        MOI-395 2023-08-12 11:32:27       NA      inconclusive\n43          7594        MOI-417 2023-08-15 09:00:03       NA      inconclusive\n44          7743        MOI-432 2023-09-22 11:59:36       NA      inconclusive\n45          7776        MOI-437 2023-10-21 17:40:38       NA      inconclusive\n46          7876        MOI-442 2023-09-18 00:03:53       NA      inconclusive\n47          7900        MOI-445 2023-08-06 18:07:45       NA      inconclusive\n48          8076        MOI-454 2023-10-01 19:23:50       NA      inconclusive\n49          8317        MOI-471 2023-08-09 17:52:31       NA      inconclusive\n50          8332        MOI-473 2023-08-21 03:51:30       NA      inconclusive\n51          8772        MOI-496 2023-09-25 00:47:21       NA      inconclusive\n52          8834        MOI-502 2023-10-20 12:12:01       NA      inconclusive\n53          9089        BED-156 2023-10-22 04:24:13       NA      inconclusive\n54          9090        MOI-519 2023-10-15 19:57:32       NA      inconclusive\n55          9564        MOI-550 2023-10-15 12:26:19       NA      inconclusive\n56          9859        BED-166 2023-11-06 09:27:17       NA      inconclusive\n57          9917        MOI-585 2023-11-12 22:42:52       NA      inconclusive\n58          9917 MOI-585_retest 2023-11-14 22:42:52       NA      inconclusive\n\nhead(lab_data_list[[1]])      # Access the content of the first element\n\n  MSF Number ID Laboratory id    Date of the test CT value Final Test Result\n1           147         BOU-4 2022-10-12 18:40:49       NA      inconclusive\n2           414         MOI-5 2022-12-09 05:55:56       NA      inconclusive\n3           455        DAN-12 2022-11-22 17:09:53       NA      inconclusive\n4           469        DAN-13 2022-11-18 07:03:57       NA      inconclusive\n5           533         MOI-9 2023-01-05 03:38:26       NA      inconclusive\n6           882        DAN-21 2023-02-05 21:57:09       NA      inconclusive\n\n\nBind Into a Dataframe\nIf you know that the data in all the sheets have the same structure, you can tell R to bind all of these tables into a single dataframe (rowwise) by setting the argument rbind = to TRUE:\n\n# Returns a single dataframe:\nimport_list(\n  here(path_data_raw, \"example_linelist.xlsx\"), \n  rbind = TRUE,                    # Tells R to bind list elements together\n  rbind_label = \"Sheet_position\"   # Optional: name the column of the source of data\n)\n\n\n\n\n\n\n\nCode. Use the import_list() function to import all the sheets of msf_laboratory_moissala_2023-09-24_first.xlsxin one go, and store it in an object called lab_data, which is a single dataframe containing all the data.\n\n\n\nYou may use the rbind_label = argument and provide a string for the column name, or nor and see what happens.\nSlightly More Messy Sheets\nNow, let’s focus on the second dataframe provided, msf_laboratory_moissala_2023-09-24_second.xlsx. By now you should have realized that this data is more messy:\n\nthe CT value volumn exists only in the third sheet\nthe Laboratory id is not in the same position in the three sheets\nThe date of the test does not have the same name in all sheets\n\nLet’s see how the import_list() function behaves in these conditions:\n\nlab_data_messy &lt;- import_list(\n  here(path_data_raw, \"multiple_sheets\",\n       \"msf_laboratory_moissala_2023-09-24_second.xlsx\"),\n  rbind = TRUE,\n  rbind_label = \"Sheet_position\")\n\n\n\n\n\n\n\nLook. Run the above code and use the tools that you know to inspect the structure and content of the lab_data_messy object.\n\nWhat happened to the CT value columns? Was it imported? If yes, how was it filled?\nWhat happened to the Laboratory id columns? Was it imported? If yes, how was it filled?\nWhat happened to the dates columns? Were they ignored?\n\n\n\n\nAs you can see the function behaves reasonably:\n\ncolumns are matched by name, so if a column exists in all sheets and has the same name, the data is gathered in the same column, independantly of its position\nthe corrolary is that columns with different names are treated as different columns, so check your names!\nif a column exist in one sheet and not the others, the column will exist in the final dataframe, but the values will be NA for the rows coming from sheets without the column (don’t remember what NA means?).\n\nYou are now ready to import files with multiple sheets! Now let’s tackle data scattered in several files."
  },
  {
    "objectID": "sessions_extra/import_multiple.html#import-multiple-files",
    "href": "sessions_extra/import_multiple.html#import-multiple-files",
    "title": "Import multiple files and sheets",
    "section": "Import Multiple files",
    "text": "Import Multiple files\nFortunately, the import_list() function can also accept a vector of file names. In this case, it will import each of these files and store them into a list, unless you can use the rbind = TRUE.\n\n# Create a vector of (fictitious) files\nvector_paths &lt;- c(\n  here(path_data_raw, \"example_linelist_A.xlsx\"),\n  here(path_data_raw, \"example_linelist_B.xlsx\"),\n  here(path_data_raw, \"example_linelist_C.xlsx\"),\n  here(path_data_raw, \"example_linelist_D.xlsx\"),\n  here(path_data_raw, \"example_linelist_E.xlsx\"),\n  here(path_data_raw, \"example_linelist_F.xlsx\"),\n  here(path_data_raw, \"example_linelist_G.xlsx\"),\n  here(path_data_raw, \"example_linelist_H.xlsx\"),\n  here(path_data_raw, \"example_linelist_I.xlsx\"),\n  here(path_data_raw, \"example_linelist_J.xlsx\"),\n  here(path_data_raw, \"example_linelist_K.xlsx\"),\n  here(path_data_raw, \"example_linelist_L.xlsx\"),\n  here(path_data_raw, \"example_linelist_M.xlsx\")\n)\n\nimport_list(vector_paths) # returns a list\n\n\n\n\n\n\n\nLook. Go to the subfolder data / raw / multiple_files. Open the files to check their content. Would it make sense to concatenate the data together at import in this case?\n\n\n\n\n\n\n\n\n\nCode. Import all the Excel files in one go and store them in a dataframe called linelist_data.\nInspect the dataframe created: how many lines? How many columns? Was everything imported as you expected?\n\n\n\nGet File Paths with file.path()\n\nList All the Files\nManually listing the files that you want to import was fine for demonstrations purposes so that you understand what to pass to the import_list() function, but it is slow and error prone.\nWe will now use the function list.files() to automatically retrieve the file paths. Its main argument, path = takes a file path, and the function returns a simple vector of file names.\n\npath_mult &lt;- here::here(path_data_raw, \"multiple_files\") # optional, to shorten the following code\n\nlist.files(path = path_mult) # returns a vector of file names\n\n[1] \"a_document.txt\"                                 \n[2] \"a_non_data_file.txt\"                            \n[3] \"also_not_data.doc\"                              \n[4] \"msf_linelist_moissala_2023-09-24_bedaya.xlsx\"   \n[5] \"msf_linelist_moissala_2023-09-24_bekourou.xlsx\" \n[6] \"msf_linelist_moissala_2023-09-24_bouna.xlsx\"    \n[7] \"msf_linelist_moissala_2023-09-24_danamadji.xlsx\"\n[8] \"msf_linelist_moissala_2023-09-24_koumogo.xlsx\"  \n[9] \"msf_linelist_moissala_2023-09-24_moissala.xlsx\" \n\n\nWe can ask the function to return the full paths of the files with the argument full.names = TRUE:\n\nlist.files(path = path_mult,\n           full.names = TRUE)\n\n[1] \"D:/MATHILDE_UNPLUGGED/5_OTHER/repicentre/data/raw/multiple_files/a_document.txt\"                                 \n[2] \"D:/MATHILDE_UNPLUGGED/5_OTHER/repicentre/data/raw/multiple_files/a_non_data_file.txt\"                            \n[3] \"D:/MATHILDE_UNPLUGGED/5_OTHER/repicentre/data/raw/multiple_files/also_not_data.doc\"                              \n[4] \"D:/MATHILDE_UNPLUGGED/5_OTHER/repicentre/data/raw/multiple_files/msf_linelist_moissala_2023-09-24_bedaya.xlsx\"   \n[5] \"D:/MATHILDE_UNPLUGGED/5_OTHER/repicentre/data/raw/multiple_files/msf_linelist_moissala_2023-09-24_bekourou.xlsx\" \n[6] \"D:/MATHILDE_UNPLUGGED/5_OTHER/repicentre/data/raw/multiple_files/msf_linelist_moissala_2023-09-24_bouna.xlsx\"    \n[7] \"D:/MATHILDE_UNPLUGGED/5_OTHER/repicentre/data/raw/multiple_files/msf_linelist_moissala_2023-09-24_danamadji.xlsx\"\n[8] \"D:/MATHILDE_UNPLUGGED/5_OTHER/repicentre/data/raw/multiple_files/msf_linelist_moissala_2023-09-24_koumogo.xlsx\"  \n[9] \"D:/MATHILDE_UNPLUGGED/5_OTHER/repicentre/data/raw/multiple_files/msf_linelist_moissala_2023-09-24_moissala.xlsx\" \n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that even if these are absolute paths, we used here and relative paths within the course directory so the absolute paths will different but functional on your computer.\n\n\nKeep Only the Excel files\nNow, this is nice and all but there are those pesky files that are not Excel which we would like to avoid. An easy way is to use the pattern = argument of list.files(). It takes a string of text that is matched to the names of files, to keep only the ones you want.\nThe pattern = argument accepts regular expressions, or regex for short, which are way out of our scope here4. Here we are only giving you pointers to create a simple pattern.\n4 Regular expressions have their own syntax that is not limited to R and are super powerful. They are also hard to use so if you are new to R you should probably wait a bit before diving into them.The function will return file names that match the pattern:\n\n# All file names that contain \"bedaya\":\nlist.files(path = path_mult, pattern = \"bedaya\") \n\n[1] \"msf_linelist_moissala_2023-09-24_bedaya.xlsx\"\n\n# All file names that contain \"msf_linelist\":\nlist.files(path = path_mult, pattern = \"msf_linelist\") \n\n[1] \"msf_linelist_moissala_2023-09-24_bedaya.xlsx\"   \n[2] \"msf_linelist_moissala_2023-09-24_bekourou.xlsx\" \n[3] \"msf_linelist_moissala_2023-09-24_bouna.xlsx\"    \n[4] \"msf_linelist_moissala_2023-09-24_danamadji.xlsx\"\n[5] \"msf_linelist_moissala_2023-09-24_koumogo.xlsx\"  \n[6] \"msf_linelist_moissala_2023-09-24_moissala.xlsx\" \n\n# All file names that contain \"msf_ll\":\nlist.files(path = path_mult, pattern = \"msf_ll\") \n\ncharacter(0)\n\n# All the files that contain \"doc\"\nlist.files(path = path_mult, pattern = \"doc\")\n\n[1] \"a_document.txt\"    \"also_not_data.doc\"\n\n\nDid you notice at the end, two files contained “doc” in their name, one in its name, the other in its extension. If you want to select only the Word document, you need a more precise pattern.\n\n# Get this word document for sure\nlist.files(path = path_mult, pattern = \"\\\\.doc$\") \n\n[1] \"also_not_data.doc\"\n\n\nHere we modified the pattern to make it more restrictive:\n\nthe \\\\. at the start is the regex way of saying that there should be a “.” before “doc”.5\n\nthe $ at the end of the pattern indicates that this pattern should be at the end of the file name.\n\n5 It sound complicated because the “.” alone has a special meaning in regex, so we need to add the \\\\. Go read on regex, or trust us for now.So with this pattern we are looking for files that contain “.doc” at the end of their names.\n\n\n\n\n\n\nCode. Now, write a command using list.files() to automatically list all files that end with “.xlsx”. Then, update your previous code to import these files in one dataframe, as we did before.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe argument recursive = TRUE allows you to list files present in subdirectories of your path target, which can be handy if you have nested folders containing data."
  },
  {
    "objectID": "sessions_extra/epicurves_dates.html",
    "href": "sessions_extra/epicurves_dates.html",
    "title": "Epicurves with dates in x axis",
    "section": "",
    "text": "Learn to display dates on the x-axis of your graphs, and how to tweak the date labels.\nIn the introduction to ggplot session you learned how to plot an epicurve of the number of cases across time.\n\n\n\n\n\n\n\n\nIn that graph we chose to represent epiweeks in the bottom axis, as it is a common task. In this session we will show how to code a variant of this graph with dates instead.\nAs in the core session, the examples will plot the epicurve for outcomes, and you will code the epicurve for hospitalizations."
  },
  {
    "objectID": "sessions_extra/epicurves_dates.html#objective",
    "href": "sessions_extra/epicurves_dates.html#objective",
    "title": "Epicurves with dates in x axis",
    "section": "",
    "text": "Learn to display dates on the x-axis of your graphs, and how to tweak the date labels.\nIn the introduction to ggplot session you learned how to plot an epicurve of the number of cases across time.\n\n\n\n\n\n\n\n\nIn that graph we chose to represent epiweeks in the bottom axis, as it is a common task. In this session we will show how to code a variant of this graph with dates instead.\nAs in the core session, the examples will plot the epicurve for outcomes, and you will code the epicurve for hospitalizations."
  },
  {
    "objectID": "sessions_extra/epicurves_dates.html#dependancies",
    "href": "sessions_extra/epicurves_dates.html#dependancies",
    "title": "Epicurves with dates in x axis",
    "section": "Dependancies",
    "text": "Dependancies\nWe will use the following packages in this session:\n\n\nhere to write robust absolute paths,\n\nrio to import the data,\n\ndplyr to manipulate data,\n\nggplot2 to create the graphs,\n\nlubridate to manage dates and times\n\nscales to create prettier lables"
  },
  {
    "objectID": "sessions_extra/epicurves_dates.html#setup",
    "href": "sessions_extra/epicurves_dates.html#setup",
    "title": "Epicurves with dates in x axis",
    "section": "Setup",
    "text": "Setup\nWe use the same setup as the one from the ggplot core session.\n\n# Import clean data ----------------------------------------\ndf_linelist &lt;- rio::import(here::here('data', 'clean',\n                                      'linelist_moissala_2023-09-24_clean.rds')) %&gt;%\n  tidyr::drop_na(date_admission, date_outcome) %&gt;% \n  mutate(week_admission = isoweek(date_admission))  # Used to plot the weeks ISO\n\n\n\n\n\n\n\nWarning\n\n\n\nTo avoid the warnings all along the session, we removed the missing values both in the admission date and outcome date columns. When you analyse and plot data, always be aware of how many missing data you have and how a tidyr::drop_na() command affects your dataframe."
  },
  {
    "objectID": "sessions_extra/epicurves_dates.html#create-the-time-variable",
    "href": "sessions_extra/epicurves_dates.html#create-the-time-variable",
    "title": "Epicurves with dates in x axis",
    "section": "Create the time variable",
    "text": "Create the time variable\nIn the core session we used the function isoweek() from the lubridate package to derive the week ISO number. In this session, we need to aggregate data by week, and yet still retain information on dates. To do that we will use the function floor_date(), which also belong to the lubridate package. This function returns the first date of a given period (day, month, year etc.). You can think of it as a sort of rounding to the smallest value, but for dates.1\n1 Predictably, there also is a ceiling_date() function that rounds dates to the highest value of a periodThe function has a unit = argument that allows you to choose the period of interest (week, month…) and a week_start = period where you can pass the first day of the week (mondays are 1).\n\ndf_linelist &lt;- df_linelist %&gt;% \n  mutate(\n    # Week number (ISO)\n    week_outcome = isoweek(date_outcome),\n    \n    # First DATE of the week\n    week_first_day_outcome = floor_date(date_outcome,\n                                        unit = \"week\",\n                                        week_start = 1)\n  )\n\nLet’s look at all these time variables:\n\ndf_linelist %&gt;% \n  select(id, date_outcome, week_outcome, week_first_day_outcome) %&gt;%\n  arrange(date_outcome) %&gt;%     # Sort the data by date\n  head(n = 10)\n\n   id date_outcome week_outcome week_first_day_outcome\n1   3   2022-08-19           33             2022-08-15\n2   1   2022-08-21           33             2022-08-15\n3   2   2022-08-22           34             2022-08-22\n4   6   2022-08-25           34             2022-08-22\n5  11   2022-09-04           35             2022-08-29\n6  12   2022-09-04           35             2022-08-29\n7   7   2022-09-04           35             2022-08-29\n8  10   2022-09-05           36             2022-09-05\n9  15   2022-09-06           36             2022-09-05\n10 19   2022-09-09           36             2022-09-05\n\n\nIt is even easier to understand if we calculate the day of thee week associated with each date with the function wday() that also belong to the lubridate package:2\n2 The lubridate package is an extremely useful tool to manage dates in R…\ndf_linelist %&gt;% \n  mutate(\n    day_outcome = wday(date_outcome, \n                       label = TRUE, \n                       abbr = FALSE),\n    day_floor   = wday(week_first_day_outcome, \n                       label = TRUE, \n                       abbr = FALSE)) %&gt;% \n  arrange(date_outcome) %&gt;%     # Sort the data by date\n  select(date_outcome,\n         day_outcome,\n         week_outcome,\n         week_first_day_outcome,\n         day_floor) %&gt;% \n  head(n = 10)\n\n   date_outcome day_outcome week_outcome week_first_day_outcome day_floor\n1    2022-08-19    vendredi           33             2022-08-15     lundi\n2    2022-08-21    dimanche           33             2022-08-15     lundi\n3    2022-08-22       lundi           34             2022-08-22     lundi\n4    2022-08-25       jeudi           34             2022-08-22     lundi\n5    2022-09-04    dimanche           35             2022-08-29     lundi\n6    2022-09-04    dimanche           35             2022-08-29     lundi\n7    2022-09-04    dimanche           35             2022-08-29     lundi\n8    2022-09-05       lundi           36             2022-09-05     lundi\n9    2022-09-06       mardi           36             2022-09-05     lundi\n10   2022-09-09    vendredi           36             2022-09-05     lundi\n\n\nThis illustrate how week_outcome and week_first_day_outcome are two ways to have only one value by week, which makes aggregation possible at the week scale.\n\n\n\n\n\n\nCode. In the import data section of your script, add a new command to your mutate() call and create the variable week_first_day_adm that contains the first day of the week each patient was admitted in. Choose your argument as if the first day of the week is a monday.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nGo read the help page for floor_date() to check out the list of possible units."
  },
  {
    "objectID": "sessions_extra/epicurves_dates.html#aggregate-by-week",
    "href": "sessions_extra/epicurves_dates.html#aggregate-by-week",
    "title": "Epicurves with dates in x axis",
    "section": "Aggregate by week",
    "text": "Aggregate by week\n\n\n\n\n\n\nCode. Count the number of patients per week of admission, this time using the week start instead of the week number.\n\n\n\nHere are the first ten lines of what it should look like:\n\n\n   week_first_day_adm  n\n1          2022-08-15  3\n2          2022-08-22  1\n3          2022-08-29  4\n4          2022-09-05  8\n5          2022-09-12 10\n6          2022-09-19  3\n7          2022-09-26 23\n8          2022-10-03 15\n9          2022-10-10 18\n10         2022-10-17 17"
  },
  {
    "objectID": "sessions_extra/epicurves_dates.html#draw-the-epicurve",
    "href": "sessions_extra/epicurves_dates.html#draw-the-epicurve",
    "title": "Epicurves with dates in x axis",
    "section": "Draw the epicurve",
    "text": "Draw the epicurve\n\n\n\n\n\n\nCode. Create a ggplot with the same look at the epicurve from the ggplot core session, but with the first day of the week on the x axis. Don’t forget to update axis names.\n\n\n\nIt should look like that:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that the bars are identical to the epicurve with weeks number. This is normal, are we are aggregating by week in both cases. It is only the information use to represent the week (ISO number or start date) that changes."
  },
  {
    "objectID": "sessions_extra/epicurves_dates.html#improve-the-axis-appearance-breaksand-labels",
    "href": "sessions_extra/epicurves_dates.html#improve-the-axis-appearance-breaksand-labels",
    "title": "Epicurves with dates in x axis",
    "section": "Improve the axis appearance (breaksand labels)",
    "text": "Improve the axis appearance (breaksand labels)\nggplot2 automatically provided labels for the x axis, trying to adjust for the range of data. We can manually force it to make the labels more or less frequent, and we can manually change the format of the labels.\nTo modify the appearance of the axis, we once again use function from the scale_ familly: scale_x_date().\nChange breaks\nThe breaks controls the frequency of ticks on the axis.\nThe scale_x_date() function has a date_breaks = argument that accepts the interval between two labels in a string. The string can have the following format: \"1 week\", \"2 weeks\", \"4 months\", \"2 years\" etc.\n\n# Outcome graph\ndf_linelist %&gt;% \n  count(week_first_day_outcome) %&gt;% \n  ggplot(aes(x = week_first_day_outcome,\n             y = n)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"Date of outcome\",\n       y = \"Measles cases\",\n       title = \"Measles outcomes in Moissala\") +\n  scale_x_date(date_breaks = \"4 months\") +  # Define breaks\n  theme_classic(base_size = 16)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode. Add the code so that the x-axis displays labels at reasonable intervals on your screen.\n\n\n\n\n\n\n\n\n\n\n\nLabels\nNow that we changed the interval between ticks, let’s improve the labels themselves (the way dates are displayed on the axis). By default the labels are in the form “year-month-day”. It is possible to change this. We are going to show you two ways to do that.\nWith the {scales} package.\nThe scale_x_date() function has a label = argument, that accepts several entries, among which a vector containing the dates, but also a function that generates labels from the breaks. The scales package has such a function, label_date_short() that attempts to create efficient and short labels for dates (by not repeating the year all the time for example).\n\n# Outcome graph\ndf_linelist %&gt;% \n  count(week_first_day_outcome) %&gt;% \n  ggplot(aes(x = week_first_day_outcome,\n             y = n)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"Date of outcome\",\n       y = \"Measles cases\",\n       title = \"Measles outcomes in Moissala\") +\n  scale_x_date(date_breaks = \"2 months\",\n               labels = scales::label_date_short()) + # Short labels\n  theme_classic(base_size = 16)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode. Modify you code use label_date_short() to generate labels.\n\n\n\n\n\n\n\n\n\n\n\nWith the strptime syntax\nIf you prefer to have full control on how to format dates, R has a syntax to describe date and time formats. There is a long help page with all the syntax items accessible at help(strptime), but here are a few of the most useful elements to format a date label:\nDay:\n\n\n%d: from 01 to 31\n\n%e: from 1 to 31\n\nMonth:\n\n\n%b: abbreviated month name (current locale on your computer)\n\n%B: full month name (current locale on your computer)\n\n%m: month as a decimal number\n\nYear\n\n\n%y: Year without the century (two digits)\n\n%Y: year in four digits\n\nSpecial separators:\n\n\n%n: newline\n\n%t: tab\n\nYou can assemble these items in a string, that you pass to different functions that accept a format as argument. Here we will pass it to the format() function to quickly see what display it creates, but after that we will use them in our graph command.\n\nsome_dates &lt;- as.Date(c(\"2024-10-06\", \"2024-12-15\", \"2025-01-20\"))\n\nformat(some_dates, \"%Y-%b-%d\")\nformat(some_dates, \"%Y-%b\")\nformat(some_dates, \"%Y %B %d\")\nformat(some_dates, \"%y/%m/%d\")\nformat(some_dates, \"%d/%m/%Y\")\n\nBack to the graph, the scale_x_date() function has an argument date_labels = that accept a string of text in the above format for the date labels.\n\n# Outcome graph\ndf_linelist %&gt;% \n  count(week_first_day_outcome) %&gt;% \n  ggplot(aes(x = week_first_day_outcome,\n             y = n)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"Date of outcome\",\n       y = \"Measles cases\",\n       title = \"Measles outcomes in Moissala\") +\n  scale_x_date(\n    date_breaks = \"2 months\",      # Define intervals betw. labels\n    date_labels = \"%Y%n%b%n%d\") +  # Define format of labels\n  theme_classic(base_size = 16)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode. Modify the code of you graph to have labels look like this:"
  },
  {
    "objectID": "sessions_extra/epicurves_dates.html#resources",
    "href": "sessions_extra/epicurves_dates.html#resources",
    "title": "Epicurves with dates in x axis",
    "section": "Resources",
    "text": "Resources\nChapter of the Elegant graphics for sata analyses book on date scales"
  },
  {
    "objectID": "sessions_core/introduction.html",
    "href": "sessions_core/introduction.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Familiarize yourself with RStudio\nLearn how to work with the console\nCreate and execute a script\nCreate basic R objects, including vectors and dataframes"
  },
  {
    "objectID": "sessions_core/introduction.html#objectives",
    "href": "sessions_core/introduction.html#objectives",
    "title": "Introduction to R",
    "section": "",
    "text": "Familiarize yourself with RStudio\nLearn how to work with the console\nCreate and execute a script\nCreate basic R objects, including vectors and dataframes"
  },
  {
    "objectID": "sessions_core/introduction.html#exercise-format",
    "href": "sessions_core/introduction.html#exercise-format",
    "title": "Introduction to R",
    "section": "Exercise Format",
    "text": "Exercise Format\nThese exercises are in the format of a self-paced tutorial containing short explanations of key concepts, examples, and exercises for you to follow. The course uses a “learning by doing” approach, and while this first session will start a slow, giving you time to explore the RStudio interface, future sessions will focus heavily on having you write your own code.\nInstructions for exercices will be given in the following formats:\n\n\n\n\n\n\nCode. This box is used for active coding exercise\nExample: Create an object called region that contains the value \"Mandoul\".\n\n\n\n\n\n\n\n\n\nLook. This box is used for exercices where you need to explore and observe\nExample: Inspect the RStudio interface.\n\n\n\nAs you move through these exercises, you may run into some errors. This is completely normal and happens to all programmers, novice and expert. Much like a natural language, R is something you will get better at the more you practice and work through your mistakes.Errors occur when R is unable to complete a command. This can happen for a lot of reasons, for example because you mispelled the name of an object: you’ve asked R to look for a data file that doesn’t exist, or you’ve provided the wrong type of data to a function. Whenever an error occurs, R will stop any ongoing calculation and give you a message explaining what went wrong. We will see and discuss a lot of different errors throughout this course.\nAt the end of each session, we ask that you email us your tutorial code. This will help us to assess how everyone is doing as the course progresses and allow us to provide feedbacks or come back on some muddy points."
  },
  {
    "objectID": "sessions_core/introduction.html#rstudio-and-r",
    "href": "sessions_core/introduction.html#rstudio-and-r",
    "title": "Introduction to R",
    "section": "RStudio and R",
    "text": "RStudio and R\nR is a functional programming language[Functional programming languages are designed primarily to run analyses and focus on tools for data manipulation, computation, and visualization. This can be contrasted with object oriented languages which are more adept at building complex programs (such as operating systems).] that can be used to clean and manipulate data, run analyses (especially statistical ones), visualize results, and much more.\nRStudio is a piece of software that provides a user-friendly interface (or IDE to be precise) for R.1 While using a graphical interface isn’t technically required, it is strongly recommended for beginners.\n1 Integrated Development Environments are a group of softwares that provide a convenient interface to use one or more programming languages. Many IDEs are specialized for a specific language (such as RStudio being specialized for R). Others, like VS Code are more general and can be used for any language.Getting Started with RStudio\nLet’s get started!\n\n\n\n\n\n\nDo. Open RStudio using the start menu or desktop shortcut; if RStudio is already open, please close it open a new session.\n\n\n\nYou should see an interface that looks something like this:\n\n\nView of the Rstudio IDE interface at opening\n\n\n\n\n\n\n\nLook. Inspect the RStudio interface.\n\n\n\nYou will have either three or four panels, including:\nUper Right Corner\nTo the upper right there will be a panel with several tabs. Many of these are beyond the scope of this course, and we will focus on these two:\n\nEnvironment. A list of the objects saved by the user in the current session.2 Because you’ve just started a new session, your environment should be empty.\nHistory. A record of all the commands you have executed during the current session.\n2 You can think of an R session like you would think of starting up a computer. Whenever a session starts, everything is blank and ready for computation in the same way that there aren’t any programs open when you first turn on your computer. In general, we encourge you to stop and start your R sessions regularly, you may just find that turning it off an on again will fix some of your bugs!Bottom Right Corner\nTo the bottom right there will be another multi tab panel, including:\n\n\nFiles. A file explorer for the working directory.\n\nPlots. A location where RStudio will display static visualizations; this tab should be empty for the moment.\n\nPackages. A list of all the R packages installed on your computer.\n\nHelp. A place to read help pages and documentation for functions and packages.\n\n\nViewer. A location where RStudio will display html outputs.\nDocumentation refers to additional narrative text either in a code file or an external document that is written to help folks understand what a piece of code, function, or package does and how it should be used. Code documentation is a bit analogous to creating a data dictionary for a set of survey data and is an invaluable part of making robust and reusable codeLeft Side\nTo the left or bottom left (if you have four panels) you should see the console (we will come back to it in Section 3.2).\nTo the top left (if you have four panels) will be any open scripts (we will come back to it in Section 3.3).\nThe Console\nThe console is where R itself is run.\nWhenever you open a new session, R will start by printing a bit of information about your set up, such as your R version number. Below this there should be a line containing the &gt; symbol and a blinking cursor. To run a command in R, you simply need to type it in after this &gt; and press Enter. R will then process your code and print the result (if there is one). A new &gt; line will then appear ready for the next command.\n\n\n\n\n\n\nBeware of unfinished commands\n\n\n\nIf the last line shown in the console starts with a + instead of a &gt; that means the console is not ready for a new command either because it is still processing a previous one or because it received a bit of incomplete code. If at any point you would like to cancel an ongoing or incomplete command, press Esc.\n\n\n\n\n\n\n\n\nCode. Run the following commands in the console and observe the output.\n\n\n\n\n5 + 90\n\n6 * 171\n\n189 / 36.6\n\n92^3\n\n(12 + 9)^4 / 1000\n\n\n\n\n\n\n\nCode. Run the following command. Note that the final ) is missing, making the command incomplete. What happens when you do this?\n\n\n\n\n3 / (2 + 97\n\nWe can also run functions in the console:\n\n\n\n\n\n\nCode. Run the following commands in the console (one line at a time).\n\n\n\n\n# Find the minimum value\nmin(5, 10)\nmin(1, 8, 56, 0.3)\n\n# Find the maximum value\nmax(568, 258, 314)\n\n\n\n\n\n\n\nLet your code breathe\n\n\n\nBest Practices. You may have noticed in the above examples that our code includes a lot of spaces between characters. This is not by accident. It is considered best practice to include spaces around most operators, such as +, -, *, /, &lt;, &gt;, =, and &lt;-. Not only do these spaces make your code more readable3, in some cases they may even be necessary to avoid errors. That said, do be aware that there are a small number of operators that should not be surrounded by spaces, such as ^ and ..\n\n1+29+4.8/3*3           # BAD\n1 + 29 + 4.8 / 3 * 3   # GOOD\n\n\n\n3 Readability refers to how easy (or not) it is for a person to read your code and understand it easily. The spacing of characters within and between lines is an important aspect of what makes code readable. In general, the more we include spacing and the shorter we keep our lines of code the easier it will be to read.Scripts\nScripts are text files that contain a series of commands for a particular programming language. The extension of the file indicates which language the commands were written in, and we will be using .R. Scripts allow us to create code that can be reused, shared, and even automated.\nWriting Your First Script\n\n\nSteps to create a new script in the RStudio IDE\n\nTo create a new script, follow the menu File &gt; New File &gt; R Script. Alternatively, you can also click on the small green + sign just below the File menu or use the keyboard shortcut CTRL+SHIFT+N. This new and unsaved script will appear as a blank document in the top left panel.\nTo save your script, either use the menu File &gt; Save As our the keyboard shortcut CTRL+S.\n\n\n\n\n\n\nCode. Create and save a new script called discovery.R. Don’t forget to include the .R extension.\n\n\n\nExecuting Code from a Script\nTo run code from a script simply place your cursor on the line you wish to run (or select multiple lines) and do one of the following:\n\nClick the Run icon at the top right of the script panel\nUse the shortcut CTRL+Enter (cursor will move to the next line)\nUse the shortcut ALT+Enter (cursor will stay on the current line)\n\n\n\n\n\n\n\nCode. Copy the code you ran in the previous exercises into your script and try running it using each of the above methods.\n\n\n\nComments\nIn R, any text prefaced by a # (until the end of a line) is called a comment. R does not consider comments to be code and will ignore them whenever you run your scripts. This makes comments an excellent way to document your code.\n\n# This is a comment\n\n2 + 3  # This is also a comment\n\n[1] 5\n\n\n\n\n\n\n\n\nBest Practice. You should start your scripts with a few commented lines providing some information about the file.\n\n#### IMPORT & PREPARE DATA ####\n# Author :  Mathilde Mousset\n# Creation Date : 23/11/2024\n# Last Update : 30/11/2024\n# Description : Import and clean measles surveillance data from Moissala\n\n\n\n\n\n\n\n\n\n\nCode. Add some comments to the top of your script describing it.\n\n\n\nComments are also a handy way to split longer scripts into thematic sections, such as “Data Importation”, “Analysis”, “Visualization”, etc. For example:\n\n# NAME OF SECTION 1 -----------------------------------------------             \n\n# NAME OF SECTION 2 -----------------------------------------------             \n\n\n\n\n\n\n\nCode. Use comments to create sections in your script that correspond to the sections in this tutorial.\n\n\n\nFinally, comments allow us write helpful notes for our colleagues (and our future selves!) that can help them understand the code and why we wrote it the way we did. While the exact style and amount of comments that is “best” is debatable, the general rule is to focus on comments that explain “why” rather than “what”. This is because the “what” of well written code should be relatively self explanatory.\nThis comment, for example, is completely superfluous:\n\n1 + 3  # Code to add one to three\n\nBy comparison, here are a few use cases that would warrant comments:\n\nYou define a constant, say a seroprevalence threshold value. You may want to add a comment providing the reference for where the value comes from.\nYour code contains a value or filename that needs to be updated every week. You should indicate this with a comment to ensure that anyone else using the code is aware.\nYou think of an additional bit of analysis or plot that you’d like to add to a particular part of your script. You can use a comment to add a TODO: (to do) reminding you to come back later.\n\n\n\n\n\n\n\nTip\n\n\n\nWhile “what” comments aren’t per se recommended in final scripts that we will use for projects or share with our colleagues, do feel free to use them at will during this course to add additional notes that you might helpful during the learning process.\n\n\n\n\n\n\n\n\nTip 1: Keyborad shortcuts\n\n\n\nYou can comment a selected line with the shortcut CTRL+SHIFT+C You can add a first level section with CTRL+SHIFT+R\n\n\n\n\n\n\n\n\nCode. Add some comments to describe the code that you’ve written thus far."
  },
  {
    "objectID": "sessions_core/introduction.html#data-types",
    "href": "sessions_core/introduction.html#data-types",
    "title": "Introduction to R",
    "section": "Data Types",
    "text": "Data Types\nR has several different data types. The ones we will see most often in this course include:\n\nnumeric\nstring (text)\nboolean (TRUE / FALSE)\ndate\nfactor"
  },
  {
    "objectID": "sessions_core/introduction.html#numerics",
    "href": "sessions_core/introduction.html#numerics",
    "title": "Introduction to R",
    "section": "Numerics",
    "text": "Numerics\nThe numeric type includes both integers and doubles (numbers that include a decimal) and can be created by simply writing the value into your script.\nStrings\nStrings are the R version of text and can be created by surounding text with single or double quotation marks, for example 'district' or \"cases\".\n\n\n\n\n\n\nBest Practice. While both single and double quotations can be used to create strings, double quotations are typically considered best practice.\n\n\n\nIf you would like to create a string that contains a quotation mark the best practice is to escape the character by putting a ’' in front of it, ie: \"She said \\\"Hello\\\" then left\" or 'it\\’s a beautiful day'.  Equivalently, if you used a double quotation to create the string you can use single quotes inside of it freely (ie: \"it’s a beautiful day\") and vice versa (i.e.: 'She said \"Hello\" then left').Certain characters in R (and in most programming languages) are special, meaning that they are usually a type of command unto themselves. Quotation marks are a good example of this as they are used to tell R to treat a certain word or phrase as a string rather than the name of a variable. Whenever you’d like to use one of these special characters in normal text, you need to explicitly tell R to ignore the ‘special functionality’ of the character. This process is called escaping the special character and is done by placing a ’' directly in front of the character in question.\n\n\n\n\n\n\nCode. Compare the output in the console for the following commands.\n\n\n\n\n28         # numeric\n\"28\"       # text\n28 + \"28\"  # produces an error\n\nThe last command above will give an error because we cannot perform arithmetic operations that combine text and numbers.\n\n\n\n\n\n\nR is case sensitive, meaning that the string \"ABC\" is not the same as \"abc\".\n\n\n\nBoolean (Logical)\nThe boolean (or “logical”) type stores true/false values and is created by writing either TRUE or FALSE in all capitals without quotation marks. Technically we can also write T or F but this is discouraged as T and F can also be used as object or variable names. TRUE and FALSE, however, are protected in R, meaning they cannot be reassigned to another value.\nInternally, R thinks of TRUE and FALSE as being a special version of 1 and 0 respectively, and boolean values can be easily translated to these numeric equivalents for arithmetic operations.\nDetermining the Type of an Object\nThere are several functions to determine the type of an object (often called the class of the object in R).\n\n\n\n\n\n\nCode. Run the following commands:\n\n\n\n\n# Get the Type of an Object\nclass(28)  \nclass(\"Mandoul\")\n\n# Test the Type of an Object\nis.numeric(28)\nis.numeric(\"Mandoul\")\nis.character(\"Mandoul\")\n\nis.numeric(TRUE)\nis.character(TRUE)\nis.logical(FALSE)"
  },
  {
    "objectID": "sessions_core/introduction.html#sec-assignement-operator",
    "href": "sessions_core/introduction.html#sec-assignement-operator",
    "title": "Introduction to R",
    "section": "Saving an Object",
    "text": "Saving an Object\nBefore continuing with more complex data structures, we need to take an important detour to discuss how objects are saved into your environment.\nOften, we will want to reuse the same values or data throughout a script and it is therefore useful to store them as objects in our environment. To do this we use the assignment operator, &lt;-.\n\n\n\n\n\n\nLook. Look at the environment panel on the top right, verifying that it is empty.\n\n\n\n\n\n\n\n\n\nCode. Type the following command to save a variable called cases into your environment.\n\n\n\n\ncases &lt;- 28\n\n\n\n\n\n\n\nLook. Look at the environment again. Is it still empty?\n\n\n\nIf you’d like to access the value of your new object, cases, you simply need to execute it’s name.\n\ncases\n\n[1] 28\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe reason we need to wrap strings in quotation marks is actually to allow R to differentiate between strings and object names.\n\n\nOnce created, objects can be used in other commands:\n\ncases + 5\n\n[1] 33\n\n\n\n\n\n\n\n\nCode. Create an object called region that contains the value \"Mandoul\". Do you see it in your environment?\n\n\n\n\n\n\n\n\n\nBest Practice. Don’t forget that we should always surround &lt;- with spaces to improve readability and avoid errors.\n\nx&lt;-3     # BAD\nx &lt;- 3   # GOOD\n\n\n\n\nUpdating an Object\nWe often want to update the value stored in an object. To do this, we simply assign a new value with the same syntax we used to create it in the first place:\n\ncases &lt;- 32\n\n\n\n\n\n\n\nCode. Update the value of region to \"Moyen Chari\".\n\n\n\nObject Names\nWhen naming your objects, there are a few (relatively) hard rules:\n\nDon’t start with a number\nDon’t use spaces (use a _ instead)\nDon’t use protected values (like TRUE and FALSE) or function names (like mean)\nDon’t use capital letters\n\nBeyond these hard rules, there are also more subjective best practices and personal styles. In general aim for names that are short and descriptive:\n\na &lt;- 19                             # BAD (not informative)\nage_du_patient_a_l_admission &lt;- 19  # BAD (too long)\nage &lt;- 19                           # GOOD\n\nGiving your objects clear and informative names helps to make your code readable, making it easy for others to understand without the need for excessive documentation."
  },
  {
    "objectID": "sessions_core/introduction.html#data-structures",
    "href": "sessions_core/introduction.html#data-structures",
    "title": "Introduction to R",
    "section": "Data Structures",
    "text": "Data Structures\nUp until now we have looked only at simple objects that store single values, let’s now turn our focus to more complex structures that can store entire datasets.\nVectors\nWe can collect multiple values (such as numerics or strings) into a single object, called a vector.\nTechnically, there are several types of vectors, for example:\n\n\nSimple vectors (or atomic vectors) can only contain one type of values. For example, a numeric vector 2, 4, 6 or a string vector \"Mandoul\", \"Moyen Chari\".\n\nRecursive vectors (usually called lists) are far more complex and can contain multiple dimensions and types of data. We will not learn about them in this lesson, but there is a satellite module introducing them\n\n\nThis course will not go into detail on the more abstract concepts behind these structures and instead focus only on those you will encounter most often in your daily work.\nSimple Vectors\nSimple vectors can contain one or more values of a single data type, they thus have two key properties: length and type. For the purpose of this class, we will use the terms “simple vector” and “vector” interchangeably (as is typical in the R community).\nYou’ve technically already created your very first simple vectors when you built cases and region. These were simply vectors with a length of one. To create a vector with more than one value, we will use the function c():4\n4 Mnemonic: c is the first letter of “concatenate”\ncases &lt;- c(2, 5, 8, 0, 4)\n\n\n\n\n\n\n\nCode. Update cases with the above values and update region to create a string vector containing the values: Mandoul, Moyen-Chari, Logone Oriental, Tibesti, Logone Occidental.\n\n\n\nWe can now use functions on the objects we have created:\n\nmean(cases)      # calculate the mean value of the cases vector\n\n[1] 3.8\n\ntoupper(region)  # convert all the values in region to lower case\n\n[1] \"MANDOUL\"           \"MOYEN-CHARI\"       \"LOGONE ORIENTAL\"  \n[4] \"TIBESTI\"           \"LOGONE OCCIDENTAL\"\n\n\n\n\n\n\n\n\nCode. Use the function sum() to calculate the sum of cases\n\n\n\n\n\n\n\n\n\nCode. Pass region to the function tolower()\n\n\n\nAccessing the Values of a Vector\nIt is possible to access the value of a vector using square brackets containing the index (position) of the desired value, ie: [3] or [189].\n\ncases[2]   # 2nd value of cases\n\n[1] 5\n\ncases[10]  # 10th value of cases\n\n[1] NA\n\n\nOoops it does not exist! We will come back to what this NA means in Section 8.\nWe can also access a range of values, just as we might do in Excel. To create a range we use the : operator to separate the desired minimum and maximum index:\n\ncases[2:4]  # 2nd to 4th values of cases\n\n[1] 5 8 0\n\n\n\n\n\n\n\n\nCode. Get the 3rd value of region.\nCode. Write code to access the values “Mandoul” and “Moyen-Chari” in the vector region.\n\n\n\nDataframes\nDataframes are a special type of list that is composed of multiple simple vectors of the same length. Dataframes take the shape of a table where each of these vectors is a named column, similar to a table in Excel. As epidemiologists, this type of data structure is perhaps the most useful and you will likely use them on a daily basis.\nCreating a Dataframe\nWe can create a dataframe using the function data.frame():\n\ndata.frame(col1 = c(1, 4, 2, 9),\n           col2 = c(\"a bit of text\", \"some more text\", \"hello\", \"epidemiologists\"))\n\n  col1            col2\n1    1   a bit of text\n2    4  some more text\n3    2           hello\n4    9 epidemiologists\n\n\n\n\n\n\n\n\nCode. In your script, create a dataframe called data_cases that contains cases in one column and region in the other.\n\n\n\nExploring a Dataframe\ndata_cases should now appear in your environment. You can click on its name to see some additional information, or click on the blue circle with a white triangle in it to open the object in the Viewer.\n\n\nThe data_case dataframe now appears in the Environment pane\n\nThere are several handy functions we can use to explore a dataframe:\n\n\n\n\n\n\nCode. Run the following commands and try to determine what they type of information they are returning.\n\n\n\n\nstr(data_cases)     # STRucture of the object\ndim(data_cases)     # DIMension of the object\nnrow(data_cases)    # Number of ROWs\nncol(data_cases)    # Number of COLumns\nnames(data_cases)   # column NAMES\n\nR comes with several built in data sets that can be accessed directly, including one called iris. We can see the first few lines of this dataset using the function head():The iris dataset is convenient because we don’t need to use extra functions to enable you to use it but its content not really interesting to us. Be reassured, we will learn how to import a dataset in the next core session, and work on linelist data onwards.\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n\n\n\n\n\nCode. How many rows and columns are there in iris? What are the names of its columns?\n\n\n\nAccessing Data in a Dataframe\nIn R, there are several methods for accessing the rows and/or columns of a dataframe. We will present a versatile one, and redirect you to the indexing satellite to learn about the use of [[ ]] and $.\nWe use square brackets to access single values or ranges within our dataframe. To do this we must give R both a row number (or range of rows) and column number/name (or range of columns), using the syntax [row, column].\n\ndata_cases[1, 2]          # the value of row one, column 2\n\n[1] \"Mandoul\"\n\ndata_cases[1, \"region\"]   # first value in the region column\n\n[1] \"Mandoul\"\n\n\nIf we want to access all of the rows (or columns) we can simple leave a space in the place of the number/name:\n\ndata_cases[1, ]           # values of all columns in row one\n\n  cases  region\n1     2 Mandoul\n\ndata_cases[2:4, ]         # values of all columns for rows 2 through 4\n\n  cases         region\n2     5       Sud Kivu\n3     8 Kasai oriental\n4     0          Kasai\n\ndata_cases[ , \"region\"]    # values of all rows for the region column\n\n[1] \"Mandoul\"        \"Sud Kivu\"       \"Kasai oriental\" \"Kasai\"         \n[5] \"Haut Katanga\"  \n\n\n\n\n\n\n\n\nCode. Write a command to calculate the sum of the cases column of your dataframe.\n\n\n\nWe can even select multiple non-consecutive indices by using a numeric vector:\n\ndata_cases[c(1, 3), ]  # lines 1 and 3 (all columns)\n\n  cases         region\n1     2        Mandoul\n3     8 Kasai oriental\n\n\nDo be careful, as the type of output returned when extracting data from a dataframe can sometimes depend on the style of indexing used:\n\nstr(data_cases[1 , ])   # returns a dataframe\n\n'data.frame':   1 obs. of  2 variables:\n $ cases : num 2\n $ region: chr \"Mandoul\"\n\nstr(data_cases[ , 1])   # returns a simple vector\n\n num [1:5] 2 5 8 0 4\n\n\nAnother syntaxt to extract the various columns of a dataframe:\n\ndata_cases[2]           # returns the second column (as a dataframe)\n\n          region\n1        Mandoul\n2       Sud Kivu\n3 Kasai oriental\n4          Kasai\n5   Haut Katanga\n\ndata_cases[\"region\"]    # returns the region column (as a dataframe)\n\n          region\n1        Mandoul\n2       Sud Kivu\n3 Kasai oriental\n4          Kasai\n5   Haut Katanga\n\n\nNotice that these commands returned single-column dataframes.\n\n\n\n\n\n\nCode. Write a command to access the third value in the region column of your dataframe.\nCode. Write a command to return the second and third values of the cases column."
  },
  {
    "objectID": "sessions_core/introduction.html#sec-missing-values",
    "href": "sessions_core/introduction.html#sec-missing-values",
    "title": "Introduction to R",
    "section": "Missing Values",
    "text": "Missing Values\nAs epidemiologists, we work with missing data all the time. In R, missing values are coded using a special value: NA (meaning Not Available). NA is somewhat unique in R as it doesn’t per se have a fixed type, rather, it will take on the type of the values around it. For example, an NA in a numeric column will then take on the numeric type. We will discuss the idea of missing data in more depth in later sessions of the course."
  },
  {
    "objectID": "sessions_core/introduction.html#sec-functions",
    "href": "sessions_core/introduction.html#sec-functions",
    "title": "Introduction to R",
    "section": "Functions",
    "text": "Functions\nFunctions are objects that contain commands (instead of values) that are run whenever the function is called. You are without doubt familiar with functions in Excel such as SUM and the idea of functions in R is exactly the same.\nMost functions require some sort of input, such as a dataset or parameter. These inputs are called arguments and are normally named. For example, when we ran sum(cases), we provided the vector cases as the first (and only) argument to the function sum().\nOften, a function will have a combination of both obligatory and optional arguments. The first argument of a function is almost always obligatory and is typically a dataset. As an obligatory and rather obvious argument, most people omit its name when calling a function; ie: i.e. people will write mean(cases) instead of mean(x = cases). Optional arguments on the other hand are usually added using their name, i.e.: mean(x = cases, na.rm = TRUE).\nOptional arguments typically have default values and we only include them when we want to change their defaults (and thus change the default behavior of the function). For example, the na.rm = argument of mean() determines whether R will ignore missing values when calculating a mean. The default state of the na.rm = argument is FALSE, so by default, the mean performed on data with missing values will always return NA as the result:5\n5 this is true for many arithmetic operations in R\nmean(c(1, 3, NA))\n\n[1] NA\n\n\nIf we want R to calculate the mean on whatever data is available (and ignore the missing values) we need to explicitly set na.rm = TRUE:\n\nmean(c(1, 3, NA), na.rm = TRUE)\n\n[1] 2\n\n\n\n\n\n\n\n\nBest Practice. Notice that arguments are separated by commas. These commas should always be followed by a space and whenever a named argument is used the = should be surrounded by spaces:\n\nmean(cases,na.rm=TRUE)     # BAD\nmean(cases, na.rm = TRUE)  # GOOD\n\nAs you work with increasingly complex functions, you may start to have a lot of arguments. For readability, it is typically recommended to split each argument onto its own line:\n\nmean(cases, \n     na.rm = TRUE) \n\n\n\n\nWhat happens if we put the arguments in the wrong order? Well, if they are named then the function will still work exactly as expected. That being said, doing this would make your code harder to read and we encourage you to stick with a standard order of putting obligatory arguments like data first.\n\n# technically functional but hard to read:\nmean(na.rm = TRUE,  \n     x = cases) \n\n# better:\nmean(cases,         \n     na.rm = TRUE)\n\nOf course, if you mess up the ordering of arguments and didn’t include their names your code will throw an error:\n\nmean(TRUE, cases)     # throws an error"
  },
  {
    "objectID": "sessions_core/ggplot.html",
    "href": "sessions_core/ggplot.html",
    "title": "Introduction to data visualization with ggplot2",
    "section": "",
    "text": "Grasp the very basics of data visualization in R using ggplot2\n\nBuild a basic epicurve"
  },
  {
    "objectID": "sessions_core/ggplot.html#objectives",
    "href": "sessions_core/ggplot.html#objectives",
    "title": "Introduction to data visualization with ggplot2",
    "section": "",
    "text": "Grasp the very basics of data visualization in R using ggplot2\n\nBuild a basic epicurve"
  },
  {
    "objectID": "sessions_core/ggplot.html#introduction",
    "href": "sessions_core/ggplot.html#introduction",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Introduction",
    "text": "Introduction\nThis session is a short introduction to data visualization using the popular ggplot2 package. Keep in mind that visualization in general and even ggplot2 in particular are huge subjects that we can’t cover in a single core session. This tutorial is intended as a taster to give you a feel for how plotting is typically done. To do that, we will come back to one of our most beloved epidemiological plots: the epicurve.1\n1 An epicurve is a particular type of plot that shows the number of daily (or weekly) cases observed during an outbreak. These curves are fundamental in epidemiology and often use multicolored (stacked) bars to indicate not only the number of cases but also the proportion that were suspected/confirmed, alive/dead, etc.Our final plot will look like this:"
  },
  {
    "objectID": "sessions_core/ggplot.html#setup",
    "href": "sessions_core/ggplot.html#setup",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Setup",
    "text": "Setup\nBefore we get into the theory, let’s get your data and script ready.\n\n\n\n\n\n\nCode. Open your RStudio project and create a new script called epicurves.R with appropriate metadata. Load the following packages: here, rio, dplyr, lubridate, and ggplot2.\nCode. Add a section to your script called # IMPORT DATA where you import the clean course dataset (linelist_moissala_clean.RDS). Verify that the head() of your data looks like this:\n\n\n\n\n\n  id               site            case_name sex age age_unit     age_group\n1  1    Bedaya Hospital             Lan Mock   f   5   months    &lt; 6 months\n2  2  Moïssala Hospital Gabrielle Digregorio   f   1   months    &lt; 6 months\n3  3 Danamadji Hospital        Amaya Solomon   f   4    years   1 - 4 years\n4  6     Bouna Hospital       Phillip Suzuki   m   5   months    &lt; 6 months\n5  7  Bekourou Hospital      Aaqil al-Yousif   m  11   months 9 - 11 months\n6 10   Koumogo Hospital         Travis Engel   m   1   months    &lt; 6 months\n       region sub_prefecture date_onset hospitalisation date_admission ct_value\n1     Mandoul         Bedaya 2022-08-13             yes     2022-08-18       NA\n2     Mandoul       Moissala 2022-08-18             yes     2022-08-19     26.6\n3 Moyen Chari      Danamadji 2022-08-17             yes     2022-08-18     26.6\n4     Mandoul          Bouna 2022-08-22             yes     2022-08-23       NA\n5     Mandoul       Bekourou 2022-08-30             yes     2022-08-31       NA\n6 Moyen Chari        Koumogo 2022-08-30             yes     2022-09-02       NA\n   malaria_rdt fever rash cough red_eye pneumonia encephalitis muac\n1     negative     0    0     1       0         0            0  179\n2 inconclusive     1    1     0       1         0            0   63\n3 inconclusive     0    0     1       1         0            0  235\n4     negative     1    0     1       1         0            0  117\n5 inconclusive     0    1     0       0         0            0  143\n6         &lt;NA&gt;     0    0     1       0         0            0  205\n               muac_cat vacc_status vacc_doses   outcome date_outcome\n1       Green (125+ mm)          No       &lt;NA&gt;      dead   2022-08-21\n2         Red (&lt;115 mm)          No       &lt;NA&gt; recovered   2022-08-22\n3       Green (125+ mm)        &lt;NA&gt;       &lt;NA&gt;      dead   2022-08-19\n4 Yellow (115 - 124 mm)          No       &lt;NA&gt;      &lt;NA&gt;   2022-08-25\n5       Green (125+ mm)          No       &lt;NA&gt; recovered   2022-09-04\n6       Green (125+ mm)          No       &lt;NA&gt; recovered   2022-09-05\n  epi_classification week_admission week_outcome\n1          confirmed             33           33\n2          suspected             33           34\n3          suspected             33           33\n4           probable             34           34\n5          suspected             35           35\n6          confirmed             35           36"
  },
  {
    "objectID": "sessions_core/ggplot.html#paradigms-of-plotting",
    "href": "sessions_core/ggplot.html#paradigms-of-plotting",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Paradigms of Plotting",
    "text": "Paradigms of Plotting\nIn R, and indeed in everything, there are a lot of ways to approach data visualization. Two of the biggest paradigms are :\n\nThe All-In-One: this approach is characterized by having a single, typically somewhat complex, function that handles all aspects of building a plot. Base R as well as a variety of specialized packages tend to use this approach.\nLayered (or modular)2: here, instead of creating a plot with a single function, we will use separate functions to add (or modify) different features of a plot (such as the primary shapes, labels, error bars, themes, etc). This is the strategy used by packages like ggplot2, highcharter, or echarts4r.\n\n2 This paradigm is sometimes refered to as a ‘Grammar of Graphics’ approach as it it was first articulated in a book of the same name.An in depth discussion of why one might use one approach versus another is beyond the scope of this course, though we will note that most modern visualization packages tend to use a layered model. With that in mind, let’s take a look at the types of layers we are talking about in our “layered” approach.\nBreaking it Down: A Visualization and its Parts\nFor the purpose of this tutorial we will talk about only four visualization components (layers):\n\n\nCanvas / Data\n\nPrimary Shapes\nLabels\nTheme\n\nTo illustrate these components, let’s look at a basic schematic of an epicurve:\n\n\nThe main components of a plot\n\nThe most conceptually complex of the above layers is probably the canvas itself. Much as an artist needs to buy a canvas and conceptualize what they want to paint before they start painting, so too does a user of ggplot2. Creating the canvas is where we tell R that we want to start making a plot and what parts of the data that plot will use. Here, for example, we will tell R “I want to make a plot where the x axis represents weeks and the y axis represents cases”. Once that canvas is set up we can start adding other layers in the same way that an artist would begin adding paint, their signature, or a frame.\nNow, let’s look at the syntax for these layers in ggplot2 and how to put them together.\nGetting Started with {ggplot2}\n\nThe method of building a ggplot is relatively simple and takes the form:\n\nCreate a canvas using a duo of functions ggplot(aes(...))\n\nAdd things to the canvas\n\nggplot2 takes the idea of “adding something to the canvas” very literally: each new layer will be introduced to your plot using the + sign.\nThe general syntax of a ggplot is then:\n\n# PSEUDO CODE -- DO NOT RUN\ndf %&gt;%                     # pipe in your data \n  ggplot(aes(x = ...,      # step 1: create canvas\n             y = ...)) +\n  layer_one(...) +         # step 2: add a first layer\n  layer_two(...) +         # step 3: add another layer\n  ...                      # continue adding layers...\n\nThe number of layers you add depends on how complex you want your plot to be. In our case, we will be adding three layers to our canvas with the following functions:\n\n# PSEUDO CODE -- DO NOT RUN\ndf %&gt;%                    # pipe in your data\n  ggplot(aes(x = ...,     # step 1: create canvas\n             y = ...)) +\n  geom_col(...) +         # step 2: add shapes (bars)        \n  labs(...) +             # step 3: add titles\n  theme_classic(...)      # step 4: add a nicer theme\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that in the above example, our very first line is actually our dataset being piped into the ggplot() function. This makes sense since ggplot2 needs to know what data you’d like to visualize. But be careful, make sure that this line ends in a pipe (%&gt;%) and not in a + sign like the other ones.\n\n\n\n\nThe main components of a plot, with their associated functions\n\nIn the next part of the tutorial we will go through each of these steps (layers) individually using our course dataset to make your first epicurve."
  },
  {
    "objectID": "sessions_core/ggplot.html#sec-epicurve-steps",
    "href": "sessions_core/ggplot.html#sec-epicurve-steps",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Building Your First ggplot\n",
    "text": "Building Your First ggplot\n\nPreparing Your Data: Aggregate by Week\nUltimately we would like to plot an epicurve of weekly cases. You may have noticed, however, that our current data is daily, so we need to do some aggregation. To start let’s determine the week associated with each admission date using the function isoweek() from the lubridate package, which takes a date (or a vector of dates) and returns the associated ISO week.3\n3 ISO weeks offer an internationally standardized approach to dates that avoid differences between countries on when a week starts and how to define the first week of the year. ISO weeks begin on Monday.\nexample_date &lt;- '27-01-2023'\n\nisoweek(example_date)\n\n[1] 3\n\n\n\n\n\n\n\n\nCode. Create a new section in your script called # PREPARE DATA, then use mutate() and isoweek() to create a new column in your dataframe called week_admission that contains the ISO week associated with every admission date. The head of date_admission and week_admission columns should look like this:\n\n\n\n\n\n  date_admission week_admission\n1     2022-08-18             33\n2     2022-08-19             33\n3     2022-08-18             33\n4     2022-08-23             34\n5     2022-08-31             35\n6     2022-09-02             35\n\n\nNow we need to aggregate the total number of cases that were observed each week; because we are using linelist data, the number of cases is simply the number of rows.\n\n\n\n\n\n\nCode. Using count(), create a new dataframe called df_cases that summarizes the total number of cases observed each week. The head of this data frame should look like this:\n\n\n\n\n\n  week_admission  n\n1              1 32\n2              2 34\n3              3 41\n4              4 49\n5              5 58\n6              6 86\n\n\nGreat! Now we are ready to make our epicurve. In the following steps, you’ll be asked to use df_cases to plot a classic epicurve of the number of weekly admissions. To demonstrate the functions you’ll be using, I will plot the curve of the number of weekly outcomes as an example. To do that, I’ve build myself another dataframe, df_outcome, which looks like this:\n\nhead(df_outcome)\n\n  week_outcome patients\n1            1       30\n2            2       32\n3            3       28\n4            4       37\n5            5       58\n6            6       75\n\n\nSet up a Canvas: Initialize a Plot\nThe first step is creating your canvas by specifying your dataset and the names of the columns you’d like to visualize. This is done using ggplot(aes(...)) with the following syntax:\n\n# PSEUDO CODE -- DO NOT RUN\ndf_data %&gt;%\n  ggplot(aes(x = x_axis_variable_name,\n             y = y_axis_variable_name))\n\nFor an epicurve of outcomes, I’d like to plot the ISO week (week_outcome) on the x-axis and the number of patients hospitalized (patients) on the y-axis. Let’s update our pseudo-code to do that:\n\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients))\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nJust like with dplyr, we write our column names without quotation marks. This is unsurprising as ggplot2, like dplyr, is a member of the tidyverse and therefore uses similar syntax.\n\n\nFabulous, take a look at that big beautiful box of potential. This is our empty canvas. In RStudio this plot should show up in the panel on the bottom right of the screen.\n\n\nThe plot pannel in RStudio IDE\n\n\n\n\n\n\n\nWhat does aes stands for?\n\n\n\nNow, you may be wondering what is this aes() function that we’ve nested inside of ggplot()? The short answer is that aes() creates an AESthetic mapping that tells ggplot2 which columns of our data should be represented by which visual elements of our plot (like the axes, for example).\nAesthetic mappings create a map that defines how data elements (variables) are to be represented by visual elements (like axes, colors, and sizes). For example, here we are mapping the ISO week number to the x-axis and the number of patients to the y-axis. We could also imagine, for example, an epicurve where bars are colored based on whether patients lived or died. This would be an example where the variable outcome is being mapped to the visual element of color.\nFor now it is enough to know that aes() is the place where you will define your x-and y-axis.\n\n\n\n\n\n\n\n\nCode. Create a new section in your script called # PLOT EPICURVE. Then create an empty canvas for your epicurve using df_cases.\n\n\n\nAt this point, your plot should look like this:\n\n\n\n\n\n\n\n\nExcellent! Now let’s add some bars.\nPlot the Bars\nNow that we have our canvas, it’s time to add some shapes. In ggplot2, the shapes plotted on a figure are called geometries.4 Geometries are the primary visual representation of your data and should feel pretty familiar. A few common types of geometries include:\n4 You’ll notice in the below examples that the function for all geometries starts with geom_. This is designed to improve human readability and indeed all geometries in ggplot2 start this way for consistency\n\nBar Plots (geom_col() or geom_bar())\nHistograms (geom_hist())\nScatterplots (geom_point())\nLine Plots (geom_line())\nBoxplots (geom_boxplot())\n\nToday, we’re doing epicurves so we are most interested in learning how to make a bar plot. In our case, we will be using geom_col().5 Remember that adding a new layer (in this case a geometry) to our ggplot is as simple as using a +, so we can add bars to the epicurve of hospitalized cases in the following way:\n5 The exact difference between geom_bar() and geom_col() is a bit beyond our scope. But, in essence, whereas geom_col() is designed to work with pre-aggregated data, geom_bar() will do some degree of aggregation on its own.\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col()\n\n\n\n\n\n\n\nBrilliant! That sure looks like an epicurve to me. Though it does look a bit…grey. If we’d like to update the color of our bars (called the fill), we simply need to add the fill = argument to geom_col().6\n6 Fills and border colors in ggplot2 can be specified in several ways. Here we have used a hex code, which allows us to give a unique code for specific colors. In a pinch, however, you can also specify simple colors by name. For example, arguments like \"blue\" or \"green\" would also be accepted (see a list of R named colors).Let’s give it a try:\n\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col(fill = \"#2E4573\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode. Update your epicurve plot to add bars with the color #E4573.\n\n\n\nYour plot should now look like this:\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_col()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn the ggplot2 framework, layers must be added to an existing canvas. This means that running geom_col() by itself will not produce any visual output. This, however, makes sense. Continuing with our analogy of ggplots being like paintings, running geom_col() by itself would be like having paint with no canvas to put it on.\n\n\nLooking good. Now it’s time to make our plot just a bit more informative and just a bit more attractive by adding labels and a nicer theme.\nAdd Some Labels\nA good plot needs some good labeling; n is hardly an informative axis title. Fortunately, ggplot2 makes adding labels easy with the function labs(). This function will accept a variety of arguments allowing you to add a variety of label/title elements to your plot, for example:\n\nAxis Titles (x = and y =)\nPlot Title (title =)\n\nCaption (caption =)\n\nAs for other layers, we can include a label layer by adding labs() to our current plot with the + sign:\n\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"ISO Week\",\n       y = \"Outcomes\",\n       title = \"Measles outcomes in Moissala\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode. Update your epicurve plot to add some reasonable axis labels and a nice title.\nExtra Credit! Try adding a data source using caption =.\n\n\n\nYour plot might now look like (for example):\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_col()`).\n\n\n\n\n\n\n\n\nAdd a Theme\nIf we wanted to, we could stop here if our goal is to produce an informal plot. Ideally, however, it would be nice to use a somewhat more attractive theme and to increase the text size. To do this, we will add one last layer to our plot: a theme layer. Much like how geometries in ggplot2 all start with geom_, all themes start with theme_. There are several themes available to you and you can check out what they look like on the {ggplot2} website.\nToday, we will use theme_classic(), which offers a simple but elegant output:\n\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"ISO Week\",\n       y = \"Outcomes\",\n       title = 'Measles outcomes in Moissala') +\n  theme_classic()\n\n\n\n\n\n\n\nOk, nice. But we’d also like to increase the size of that tiny font. To do that we can adjust the base_size = argument:7\n7 The base size of a plot is a baseline font size that is used to calculate the size of all text elements in a plot. If it is increased, the font size of all elements will be increased proportionally.\ndf_outcome %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"ISO Week\",\n       y = \"Outcomes\",\n       title = 'Measles outcomes in Moissala') +\n  theme_classic(base_size = 20)\n\n\n\n\n\n\n\nThat looks better! Keep in mind that the font size needed will depend on what the plot is going to be used for (i.e.: a presentation, an informal review, or a final report). Similarly, the exact theme you will want to use is ultimately a subjective choice. While there are guidelines, data visualization is as much an art as a science.\n\n\n\n\n\n\nCode. Add one final layer to your plot that adds a theme of your choice with an appropriate base_size =.\n\n\n\nSave your plot\nIf you would like to save your epicurve, you can click on the “Export” button in the plot panel of RStudio:\n\n\nSave plot button in the RStudio plot pannel"
  },
  {
    "objectID": "sessions_core/ggplot.html#facetting-this-plot-by-age-group-or-site",
    "href": "sessions_core/ggplot.html#facetting-this-plot-by-age-group-or-site",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Facetting: This Plot By Age Group or Site",
    "text": "Facetting: This Plot By Age Group or Site\nNow, this plot is cool, but in you sitrep you want to show the data by age group, or by site. There are several ways to do that.\n\nThe intuitive way, which you already have the skill to do, is to copy and reuse the graph code, passing different, filtered dataframes to the ggplot() command\nUse a for loop or apply or map family functions: these are ways to automatize actions that involve less copy and pasting\nTrust ggplot2 to have a solution\n\nThe first option is tedious and it is easy to make errors; the second option can be quite powerfull and I hope that at some point you will learn some of these tools, but it is out of the scope of this tutorial. We will focus on the third option, which is powerfull and sufficient for many contexts.\nThe function facet_wrap() allow you to replicate a graph based on the categories of a variable. For example, you could make the outcome graph by sex, or by site. As other layers of a ggplot graph, you add it to your existing graph with a +. It will create a a figure with multiple small graphs, that ggplot2 calls facets or small multiples.\nGet the Data Ready\nIf we want to to plot anything by site, the site variable must be present in the aggregated datadata. Our current summarised dataset is only summarised by week though:\n\nhead(df_outcome)\n\n  week_outcome patients\n1            1       30\n2            2       32\n3            3       28\n4            4       37\n5            5       58\n6            6       75\n\n\nLet’s create a new summarized dataset that has the number of outcomes by week and by site!\n\n# Summarise the data\ndf_outcome_site &lt;- df_linelist %&gt;%\n  mutate(week_outcome = isoweek(date_outcome)) %&gt;%\n  count(week_outcome, site,\n        name = 'patients') %&gt;%\n  tidyr::drop_na(week_outcome)\n\n# Inspect the first line\nhead(df_outcome_site)\n\n  week_outcome               site patients\n1            1    Bedaya Hospital        3\n2            1  Bekourou Hospital        7\n3            1     Bouna Hospital        8\n4            1 Danamadji Hospital        5\n5            1  Moïssala Hospital        7\n6            2    Bedaya Hospital        2\n\n\nAdd the Facet Layer to the Plot\nNow, let’s plot this data. Look at the code bellow: it is exactly the same as before but for the last line, which creates the facets:\n\ndf_outcome_site %&gt;%\n  ggplot(aes(x = week_outcome,\n             y = patients)) +\n  geom_col(fill = \"#2E4573\") +\n  labs(x = \"ISO Week\",\n       y = \"Outcomes\",\n       title = 'Measles outcomes in Moissala') +\n  theme_classic(base_size = 15) +\n  \n  facet_wrap(vars(site))   # Make the plot by site!\n\n\n\n\n\n\n\nIsn’t that incredible? As you can see, the function facer_wrap() takes as argument a variable name wrapped in the vars() function.\n\n\n\n\n\n\nNow is your turn, you will draw a plot of the number of admissions by age group:\nCode. Prepare a new aggregated dataframe, summarized by week and age. Then, draw the epicurve by age group (still keeping all the plots improvement: labels, themes etc.)\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTo go further Check out the function help page to learn how to control the number of facets by row with nrow =, or column with ncol =, and how to control the maximum values of the axes with scales =.\nTo go even further Check out their examples in detail: one of them show how to adapt your code to do this:\n\n\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_col()`)."
  },
  {
    "objectID": "sessions_core/ggplot.html#done",
    "href": "sessions_core/ggplot.html#done",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Done!",
    "text": "Done!\nVery well done team! You have build your first epicurve!"
  },
  {
    "objectID": "sessions_core/ggplot.html#resources",
    "href": "sessions_core/ggplot.html#resources",
    "title": "Introduction to data visualization with ggplot2",
    "section": "Resources",
    "text": "Resources\nA full book on using ggplot2"
  },
  {
    "objectID": "pathway.html",
    "href": "pathway.html",
    "title": "Pathway",
    "section": "",
    "text": "These sessions can be followed in order to get a baseline level in R. The series assumes no prior experience in R and is suitable for beginners.\nLooking for more? Want more flexibility? Consider browsing the full session catalog.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Core Session\n\n\n\n\n\nJust an example\n\n\n\n\n\nNov 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to data visualization with ggplot2\n\n\n\n\n\nLearn the basics of buidling plots with ggplot2, and create your first epicurve.\n\n\n\n\n\nDec 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nImport data\n\n\n\n\n\nStarting your first project. Creating an Rstudio project, installing packages and importing data\n\n\n\n\n\nDec 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to R\n\n\n\n\n\nYour first steps in R. Learn your way around Rstudio, and meet some common R objects\n\n\n\n\n\nNov 26, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "explore.html",
    "href": "explore.html",
    "title": "Explore",
    "section": "",
    "text": "Choose your own adventure by browsing all available sessions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDynamic aesthetics\n\n\n\nSatellite\n\n\nGraphs\n\n\nggplot2\n\n\n\nAssign aesthetics elements of a graph to a variable\n\n\n\n\n\n\nDec 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEpicurves with dates in x axis\n\n\n\nSatellite\n\n\nGraphs\n\n\nggplot2\n\n\nepicurve\n\n\ndates\n\n\nscales\n\n\n\nDisplay dates rather than epiweeks numbers on your epicurves\n\n\n\n\n\n\nDec 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Core Session\n\n\n\nCore\n\n\nExample\n\n\n\nJust an example\n\n\n\n\n\n\nNov 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Satellite Session\n\n\n\nSatellite\n\n\nExample\n\n\nFor fun\n\n\n\nJust an example\n\n\n\n\n\n\nNov 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImport data\n\n\n\nCore\n\n\nRStudio projects\n\n\nPackages\n\n\nImport data\n\n\n\nStarting your first project. Creating an Rstudio project, installing packages and importing data\n\n\n\n\n\n\nDec 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImport multiple files and sheets\n\n\n\nSatellite\n\n\nImport data\n\n\nMultiple files\n\n\nlist.files\n\n\n\nLearn how to import multiple sheets from an Excel file, or several Excel files.\n\n\n\n\n\n\nDec 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndexing\n\n\n\nSatellite\n\n\nR basics\n\n\nVectors\n\n\nDataframes\n\n\nLists\n\n\n\nA more complete introduction to indexing in base R\n\n\n\n\n\n\nNov 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to R\n\n\n\nCore\n\n\nRstudio interface\n\n\nR basics\n\n\nData types\n\n\n\nYour first steps in R. Learn your way around Rstudio, and meet some common R objects\n\n\n\n\n\n\nNov 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to data visualization with ggplot2\n\n\n\nCore\n\n\nGraphs\n\n\nggplot2\n\n\nepicurve\n\n\n\nLearn the basics of buidling plots with ggplot2, and create your first epicurve.\n\n\n\n\n\n\nDec 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLists\n\n\n\nSatellite\n\n\nR basics\n\n\nData types\n\n\nLists\n\n\n\nLearn about the basic about R lists.\n\n\n\n\n\n\nNov 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModify scales in ggplot\n\n\n\nSatellite\n\n\nGraphs\n\n\nggplot2\n\n\nscales\n\n\n\nChange the labels of axis, or the colours of a guide.\n\n\n\n\n\n\nDec 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSession Title\n\n\n\nCore/Satellite\n\n\nCategory 1\n\n\nCategory 2\n\n\n\nShort description (appears on cards in pathway / explore pages)\n\n\n\n\n\n\nNov 20, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site…coming soon."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Repicentre",
    "section": "",
    "text": "work in progress… check back later."
  },
  {
    "objectID": "sessions_core/example.html",
    "href": "sessions_core/example.html",
    "title": "Example Core Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin –&gt;\n\n1 example footnote\nHi! I’m a side note!\n\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_core/example.html#text-formatting",
    "href": "sessions_core/example.html#text-formatting",
    "title": "Example Core Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin –&gt;\n\n1 example footnote\nHi! I’m a side note!\n\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_core/example.html#code",
    "href": "sessions_core/example.html#code",
    "title": "Example Core Session",
    "section": "Code",
    "text": "Code\nInline coding will turn out like this\nCode blocks will appear like this:\n\nprint('hello world')\n\nWarning: For these tutorials, code blocks are not evaluated by default. If you want to evaluate them, you must indicate it specifically.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nAdditionally, solution code blocks are not included by default, including them is done by setting the solutions parameter (in the YAML) to TRUE when rendering.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nNote, this website has code linking activated, so you can click on functions to get their documentation."
  },
  {
    "objectID": "sessions_core/example.html#callouts",
    "href": "sessions_core/example.html#callouts",
    "title": "Example Core Session",
    "section": "Callouts",
    "text": "Callouts\nThings are a bit quick and dirty at the moment. Ultimately I will make nice new classes in a full repicentre theme that can be used for exercised etc. For the moment we will just frankenstine some existing callouts.\n\n\n\n\n\n\nNote\n\n\n\nThis is a callout using {.callout-note}\n\n\n\n\n\n\n\n\nLook. This callout can be used for “observation activities” (ie: look at this thing in the console). Eventually it will be more beautiful, just make sure you use this class.\nWARNING. For the moment this class looks just like the “code activities” class, please make sure you use the right one.\n\n\n\n\n\n\n\n\n\nCode. This callout can be used for “code activities”. Eventually it will be more beautiful, just make sure you use this class.\nWARNING. For the moment this class looks just like the “observation activities” class, please make sure you use the right one."
  },
  {
    "objectID": "sessions_core/example.html#tabsets",
    "href": "sessions_core/example.html#tabsets",
    "title": "Example Core Session",
    "section": "Tabsets",
    "text": "Tabsets\n\n\nOne\nTwo\nThree\n\n\n\nContent that will show under the first tab\n\n\nContent that will show under the second tab\n\n\nContent that will show under the third tab"
  },
  {
    "objectID": "sessions_core/example.html#images",
    "href": "sessions_core/example.html#images",
    "title": "Example Core Session",
    "section": "Images",
    "text": "Images\nYou can insert images by referring to their relative path using markdown syntax or HTML. Note that the markdown syntax does not allow you to modify image size. In either case, make sure to add alt text for accessibility.\nMarkdown style syntax:\n\n\nexample image alt text\n\nHTML style syntax (with specification of desired size):"
  },
  {
    "objectID": "sessions_core/import_data.html",
    "href": "sessions_core/import_data.html",
    "title": "Import data",
    "section": "",
    "text": "Set up organized and well documented code\nCreate an RStudio Project\nInstall and load packages\nWrite robust file paths\nImport and inspect data\n\nThe principles you learned in the Data Management module will apply here as well: we should do our best to ensure that our projects won’t just work today but can also be reused and shared in the future. While doing this is not always easy, there are several best practices that can help us, and one of the most important is to start with a good, organized code base."
  },
  {
    "objectID": "sessions_core/import_data.html#objectives",
    "href": "sessions_core/import_data.html#objectives",
    "title": "Import data",
    "section": "",
    "text": "Set up organized and well documented code\nCreate an RStudio Project\nInstall and load packages\nWrite robust file paths\nImport and inspect data\n\nThe principles you learned in the Data Management module will apply here as well: we should do our best to ensure that our projects won’t just work today but can also be reused and shared in the future. While doing this is not always easy, there are several best practices that can help us, and one of the most important is to start with a good, organized code base."
  },
  {
    "objectID": "sessions_core/import_data.html#seting-up-your-project",
    "href": "sessions_core/import_data.html#seting-up-your-project",
    "title": "Import data",
    "section": "Seting up your Project",
    "text": "Seting up your Project\nFolder Structure\n\n\n\n\n\n\nDo. If not done already, download the course folder and save it to a location that is not connected to OneDrive.\n\n\n\nOneDrive doesn’t play well with R as it will attempt to constantly synchronize certain project files in a way that can cause errors or memory problems.This folder gives an example of a typical (and highly recommended) structure for your code projects:\n\n📁 data\n\n📁 clean\n📁 raw\n\n\n📁 R\n📁 Rmd\n📁 outputs\nREADME\n\nThis folder will be you working directory for all the sessions of this course. You will create an Rstudio project (explanations below) in it, and save all your scripts in /R. The course datasets are already in data/raw. Additionaly, there are a couple of resources (pdfs and links to online books) in the /resources subfolder.\nDefinitions\nTo better understand the concepts from the rest, you need to understand the two following concepts:\nWorking directory. The working directory is the location (folder) where your R session is actively working. If you save a file, for example, it will be saved into this folder by default. Similarly, when you want to open a file, this folder will be shown by default. All relative paths (which will be explained in Section 5.1) will be relative to this working directory.1\n1 By default, R usually picks the “Documents” folder as the working directory on Windows machines.Root. The root refers to the top-most folder level of the working directory. If your course folder was called FETCHR, the root would then be directly inside it (as opposed to being inside one of its subfolders like R or Data).\nRStudio Projects\nAn RStudio Project can be used to make your life easier and help orient RStudio around the various files used in your code.2\n2 Technically an RStudio Project is just a file containing some metadata that tell RStudio what files to open and where to set your working directory. It will spare you the headache of managing the working directory yourself.As a quick reminder, your interface should look something like this:\n\n\n\n\n\nFigure 1: Screenshot of a typical Rstudio interface\n\n\n\n\n\n\n\n\nCode. Open RStudio and create a new project by clicking File &gt; New Project &gt; Existing Directory &gt; Browse, navigating into (opening) the course folder, and clicking Create Project.\n\n\n\n\n\n\n\n\n\nLook. In the Windows Explorer, look at the course folder. You should now see a new file with the extention .Rproj that has a small blue icon with an R in it.\nDon’t see? If you don’t see this file, it’s probably because it is hidden by default on your computer. To change this setting in Windows Explorer, go into the View menu and select Filename Extensions.\n\n\n\n\n\nIcon associated with RStudio projects\n\nWhen you open an RStudio Project, RStudio will start a new R session, open the associated project files, and set your working directory to the root of the course folder. At this time, RStudio will also display the subfolders of this directory in the panel on the bottom right.\n\n\n\n\n\n\nBest Practice. It is strongly recommended to set up a separate RStudio Project for each of your analyses to ensure that your project files remain orgnaized and managable.\n\n\n\nThere are several ways to open an RStudio Project, including:\n\nUsing the RStudio menu File &gt; Open Project and then selecting the relevant .Rproj file\nClicking on the Project: (none) button on the top right of the RStudio interface (see Figure 1)\nNavigating in the folder explorer to the analysis folder and double clicking on the file with the .Rproj extension\nRStudio Options\nBefore continuing, let’s update some of RStudio’s problematic default settings:\n\n\n\n\n\n\nCode. Open the globabl options (Tools &gt; Global Options) and open the tab General (left menu). Make sure that none of the boxes in the sections R Sessions, Workspace, or History are checked.\n\n\n\n\n\nScreenshot of the Rstudio options\n\nWhen checked, these options cause RStudio to save the objects in your environment and reload them as well as any files you previously had open when you open a new R session. While these default may seem like a good idea, it is better (especially as a beginner) to always start your work from a fresh, empty R session to avoid bugs.\n\n\n\n\n\n\nImportant\n\n\n\nRemember that any commands or outputs that is needed for the cleaning and analysis should be saved explicitly in a script, in the correct, functional order."
  },
  {
    "objectID": "sessions_core/import_data.html#creating-a-new-script",
    "href": "sessions_core/import_data.html#creating-a-new-script",
    "title": "Import data",
    "section": "Creating a New Script",
    "text": "Creating a New Script\n\n\n\n\n\n\nDo Open a new script and save it in the R folder of your project under the name import_data.R.\nCode. Add some metadata to the top as seen in the first session using comments. Be sure to include:\n\nTitle\nAuthor\nCreation Date\nDescription\n\n\n\n\nNow you’re ready to start coding!"
  },
  {
    "objectID": "sessions_core/import_data.html#sec-packages",
    "href": "sessions_core/import_data.html#sec-packages",
    "title": "Import data",
    "section": "Packages",
    "text": "Packages\nPackages are collections of functions that extend the functionality of R. You’ll use them a lot, both in this course and in your daily life. Fortunately, as an open source language, R packages can be downloaded and installed for free from the internet.\nInstallation\nWe can install a new package using the function install.packages(), which downloads and installs it into the package library on your computer.\n\ninstall.packages(\"here\") # install the {here} package\n\n\n\n\n\n\n\nWarning\n\n\n\nDon’t forget to wrap the package name in quotation marks when using install.packages(). What happens if you don’t do this?\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo avoid any potential internet connectivity issues during the training, we already had you install most of the course packages (including the one in the example below).\nIf you have not installed the packages used in the course yet, you will have to manually do it each time you encounter a new package.\n\n\nUsage\nOnce a package is installed you can use it by “going to get it from your library” using the function library(). This process is called loading the package.\n\nlibrary(here) # load the {here} package\n\n\n\n\n\n\n\nCode. Use the library() function to load the packages here and rio, which will be used in Section 5.2.\n\n\n\nBased on your computer’s set up and the package you are trying to load, you may get a warning message3 noting that some functions have been masked or that the current version of the package was built for a different version of R. These messages are not usually a problem but are still important to note.\n3 Unlike error messages, warnings will not cause R to stop an ongoing command. They are used to signal potential but not severe issues and do not always need to be fixed.\n\n\n\n\n\nCode. Try to run the following code. Can you work out what the error means?\n\n\n\n\nlibrary(ggplot)\n\nThe above code throws an error because you have asked for a library that doesn’t exist. Remember that R is fickle and case sensitive and many of your errors will come from small typos in the names of functions or objects. Here, for example, we wanted to load the package ggplot2 but wrote ggplot instead.\n\n\n\n\n\n\nBest Practice. Most of the time, you’ll need to load a number of packages for your script and it is recommended to have a section at the start of your code that loads everything you’ll need in one place:\n\n# Packages ----------------------------\nlibrary(tidyverse)   # data manipulation\nlibrary(lubridate)   # date manipulation\n\nThis practice makes it easy to tell which packages need to be installed to run a script.\n\n\n\n\n\n\n\n\n\nCode. Use comments to create a “Packages” section to your script.\n\n\n\nUpdating Packages\nR has a very active community of developers and it’s pretty common for packages to be updated from time to time as their owners add in new functions and fix existing bugs. In order to update the packages in your library, you can go into the Packages tab of the bottom right panel and click Update. Don’t forget that you’ll need to be connected to the internet during this process.\n\n\n\n\n\n\nWarning\n\n\n\nSometimes packages are updated in a way that might remove or change a function that you used in some of your scripts, causing your code to no longer work. Don’t panic if this happens: it is always possible to go back and install an older version of a package if you need to. Details on how to do this are beyond the scope of this class, however, and we do note that the best practice is always to adapt your code rather than forcibly install an old version of a package."
  },
  {
    "objectID": "sessions_core/import_data.html#data-importation",
    "href": "sessions_core/import_data.html#data-importation",
    "title": "Import data",
    "section": "Data Importation",
    "text": "Data Importation\nFinding your files: Understanding File Paths\nTo open a file in R you need to provide a file path. A file path is simply a longer name for a file, that includes not only its name but also its location on your computer. There are several ways of defining these path, including absolute, relative, and absolute.\nAbsolute Paths\nAbsolute paths are specific to your computer and create a file path that goes all the way up to the level of your harddrive. For example, an absolute path may look something like this: D:/OneDrive - MSF/Documents/MATHILDE/1_MONITORING/CHOLERA/data/raw/exemple_linelist.xlsx. Clearly, this path will only work on one computer.\nThe use of hardcoded absolute paths is strongly discouraged as they would all need to be changed any time your code is shared or the project folder is moved; if not, the code would no longer run properly.\nRelative Paths\nRelative paths are defined relative to your current working directory (Section 2.2). For example, keeping in mind that our handy .Rproj file will set our working directory to the root of our project folder; we could create a relative path that looked like data/raw/exemple_linelist.xlsx. This means that as long as we maintain the internal structure of our project folder and have an .Rproj file our code would theoretically run on multiple computers.\n\n\n\n\n\n\nNote\n\n\n\nForeshadowing. File paths actually work a bit differently in RMarkdown files than they do in R scripts, but this is something we will talk about much later in the course. If you don’t know what RMarkdown is at the moment, don’t worry about it.\n\n\nRobust Paths\nWhile using a combination of relative paths and an RStudio project has fixed a lot of our problems, there are still a couple remaining issues. One is that different operating systems interpret characters like /, \\, and // differently, meaning the file paths described above (whether relative or absolute) may not work across multiple systems. Fortunately, we have a few options.\nThe first is to use the base R function file.path(), which will accept a set of the relevant parts (folders) in your desired path and combine them into a file path using the syntax of your local operating system, whichever it is:\n\nfile.path(\"data\", \"raw\", \"exemple_linelist.xlsx\")\n\n[1] \"data/raw/exemple_linelist.xlsx\"\n\n\nNote that the path is relative, here to the current working directory\nWhile file.path() works fine, the function here() (from the package of here) works even better. One of the other outstanding problems with our relative path solution is that if ever we change our working directory during an R session the relative paths from our scripts will no longer be correct. here() accepts a set of names in the same style as file.path() but will then use them to dynamically construct an absolute path adapted to your operating system and based on the location of your .Rproj file. In this course we strongly encourage you to use here() whenever you need to create a file path.\n\nlibrary(here)\nhere(\"data\", \"raw\", \"exemple_linelist.xlsx\")\n\n[1] \"D:/MATHILDE_UNPLUGGED/5_OTHER/repicentre/data/raw/exemple_linelist.xlsx\"\n\n\n\n\n\n\n\n\nCode. Run the above code in the console. What file path does here(\"data\", \"raw\") give you?\n\n\n\nWe will often want to source multiple data files in a single project. To make that process easier, it can be helpful to create a variable with the path to your raw (or clean) data.\n\n\n\n\n\n\nCode. Create a new section in your code called File Paths\nCode. Add the code to create an object called path_data_raw that contains the path to your raw data folder using the function here().\n\n\n\nWe can now pass our new variable path_data_raw back into here() in order to create a full path to a specific data file.\n\n\n\n\n\n\nCode. Using here() and path_data_raw, create a complete filepath for the file msf_linelist_moissala_2023-09-24.xlsx.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nhere() simply creates a file path stored in a string, it doesn’t actually check if a file exists on your computer. What is more, any typos in the file or folder names will result in an error. If you would like to use a function to check if a file exists, check out file.exists() function.\n\n\nImport function\nIn R different file formats are often imported using different, often specialized, functions. This can be tedious as it requires you to memorize and load a large number of functions just to get your data imported. To avoid this problem, we recommend that you use the import() function from the package rio. This function is able to open a large variety of of files (including Excel, csv, Stata, and many others) by recognizing the file extension of your data and calling a relevant specialized function from another package so that you don’t have to..This type of function, providing an unified interface to other specific functions is known as a wrapper\nTo see the full list of all the file types you can load (and save!) with rio, check out their website and in particular the list of supported formats. In the rest of the lesson we will focus on importing data from Excel .xlsx files and .csv text files.\n\n\n\n\n\n\nNote\n\n\n\nBecause import() is actually just calling other functions in the background, it is possible that it will need different arguments depending on the type of file you want to load.\n\n\nImporting .xlsx files\nFrom the First Sheet\nIn general, the usage of import() is pretty simple:\n\nimport(file = here(path_data_raw, \"exemple_linelist.xlsx\"))\n\nNotice that we have nested the command here() inside the import() command. Nesting functions is absolutely allowed in R and is something you will do all the time. When functions are nested, R will evaluate them in the order of the innermost function (in this case here()) to the outermost (in this case import()). In this way, the output of here() is being used as the input of import().\n\n\n\n\n\n\nCode. Import the file msf_linelist_moissala_2023-09-24.xlsx that is in your raw data subfolder into R using here() and import().\n\n\n\nIf your import worked correctly, R will print the data into the console but not save it into the environment because we have not assigned them to an object.\n\n\n\n\n\n\nWarning\n\n\n\nYou may not want to have R print very large datasets into the console and assign them directly to an object.\n\n\n\n\n\n\n\n\nCode. Re-ipmort your data but this time save it to an object called df_linelist.\n\n\n\nFrom Any Sheet\nAs you just saw, R selects the first sheet by default. It is however possible to pass the number (or name) of a specific worksheet in your Excel data to import() using the argument which =:\n\nimport(file = here(path_data_raw, \"exemple_linelist.xlsx\"),\n       which = 2)\n\n\n\n\n\n\n\nNote\n\n\n\nThe which = argument is specific to the file types that have multiple sheets, such as an Excel or .Rdata file. If you try to use it on a .csv file the argument will be ignored.\n\n\nImporting .csv files\nWe can import a .csv file in exactly the same way as an .xlsx file, we need only change the extension:\n\nimport(file = here(path_data_raw, \"exemple_linelist.csv\"))\n\n.csv files sometimes use different delimiters and decimal characters depending on where the file comes from. You can indicate to import() which characters to use for these using the sep = and dec = arguments respectively:\n\nimport(file = here(path_data_raw, \"exemple_linelist.csv\"),\n       sep = \";\",\n       dec = \",\")\n\n\n\n\n\n\n\nCode. Import the file msf_linelist_moissala_2023-09-24.csv from the raw data folder and store it in an object called df_linelist_csv."
  },
  {
    "objectID": "sessions_core/import_data.html#taking-a-look-at-your-data",
    "href": "sessions_core/import_data.html#taking-a-look-at-your-data",
    "title": "Import data",
    "section": "Taking a Look at your Data",
    "text": "Taking a Look at your Data\nWe have now imported a dataset into R and assigned it to a dataframe (df_linelist). The natural next step is to inspect this dataset, to check that the import went well, get to know it a bit better, and assess if it requires any cleaning before analysis.\nUseful Functions\nWe can start by taking a quick look at the first few lines of the dataframe using the function head(). This function takes a dataframe as its first argument and optionally accepts a second argument n = indicating the number of lines we would like to see.\n\nhead(df_linelist, n = 6)\n\nActually, the default value of n = is already 6, meaning our above code was equivalent to head(df_linelist).You can check the default value of an argument (if it exists) by checking the documentation of a function. We well show you how to do this in a later session, but you can read a bit here if you are dying to know.\n\n\n\n\n\n\nCode. Use head() to examine the first 12 lines of df_linelist.\n\n\n\nWe can also use the functions we learned in the introduction session to learn more about the shape of our dataframe and the type of data it contains.\n\n\n\n\n\n\nCode. Using dim() and names(), check the dimensions and column names of df_linelist. Do these results match what you see when you open the data in Excel?\n\n\n\n\n\n\n\n\n\nCode. Use str() to check the data type of each column. Does anything look odd? Remember that you can also use functions like is.character() and is.numeric() if you’d like to test the type of a particular column.\n\n\n\nThe Environment\nWe can also check out our data by looking at the Environment tab of the top-right panel. Here, we can see our dataframe in the environment and look at its structure.\n\n\n\n\n\n\nCode. Click on the round blue button next to df_linelist in your environment to see its structure.\n\n\n\nThe Viewer\n\n\n\n\n\n\nCode. Click on the name of your dataframe in the Environment tab. This should open the dataset in a new tab in the same corner as your script (top left).\n\n\n\nThe Viewer displays dataframes as tables and is a convenient way to quickly look at your data. You can even sort and filter your data in the Viewer, though be aware that these actions will not make any changes to the actual object df_linelist. The Viewer can also be opened by using the function View().\n\n\n\n\n\n\nCode. Open df_linelist in the viewer using the function View().\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe overwhelming majority of buttons in RStudio are actually just convenient shortcuts for R functions that are run in the background, as we have now seen in the case of View() and str().\n\n\nData Summaries\nThe function summary() accepts a dataframe and is a handy way to get some quick statistics on each of the columns in a dataset:\n\nsummary(iris)\n\n\n\n\n\n\n\nCode. Use summary() to inspect the minimum and maximum values for each column in df_linelist. Do you notice anything odd?\n\n\n\nMake notes of types of data that you think is not correct and of values to check later, it will save you time in the next session."
  },
  {
    "objectID": "sessions_core/import_data.html#done",
    "href": "sessions_core/import_data.html#done",
    "title": "Import data",
    "section": "Done !",
    "text": "Done !\nDon’t forget to save your code!\nIf you want to learn about importing several sheets in one go, or several similar files from a folder, go to the satellite on multiple imports."
  },
  {
    "objectID": "sessions_core/import_data.html#resources",
    "href": "sessions_core/import_data.html#resources",
    "title": "Import data",
    "section": "Resources",
    "text": "Resources\n\nThe rio package website\nMore examples on importing data of various file types"
  },
  {
    "objectID": "sessions_core/template.html",
    "href": "sessions_core/template.html",
    "title": "Session Title",
    "section": "",
    "text": "Objective 1\nObjective 2"
  },
  {
    "objectID": "sessions_core/template.html#objectives",
    "href": "sessions_core/template.html#objectives",
    "title": "Session Title",
    "section": "",
    "text": "Objective 1\nObjective 2"
  },
  {
    "objectID": "sessions_core/template.html#setup",
    "href": "sessions_core/template.html#setup",
    "title": "Session Title",
    "section": "Setup",
    "text": "Setup\n\n\n\n\n\n\nSETUP. Description of setup for the tutorial (what packages to use, what to name the file, etc.)."
  },
  {
    "objectID": "sessions_core/template.html#main-section",
    "href": "sessions_core/template.html#main-section",
    "title": "Session Title",
    "section": "Main Section",
    "text": "Main Section\nLorem ipsum…\n\nprint('some example code')\n\n\n\n\n\n\n\nNote\n\n\n\nNote about something of interest, like a best practice or helpful hint.\n\n\n\n\n\n\n\n\nLook. Description of something participants should observe.\n\n\n\n…lorem ispum again !\n\n\n\n\n\n\nCode. Description of something participants should code themselves.\n\n\n\nDon’t forget to include a solution"
  },
  {
    "objectID": "sessions_extra/example.html",
    "href": "sessions_extra/example.html",
    "title": "Example Satellite Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin –&gt;\n\n1 example footnote\nHi! I’m a side note!\n\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_extra/example.html#text-formatting",
    "href": "sessions_extra/example.html#text-formatting",
    "title": "Example Satellite Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin –&gt;\n\n1 example footnote\nHi! I’m a side note!\n\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_extra/example.html#code",
    "href": "sessions_extra/example.html#code",
    "title": "Example Satellite Session",
    "section": "Code",
    "text": "Code\nInline coding will turn out like this\nCode blocks will appear like this:\n\nprint('hello world')\n\nWarning: For these tutorials, code blocks are not evaluated by default. If you want to evaluate them, you must indicate it specifically.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nAdditionally, solution code blocks are not included by default, including them is done by setting the solutions parameter (in the YAML) to TRUE when rendering.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nNote, this website has code linking activated, so you can click on functions to get their documentation."
  },
  {
    "objectID": "sessions_extra/example.html#callouts",
    "href": "sessions_extra/example.html#callouts",
    "title": "Example Satellite Session",
    "section": "Callouts",
    "text": "Callouts\nThings are a bit quick and dirty at the moment. Ultimately I will make nice new classes in a full repicentre theme that can be used for exercised etc. For the moment we will just frankenstine some existing callouts.\n\n\n\n\n\n\nNote\n\n\n\nThis is a callout using {.callout-note}\n\n\n\n\n\n\n\n\nLook. This callout can be used for “observation activities” (ie: look at this thing in the console). Eventually it will be more beautiful, just make sure you use this class.\nWARNING. For the moment this class looks just like the “code activities” class, please make sure you use the right one.\n\n\n\n\n\n\n\n\n\nCode. This callout can be used for “code activities”. Eventually it will be more beautiful, just make sure you use this class.\nWARNING. For the moment this class looks just like the “observation activities” class, please make sure you use the right one."
  },
  {
    "objectID": "sessions_extra/example.html#tabsets",
    "href": "sessions_extra/example.html#tabsets",
    "title": "Example Satellite Session",
    "section": "Tabsets",
    "text": "Tabsets\n\n\nOne\nTwo\nThree\n\n\n\nContent that will show under the first tab\n\n\nContent that will show under the second tab\n\n\nContent that will show under the third tab"
  },
  {
    "objectID": "sessions_extra/example.html#images",
    "href": "sessions_extra/example.html#images",
    "title": "Example Satellite Session",
    "section": "Images",
    "text": "Images\nYou can insert images by referring to their relative path using markdown syntax or HTML. Note that the markdown syntax does not allow you to modify image size. In either case, make sure to add alt text for accessibility.\nMarkdown style syntax:\n\n\nexample image alt text\n\nHTML style syntax (with specification of desired size):"
  }
]