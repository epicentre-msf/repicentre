[
  {
    "objectID": "sessions_core/example.html",
    "href": "sessions_core/example.html",
    "title": "Example Core Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin ‚Äì&gt;\n\n\n\nHi! I‚Äôm a side note!\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_core/example.html#text-formatting",
    "href": "sessions_core/example.html#text-formatting",
    "title": "Example Core Session",
    "section": "",
    "text": "Italic and Bold will turn out like this\nBlock quotes will look like this:\n\n\nThis is a blockquote made using &gt;\n\n\nTooltips can be done using a classic html style: example\nIf relevant, you might also want to use a footnote1 instead of a tooltip.\nContent can also go in the margin ‚Äì&gt;\n\n\n\nHi! I‚Äôm a side note!\n\nFinally, you can fold entire sections:\n\nSurprise !"
  },
  {
    "objectID": "sessions_core/example.html#code",
    "href": "sessions_core/example.html#code",
    "title": "Example Core Session",
    "section": "Code",
    "text": "Code\nInline coding will turn out like this\nCode blocks will appear like this:\n\nprint('hello world')\n\nWarning: For these tutorials, code blocks are not evaluated by default. If you want to evaluate them, you must indicate it specifically.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nAdditionally, solution code blocks are not included by default, including them is done by setting the solutions parameter (in the YAML) to TRUE when rendering.\n\nprint('hello back!')\n\n[1] \"hello back!\"\n\n\nNote, this website has code linking activated, so you can click on functions to get their documentation."
  },
  {
    "objectID": "sessions_core/example.html#callouts",
    "href": "sessions_core/example.html#callouts",
    "title": "Example Core Session",
    "section": "Callouts",
    "text": "Callouts\nThings are a bit quick and dirty at the moment. Ultimately I will make nice new classes in a full repicentre theme that can be used for exercised etc. For the moment we will just frankenstine some existing callouts.\nIMPORTANT: please do not use callouts not explicitly defined here; they have not been included in the css theme and therefore will not render well in the final document. If you think that there is another callout outside these three options that should be included, please submit an issue.\n\n\n\n\n\n\nNote\n\n\n\nThis is a callout using {.callout-note}\n\n\n\n\n\n\n\n\nTip\n\n\n\nComment about a genral tip / trick or best practice.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWarning / comment on something really important."
  },
  {
    "objectID": "sessions_core/example.html#action-boxes",
    "href": "sessions_core/example.html#action-boxes",
    "title": "Example Core Session",
    "section": "Action Boxes",
    "text": "Action Boxes\nThese are used for things participants are expected to actually do, ie: exercises. They are split into three categories.\n\nDescription of something participants need to setup, primarily used at the beginning of a section but can also be used for tasks like setting up an Rproject file, folder structure, etc.\n\n\nDescription of something participants should observe, investigate, etc.\n\n\nDescription of a coding exercise that participants are expected to complete."
  },
  {
    "objectID": "sessions_core/example.html#tabsets",
    "href": "sessions_core/example.html#tabsets",
    "title": "Example Core Session",
    "section": "Tabsets",
    "text": "Tabsets\n\n\nOne\nTwo\nThree\n\n\n\nContent that will show under the first tab\n\n\nContent that will show under the second tab\n\n\nContent that will show under the third tab"
  },
  {
    "objectID": "sessions_core/example.html#images",
    "href": "sessions_core/example.html#images",
    "title": "Example Core Session",
    "section": "Images",
    "text": "Images\nYou can insert images by referring to their relative path using markdown syntax or HTML. Note that the markdown syntax does not allow you to modify image size. In either case, make sure to add alt text for accessibility.\nMarkdown style syntax:\n\n\nexample image alt text\n\nHTML style syntax (with specification of desired size):"
  },
  {
    "objectID": "sessions_core/example.html#linking-to-other-pages",
    "href": "sessions_core/example.html#linking-to-other-pages",
    "title": "Example Core Session",
    "section": "Linking to Other Pages",
    "text": "Linking to Other Pages\nEasy, use relative paths within a standard href, ie: link to template or link to satilite example."
  },
  {
    "objectID": "sessions_core/example.html#footnotes",
    "href": "sessions_core/example.html#footnotes",
    "title": "Example Core Session",
    "section": "Footnotes",
    "text": "Footnotes\n\nexample footnote‚Ü©Ô∏é"
  },
  {
    "objectID": "sessions_core/02_import_data.html",
    "href": "sessions_core/02_import_data.html",
    "title": "Import data",
    "section": "",
    "text": "Create a RStudio Project\nSet up an organized and well documented code\nInstall and load packages\nWrite robust file paths\nImport and inspect data\n\n\n\n\n\n\n\nImportant\n\n\n\nThe principles you learned in the Data Management module will apply here as well: we should do our best to ensure that our projects won‚Äôt just work today but can also be reused and shared in the future. While doing this is not always easy, there are several best practices that can help us, and one of the most important is to start with a good, organized code base."
  },
  {
    "objectID": "sessions_core/02_import_data.html#objectives",
    "href": "sessions_core/02_import_data.html#objectives",
    "title": "Import data",
    "section": "",
    "text": "Create a RStudio Project\nSet up an organized and well documented code\nInstall and load packages\nWrite robust file paths\nImport and inspect data\n\n\n\n\n\n\n\nImportant\n\n\n\nThe principles you learned in the Data Management module will apply here as well: we should do our best to ensure that our projects won‚Äôt just work today but can also be reused and shared in the future. While doing this is not always easy, there are several best practices that can help us, and one of the most important is to start with a good, organized code base."
  },
  {
    "objectID": "sessions_core/02_import_data.html#setting-up-your-project",
    "href": "sessions_core/02_import_data.html#setting-up-your-project",
    "title": "Import data",
    "section": "Setting up your Project",
    "text": "Setting up your Project\nFolder Structure\n\nIf not done already, download the course folder and save it to a location that is not connected to OneDrive.\n\nOneDrive doesn‚Äôt play well with R as it will attempt to constantly synchronize certain project files in a way that can cause errors or memory problems.\nThis folder gives an example of a typical (and highly recommended) structure for your code projects:\n\nüìÅ data\n\nüìÅ clean\nüìÅ raw\n\n\nüìÅ R\nüìÅ Rmd\nüìÅ outputs\nREADME\n\nThis folder will be you working directory for all the sessions of this course. You will create an Rstudio project (explanations below) in it, and save all your scripts in /R. The course datasets are already in data/raw. Additionaly, there are a couple of resources (pdfs and links to online books) in the /resources subfolder.\nDefinitions\nTo better understand the concepts from the rest, you need to understand the two following concepts:\nWorking directory. The working directory is the location (folder) where your R session is actively working. If you save a file, for example, it will be saved into this folder by default. Similarly, when you want to open a file, this folder will be shown by default. All relative paths (which will be explained in Section¬†5.1) will be relative to this working directory.\nRoot. The root refers to the top-most folder level of the working directory. If your course folder was called FETCHR, the root would then be directly inside it (as opposed to being inside one of its subfolders like R or Data).\nRStudio Projects\nAn RStudio Project can be used to make your life easier and help orient RStudio around the various files used in your code.\nAs a quick reminder, your interface should look something like this:\n\n\n\n\n\nFigure¬†1: Screenshot of a typical Rstudio interface\n\n\n\nOpen RStudio and create a new project by clicking File &gt; New Project &gt; Existing Directory &gt; Browse, navigating into (opening) the course folder, and clicking Create Project.\n\n\nIn the Windows Explorer, look at the course folder. You should now see a new file with the extention .Rproj that has a small blue icon with an R in it.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you don‚Äôt see this file, it‚Äôs probably because it is hidden by default on your computer. To change this setting in Windows Explorer, go into the View menu and select Filename Extensions.\n\n\n\n\nIcon associated with RStudio projects\n\nWhen you open an RStudio Project, RStudio will start a new R session, open the associated project files, and set your working directory to the root of the course folder. At this time, RStudio will also display the subfolders of this directory in the panel on the bottom right.\n\n\n\n\n\n\nTip\n\n\n\nIt is strongly recommended to set up a separate RStudio Project for each of your analyses to ensure that your project files remain orgnaized and managable.\n\n\nThere are several ways to open an RStudio Project, including:\n\nUsing the RStudio menu File &gt; Open Project and then selecting the relevant .Rproj file\nClicking on the Project: (none) button on the top right of the RStudio interface (see Figure¬†1)\nNavigating in the folder explorer to the analysis folder and double clicking on the file with the .Rproj extension\nRStudio Options\nBefore continuing, let‚Äôs update some of RStudio‚Äôs problematic default settings:\n\nOpen the globabl options (Tools &gt; Global Options) and open the tab General (left menu). Make sure that none of the boxes in the sections R Sessions, Workspace, or History are checked.\n\n\n\nScreenshot of the Rstudio options\n\nWhen checked, these options cause RStudio to save the objects in your environment and reload them as well as any files you previously had open when you open a new R session. While these default may seem like a good idea, it is better (especially as a beginner) to always start your work from a fresh, empty R session to avoid bugs.\n\n\n\n\n\n\nImportant\n\n\n\nRemember that any commands or outputs that is needed for the cleaning and analysis should be saved explicitly in a script, in the correct, functional order."
  },
  {
    "objectID": "sessions_core/02_import_data.html#creating-a-new-script",
    "href": "sessions_core/02_import_data.html#creating-a-new-script",
    "title": "Import data",
    "section": "Creating a New Script",
    "text": "Creating a New Script\n\nOpen a new script and save it in the R folder of your project under the name import_data.R.\nAdd some metadata to the top as seen in the first session using comments. Be sure to include:\n\nTitle\nAuthor\nCreation Date\nDescription\n\n\nNow you‚Äôre ready to start coding!"
  },
  {
    "objectID": "sessions_core/02_import_data.html#sec-packages",
    "href": "sessions_core/02_import_data.html#sec-packages",
    "title": "Import data",
    "section": "Packages",
    "text": "Packages\nPackages are collections of functions that extend the functionality of R. You‚Äôll use them a lot, both in this course and in your daily life. Fortunately, as an open source language, R packages can be downloaded and installed for free from the internet.\n\n\n\n\n\n\nNote\n\n\n\nIn R, packages are referenced using {}. For example ggplot2 is the name of the ggplot2 package that contains new plotting functions such as ggplot(), geom_point() etc‚Ä¶\n\n\nInstallation\nWe can install a new package using the function install.packages(), which downloads and installs it into the package library on your computer. This is done once per computer.\n\ninstall.packages(\"here\") # install the {here} package\n\n\n\n\n\n\n\nImportant\n\n\n\nDon‚Äôt forget to wrap the package name in quotation marks when using install.packages(). What happens if you don‚Äôt do this?\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo avoid any potential internet connectivity issues during the training, we already had you install most of the course packages (including the one in the example below).\nIf you have not installed the packages used in the course yet, you will have to manually do it each time you encounter a new package.\n\n\nUsage\nOnce a package is installed we can use it but we have to specify to R that we will be using it every single session. This process is called loading the package and is achieved using the function library().\n\nlibrary(here) # load the \"here\" package\n\n\nUse the library() function to load the packages here and rio, which will be used in Section¬†5.2.\n\n\n\n\n\n\n\nNote\n\n\n\nBased on your computer‚Äôs set up and the package you are trying to load, you may get a warning message noting that some functions have been masked or that the current version of the package was built for a different version of R. These messages are not usually a problem but are still important to note.\n\n\n\nTry to run the following code. Can you work out what the error means?\n\n\nlibrary(ggplot)\n\nThe above code throws an error because you have asked for a library that doesn‚Äôt exist. Remember that R is fickle and case sensitive and many of your errors will come from small typos in the names of functions or objects. Here, for example, we wanted to load the package ggplot2 but wrote ggplot instead.\n\n\n\n\n\n\nNote\n\n\n\nMost of the time, you‚Äôll need to load a number of packages for your script and it is recommended to have a section at the start of your code that loads everything you‚Äôll need in one place:\n\n# Packages ----------------------------\nlibrary(tidyverse)   # data manipulation\nlibrary(lubridate)   # date manipulation\n\nThis practice makes it easy to tell which packages need to be installed to run a script.\n\n\n\nUse comments to create a ‚ÄúPackages‚Äù section to your script.\n\nUpdating Packages\nR has a very active community of developers and it‚Äôs pretty common for packages to be updated from time to time as their owners add in new functions and fix existing bugs. In order to update the packages in your library, you can go into the Packages tab of the bottom right panel and click Update. Don‚Äôt forget that you‚Äôll need to be connected to the internet during this process.\n\n\n\n\n\n\nImportant\n\n\n\nSometimes packages are updated in a way that might remove or change a function that you used in some of your scripts, causing your code to no longer work. Don‚Äôt panic if this happens: it is always possible to go back and install an older version of a package if you need to. Details on how to do this are beyond the scope of this class, however, and we do note that the best practice is always to adapt your code rather than forcibly install an old version of a package."
  },
  {
    "objectID": "sessions_core/02_import_data.html#data-importation",
    "href": "sessions_core/02_import_data.html#data-importation",
    "title": "Import data",
    "section": "Data Importation",
    "text": "Data Importation\nUnderstanding File Paths\nTo open a file in R you need to provide a file path. A file path is simply a longer name for a file, that includes not only its name but also its location on your computer. There are several ways of defining these path, including absolute and relative paths.\nAbsolute Paths\nAbsolute paths are specific to your computer and create a file path that goes all the way up to the level of your harddrive. For example, an absolute path may look something like this: D:/OneDrive - MSF/Documents/MATHILDE/1_MONITORING/CHOLERA/data/raw/exemple_linelist.xlsx. Clearly, this path will only work on one computer.\nThe use of absolute paths is strongly discouraged as they would need to be changed every time your code is shared or the project folder is moved; if not, the code would no longer run properly.\nRelative Paths\nRelative paths are defined relative to your current working directory (Section¬†2.2). For example, keeping in mind that our handy .Rproj file will set our working directory to the root of our project folder; we could create a relative path that looked like data/raw/exemple_linelist.xlsx. This means that as long as we maintain the internal structure of our project folder and have an .Rproj file our code would theoretically run on multiple computers.\n\n\n\n\n\n\nNote\n\n\n\nForeshadowing. File paths actually work a bit differently in Rmarkdown files than they do in R scripts, but this is something we will talk about much later in the course. If you don‚Äôt know what RMarkdown is at the moment, don‚Äôt worry about it.\n\n\nRobust Paths\nWhile using a combination of relative paths and an RStudio project has fixed a lot of our problems, there are still a couple remaining issues. One is that different operating systems interpret characters like /, \\, and // differently, meaning the file paths described above (whether relative or absolute) may not work across multiple systems. Fortunately, we have a few options.\nThe first is to use the base R function file.path(), which will accept a set of the relevant parts (folders) in your desired path and combine them into a file path using the syntax of your local operating system, whichever it is:\n\nfile.path(\"data\", \"raw\", \"exemple_linelist.xlsx\")\n\n[1] \"data/raw/exemple_linelist.xlsx\"\n\n\nNote that the path is relative, here to the current working directory\nWhile file.path() works fine, the function here() (from the package here) works even better. One of the other outstanding problems with our relative path solution is that if ever we change our working directory during an R session the relative paths from our scripts will no longer be correct. here accepts a set of names in the same style as file.path() but will then use them to dynamically construct an absolute path adapted to your operating system and based on the location of your .Rproj file. In this course we strongly encourage you to use here() whenever you need to create a file path.\n\nlibrary(here)\nhere(\"data\", \"raw\", \"exemple_linelist.xlsx\")\n\n[1] \"/Users/hugzsoubrier/GitHub/repicentre/data/raw/exemple_linelist.xlsx\"\n\n\n\nRun the above code in the console. What file path does here(\"data\", \"raw\") give you?\n\nWe will often want to source multiple data files in a single project. To make that process easier, it can be helpful to create a variable with the path to your raw (or clean) data.\n\nCreate a new section in your code called File Paths\nAdd the code to create an object called path_data_raw that contains the path to your raw data folder using the function here().\n\nWe can now pass our new variable path_data_raw back into here() in order to create a full path to a specific data file.\n\nUsing here() and path_data_raw, create a complete filepath for the file msf_linelist_moissala_2023-09-24.xlsx.\n\n\n\n\n\n\n\nNote\n\n\n\nhere() simply creates a file path stored in a string, it doesn‚Äôt actually check if a file exists on your computer. What is more, any typos in the file or folder names will result in an error. If you would like to use a function to check if a file exists, check out file.exists() function.\n\n\nImport function\nIn R different file formats are often imported using different, often specialized, functions. This can be tedious as it requires you to memorize and load a large number of functions just to get your data imported. To avoid this problem, we recommend that you use the import() function from the package rio. This function is able to open a large variety of files (including Excel, csv, Stata, and many others) by recognizing the file extension of your data and calling a relevant specialized function from another package so that you don‚Äôt have to. .This type of function, providing an unified interface to other specific functions is known as a wrapper\n\n\n\n\n\n\nTip\n\n\n\nTo see the full list of all the file types you can load (and save!) with rio, check out their website and in particular the list of supported formats. In the rest of the lesson we will focus on importing data from Excel .xlsx files and .csv text files.\n\n\n\n\n\n\n\n\nNote\n\n\n\nBecause import() is actually just calling other functions in the background, it is possible that it will need different arguments depending on the type of file you want to load.\n\n\nImporting .xlsx files\nFrom the First Sheet\nIn general, the usage of import() is pretty simple:\n\nimport(file = here(path_data_raw, \"exemple_linelist.xlsx\"))\n\nNotice that we have nested the command here() inside the import() command. Nesting functions is absolutely allowed in R and is something you will do all the time. When functions are nested, R will evaluate them in the order of the innermost function (in this case here()) to the outermost (in this case import()). In this way, the output of here() is being used as the input of import().\n\nImport the file msf_linelist_moissala_2023-09-24.xlsx that is in your raw data subfolder into R using here() and import().\n\nIf your import worked correctly, R will print the data into the console but not save it into the environment because we have not assigned them to an object.\n\n\n\n\n\n\nTip\n\n\n\nYou may not want to have R print very large datasets into the console and assign them directly to an object.\n\n\n\nRe-ipmort your data but this time save it to an object called df_linelist.\n\nFrom Any Sheet\nAs you just saw, R selects the first sheet by default. It is however possible to pass the number (or name) of a specific worksheet in your Excel data to import() using the argument which:\n\nimport(file = here(path_data_raw, \"exemple_linelist.xlsx\"),\n       which = 2)\n\n\n\n\n\n\n\nNote\n\n\n\nThe which argument is specific to the file types that have multiple sheets, such as an Excel or .Rdata file. If you try to use it on a .csv file the argument will be ignored.\n\n\nImporting .csv files\nWe can import a .csv file in exactly the same way as an .xlsx file, we need only change the extension:\n\nimport(file = here(path_data_raw, \"exemple_linelist.csv\"))\n\n.csv files sometimes use different delimiters and decimal characters depending on where the file comes from. You can indicate to import() which characters to use for these using the sep and dec arguments respectively:\n\nimport(file = here(path_data_raw, \"exemple_linelist.csv\"),\n       sep = \";\",\n       dec = \",\")\n\n\nImport the file msf_linelist_moissala_2023-09-24.csv from the raw data folder and store it in an object called df_linelist_csv."
  },
  {
    "objectID": "sessions_core/02_import_data.html#taking-a-look-at-your-data",
    "href": "sessions_core/02_import_data.html#taking-a-look-at-your-data",
    "title": "Import data",
    "section": "Taking a Look at your Data",
    "text": "Taking a Look at your Data\nWe have now imported a dataset into R and assigned it to a dataframe (df_linelist). The natural next step is to inspect this dataset, to check that the import went well, get to know it a bit better, and assess if it requires any cleaning before analysis.\nUseful Functions\nWe can start by taking a quick look at the first few lines of the dataframe using the function head(). This function takes a dataframe as its first argument and optionally accepts a second argument n indicating the number of lines we would like to see.\n\nhead(df_linelist, n = 6)\n\nActually, the default value of n is already 6, meaning our above code was equivalent to head(df_linelist).You can check the default value of an argument (if it exists) by checking the documentation of a function. We well show you how to do this in a later session, but you can read a bit here if you are dying to know.\n\nUse head() to examine the first 12 lines of df_linelist.\n\nWe can also use the functions we learned in the introduction session to learn more about the shape of our dataframe and the type of data it contains.\n\nUsing dim() and names(), check the dimensions and column names of df_linelist. Do these results match what you see when you open the data in Excel?\n\n\nUse str() to check the data type of each column. Does anything look odd? Remember that you can also use functions like is.character() and is.numeric() if you‚Äôd like to test the type of a particular column.\n\nThe Environment\nWe can also check out our data by looking at the Environment tab of the top-right panel. Here, we can see our dataframe in the environment and look at its structure.\n\nClick on the round blue button next to df_linelist in your environment to see its structure.\n\nThe Viewer\n\nClick on the name of your dataframe in the Environment tab. This should open the dataset in a new tab in the same corner as your script (top left).\n\nThe Viewer displays dataframes as tables and is a convenient way to quickly look at your data. You can even sort and filter your data in the Viewer, though be aware that these actions will not make any changes to the actual object df_linelist. The Viewer can also be opened by using the function View().\n\nOpen df_linelist in the viewer using the function View().\n\n\n\n\n\n\n\nNote\n\n\n\nThe overwhelming majority of buttons in RStudio are actually just convenient shortcuts for R functions that are run in the background, as we have now seen in the case of View() and str().\n\n\nData Summaries\nThe function summary accepts a dataframe and is a handy way to get some quick statistics on each of the columns in a dataset:\n\nsummary(iris)\n\n\nUse summary() to inspect the minimum and maximum values for each column in df_linelist. Do you notice anything odd?\n\nMake notes of types of data that you think is not correct and of values to check later, it will save you time in the next session."
  },
  {
    "objectID": "sessions_core/02_import_data.html#done",
    "href": "sessions_core/02_import_data.html#done",
    "title": "Import data",
    "section": "Done !",
    "text": "Done !\nDon‚Äôt forget to save your code!\nIf you want to learn about importing several sheets in one go, or several similar files from a folder, go to the satellite on multiple imports."
  },
  {
    "objectID": "sessions_core/02_import_data.html#resources",
    "href": "sessions_core/02_import_data.html#resources",
    "title": "Import data",
    "section": "Resources",
    "text": "Resources\n\nThe rio website\nMore examples on importing data of various file types"
  },
  {
    "objectID": "explore.html",
    "href": "explore.html",
    "title": "Explore",
    "section": "",
    "text": "Choose your own adventure by browsing all available sessions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Core Session\n\n\n\nCore\n\n\nExample\n\n\n\nJust an example\n\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample Satellite Session\n\n\n\nSatellite\n\n\nExample\n\n\nFor fun\n\n\n\nJust an example\n\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImport data\n\n\n\nCore\n\n\nRStudio projects\n\n\nPackages\n\n\nImport data\n\n\n\nCreating a Rstudio project, installing packages and importing data\n\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSession Title\n\n\n\nCore/Satellite\n\n\nCategory 1\n\n\nCategory 2\n\n\n\nShort description (appears on cards in pathway / explore pages)\n\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pathway.html",
    "href": "pathway.html",
    "title": "Pathway",
    "section": "",
    "text": "These sessions can be followed in order to get a baseline level in R. The series assumes no prior experience in R and is suitable for beginners.\nLooking for more? Want more flexibility? Consider browsing the full session catalog.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImport data\n\n\n\n\n\nCreating a Rstudio project, installing packages and importing data\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nExample Core Session\n\n\n\n\n\nJust an example\n\n\n\n\n\nDec 19, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Repicentre",
    "section": "",
    "text": "work in progress‚Ä¶ check back later."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site‚Ä¶coming soon."
  },
  {
    "objectID": "sessions_extra/example.html",
    "href": "sessions_extra/example.html",
    "title": "Example Satellite Session",
    "section": "",
    "text": "There is nothing specific to show here, please refer to the example or template in the core session categories instead."
  },
  {
    "objectID": "sessions_core/template.html",
    "href": "sessions_core/template.html",
    "title": "Session Title",
    "section": "",
    "text": "Objective 1\nObjective 2"
  },
  {
    "objectID": "sessions_core/template.html#objectives",
    "href": "sessions_core/template.html#objectives",
    "title": "Session Title",
    "section": "",
    "text": "Objective 1\nObjective 2"
  },
  {
    "objectID": "sessions_core/template.html#setup",
    "href": "sessions_core/template.html#setup",
    "title": "Session Title",
    "section": "Setup",
    "text": "Setup\n\nDescription of something participants need to setup, primarily used at the beginning of a section but can also be used for tasks like setting up an Rproject file, folder structure, etc."
  },
  {
    "objectID": "sessions_core/template.html#main-section",
    "href": "sessions_core/template.html#main-section",
    "title": "Session Title",
    "section": "Main Section",
    "text": "Main Section\nLorem ipsum‚Ä¶\n\nprint('some example code')\n\nHere are the validated callouts that you can use, please do not use any callouts not defined here. If you think there is an important callout that is missing, please submit an issue.\n\n\n\n\n\n\nNote\n\n\n\nNote about something of interest, like helpful hint or a relevant warning.\n\n\n\n\n\n\n\n\nTip\n\n\n\nComment about a genral tip / trick or best practice.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWarning / comment on something really important.\n\n\n\nDescription of something participants should observe, investigate, etc.\n\n‚Ä¶lorem ispum again !\n\nDescription of a coding exercise that participants are expected to complete.\n\nDon‚Äôt forget to include a solution"
  }
]