---
title: Courbes √©pid√©miques hebdomadaires
description: Apprenez √† tracer des courbes √©pid√©miques hebdomadaires et √† am√©liorer les √©tiquettes des axes
date: last-modified
image: ../sessions_extra/img/epicurve-dates-000-logo.png
categories:
  - Satellite
  - Visualization
  - Dates
---

```{r setup}
#| include: false
#| eval: true
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)

library(here)        
library(rio)         
library(tidyverse)     
library(scales)     


# The data
df_linelist <- rio::import(here::here("data", "clean",
                                      "moissala_linelist_clean_FR.rds")) |> 
  mutate(
    
    # Week ISO numbers
    sem_symptomes_num = isoweek(date_debut),    # Their code
    sem_sortie_num    = isoweek(date_sortie),   # Examples
    
    # First DATE of the week
    sem_symptomes_lundi = floor_date(date_debut,       # Their code
                                     unit = "week",
                                     week_start = 1),
    
    sem_sortie_lundi = floor_date(date_sortie,    # Examples
                                  unit = "week",
                                  week_start = 1)
  )

```


## Objectifs


Dans la session [principale sur les grapiques](../sessions_core/06_epicurves.qmd), vous avez appris √† tracer une courbe √©pid√©mique du nombre de cas journaliers :

```{r}
#| echo: false
#| eval: true
#| fig-width: 8

df_linelist |>
  count(date_debut) |>
  ggplot(aes(x = date_debut,
             y = n)) +
  geom_col(fill = '#2E4573') +
  labs(x = "Date de d√©but des symptomes",
       y = "Patients",
       title = "Cas de rougeole dans la r√©gion de mandoul (Tchad)",
       caption = "Donn√©es fictives") +
  theme_classic(base_size = 16) 
```


Ici les donn√©es sont agr√©g√©es **par jour**, ce qui raisonnable si l'√©pid√©mie est de courte dur√©e ou si vous souhaitez zoomer sur une p√©riode sp√©cifique. Il nous arrivera n√©anmoins de souvent vouloir tracer des courbes **hebdomadaires**.

Dans cette tutoriel, nous apprendrons √† agr√©ger les donn√©es par semaine, √† tracer le graphique et √† am√©liorer les √©tiquettes de l'axe des abscisses.

**Pr√©requis** : la session sur les [courbes √©pid√©miques](../sessions_core/06_epicurves.qmd).


## Mise en place

::: {.setup}
Nous utiliserons la m√™me liste lin√©aire nettoy√©e que pr√©c√©demment et qui peut √™tre t√©l√©charg√©e ici :

```{r}
#| echo: false
#| eval: true

downloadthis::download_link(
  link = 'https://github.com/epicentre-msf/repicentre/raw/refs/heads/main/data/data/clean/moissala_linelist_clean_FR.rds',
  button_label = 'T√©l√©charger les donn√©es',
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```

<br>
Si ce n'est pas d√©j√† fait, enregistrez le jeu de donn√©es dans `data/clean` puis cr√©ez un nouveau script appel√© `courbe_hebdo.R` dans votre sous-dossier `R` (alternativement, vous pouvez rajouter une section au script sur les courbes √©pid√©miques journali√®res). 

<br> Si vous cr√©ez un nouveau script, ajoutez un en-t√™te appropri√© et chargez les paquets suivants : `{here}`, `{rio}`,  `{tidyverse}` et `{scales}`. Importez ensuite les donn√©es propres (`moissala_linelist_clean_FR.rds`) dans R et enregistrez-les dans un objet `df_linelist`.
:::

Au cours du tutoriel, les exemples porteront sur les sorties et *vous* tracerez la courbe √©pid√©mique √† partir de la date de d√©but des sympt√¥mes.

## Donn√©es hebdomadaires

Nous allons aborder deux fa√ßons d'agr√©ger les donn√©es par semaine. Le concept de la premi√®re vous sera sans doute familier (semaines identifi√©es par leur _num√©ros_), mais nous nous concentrerons sur une m√©thode plus robuste (semaine identifi√©es par la date du _premier jour de la semaine_).


### Num√©ros de semaine

La mani√®re la plus intuitive de d'agr√©ger par semaine est d'utiliser des num√©ros de semaines, car les donn√©es du MSP sont souvent dans ce format. Vous avez sans doute cr√©√© de nombreuses courbes √©pid√©miques dans ce format vous-m√™mes.

La fonction `isoweek()` du paquet `{lubridate}` accepte une date (ou un vecteur de dates) et renvoie le [num√©ro de semaine ISO]{.hovertip bs-toggle="tooltip" bs-title="Les semaines ISO sont un standard international concernant les dates, afin d'√©viter les diff√©rences entre pays sur le d√©but de la semaine et sur la fa√ßon de d√©finir la premi√®re semaine de l'ann√©e. Les semaines ISO commencent le lundi. Si vous travaillez avec le CDC am√©ricain, vous pouvez utiliser la fonction s≈ìur epiweek() qui commence le dimanche."}.


```{r}
#| eval: true
exemple_date <- as.Date('2025-02-24')

exemple_date

isoweek(exemple_date)
```

Nous pouvons utiliser cette fonction pour cr√©er une colonne `sem_sortie_num` dans nos donn√©es : 

```{r}
df_linelist <- df_linelist |> 
  mutate(sem_sortie_num = isoweek(date_sortie))
```

Le d√©but des colonnes `date_sortie` et `sem_sortie_num` ressemble √† ceci (sans les `NA`) : 

```{r}
#| eval: true

df_linelist |> 
  tidyr::drop_na(date_sortie) |> 
  select(date_sortie, sem_sortie_num) |> 
  head()
```


::: {.write}
A vous de jouer. Utilisez les fonctions `mutate()` et `isoweek()` pour cr√©er une nouvelle colonne dans votre data frame appel√©e `sem_symptomes_num` qui contient la semaine ISO associ√©e √† chaque *date de d√©but des sympt√¥mes*. L'en-t√™te des colonnes `date_debut` et `sem_symptomes_num` devrait ressembler √† ceci :

```{r}
#| echo: false
#| eval: true
df_linelist |>
  select(date_debut, sem_symptomes_num) |>
  head()
```
:::

Nous pourrions maintenant utiliser `count()` sur cette colonne pour agr√©ger les donn√©es par semaine, puis tracer le graphique avec `{ggplot2}` avec un code tr√®s similaire √† la [session principale](../sessions_core/06_epicurves.qmd).

Malheureusement il y a un probl√®me. Avec le num√©ro de semaine il y a une premi√®re semaine en 2022... mais aussi en 2023, 2024 etc. Dans le cas d'une √©pid√©mie courte qui n'aurait lieu qu'en 2022, cela ne poserait pas probl√®me. Cependant, notre data frame contient des donn√©es de la r√©gion enti√®re, et les dates s'√©tendent de 2022 √† 2023. Donc si nous comptions le nombre de patient par num√©ro de semaine, le tableau suivant serait erron√© : 

```{r}
#| eval: true
# FAUX
df_linelist |> 
  count(sem_symptomes_num) |> 
  head(10)
```

Pour r√©soudre le probl√®me nous pouvons stratifier par [ann√©e]{.hovertip bs-toggle='tooltip' bs-title="Notez l'utilisation de la fonction isoyear() du paquet {lubridate}. C'est la fonction s≈ìur de isoweek() et elle fait exactement ce que vous attendez : retourner l'ann√©e d'une date selon la norme ISO"} :


```{r}
#| eval: true

df_linelist |> 
  mutate(annee_symptomes = isoyear(date_debut)) |> 
  count(annee_symptomes, sem_symptomes_num) |> 
  head(10)
```

Ces chiffres sont d√©sormais corrects. Vous pourriez les repr√©senter avec  [plusieurs mini graphes par ann√©e sur une m√™me figure](../sessions_extra/faceting.qmd), ou simplement filtrer une ann√©e donn√©e et tracer la courbe avec les num√©ros de semaines sur l'axe des x. Dans le premier cas, cela donnerait ceci :

```{r}
#| eval: true

df_linelist |> 
  mutate(annee_symptomes = isoyear(date_debut)) |> 
  count(annee_symptomes, sem_symptomes_num) |> 
  ggplot(aes(x = sem_symptomes_num,
             y = n)) +
  geom_col(fill = "#2E4573") +
  theme_classic(base_size = 16) +
  facet_wrap(vars(annee_symptomes),  # Magie pour faire le graphe par ann√©e !
             ncol = 1)
```

Si vous n'avez pas lu le satellite sur `facet_wrap()`, ce n'est pas grave, voyez ce graphe comme une page de publicit√© pour la capacit√© de ggplot √† faire des graphes multiples rapidement. Les explications sortent du cadre de ce tutoriel et nous allons vous montrer une autre fa√ßon d'agr√©ger les donn√©es par semaine, qui est robuste aux donn√©es pluriannuelles.


### Premier jour de la semaine

Une autre mani√®re d'agr√©ger par semaine est d'utiliser la fonction `floor_date()` (√©galement du package `{lubridate}`), qui [renvoie la *premi√®re date*]{.hovertip bs-toggle='tooltip' bs-title="The floor √ßa veut dire le sol, l'√©tage en anglais, et les fonctions 'floor' arrondissent vers le bas"} d'une p√©riode donn√©e. Vous pouvez la consid√©rer comme une sorte d'[arrondi √† la plus petite valeur]{.hovertip bs-toggle='tooltip' bs-title="Comme on pouvait s'y attendre, il existe aussi une fonction ceiling_date() qui arrondit les dates √† la valeur la plus √©lev√©e d'une p√©riode"}, mais pour les dates.

La fonction a un argument `unit` pour choisir l'√©chelle de la p√©riode (semaine, mois...) et un argument `week_start` pour d√©finir le premier jour de la semaine (les lundis sont `1`).


```{r}
df_linelist <- df_linelist |> 
  mutate(
    sem_sortie_lundi = floor_date(date_sortie,
                                  unit = "week",
                                  week_start = 1)
  )
```

Regardons les diff√©rentes colonnes de plus pr√®s pour bien comprendre : 

```{r}
#| eval: true

df_linelist |> 
  select(date_sortie, sem_sortie_num, sem_sortie_lundi) |>
  arrange(date_sortie) |>     # Trie par date
  head(n = 10)
```

Pour aider √† comprendre on peut calculer le *jour* de la semaine associ√© √† chaque date en utilisant la fonction `wday()` (qui appartient *aussi* √† `{lubridate}`, y a comme un th√®me üòâ) [wday est une abr√©viation pour week day] :  

```{r}
#| eval: true
df_linelist |> 
  # Calcule le premier jour de la semaine
  mutate(
    jour_sortie = wday(date_sortie, 
                       label = TRUE, 
                       abbr = FALSE),
    cest_bien_un_lundi  = wday(sem_sortie_lundi, 
                               label = TRUE, 
                               abbr = FALSE)) |> 
  arrange(date_sortie) |>      # Trie par date
  select(date_sortie,
         jour_sortie,
         sem_sortie_num,
         sem_sortie_lundi,
         cest_bien_un_lundi) |> 
  head(n = 10)
```


Ceci illustre comment `sem_sortie_num` et `sem_sortie_lundi` sont deux fa√ßons de repr√©senter une semaine donn√©e. Mais si les num√©ros de semaine ne sont pas uniques, les dates, elles, le sont ! 

::: {.write}
Ajoutez une nouvelle instruction √† votre `mutate()` pour cr√©er la variable `sem_symptomes_lundi` qui contient le premier jour de la semaine pour la date d'apparition des sympt√¥mes. Le premier jour de la semaine est un lundi au Tchad.
:::

::: {.callout-tip}
Lisez la [page d'aide](https://lubridate.tidyverse.org/reference/round_date.html) de `floor_date()` pour conna√Ætre la liste des unit√©s possibles.
:::


### Agr√©ger

Maintenant que nous avons une variables qui identifie la semaine, nous pouvons enfin agr√©ger nos donn√©es !

::: {.write}
Comptez le nombre de patients par semaine de d√©but des sympt√¥mes, en utilisant le d√©but de la semaine pour identifier les semaines (`sem_symptomes_lundi`).


Voici les dix premi√®res lignes de ce √† quoi il devrait ressembler :

```{r}
#| eval: true
#| echo: false

df_linelist |> 
  count(sem_symptomes_lundi) |> 
  head(10)
```
:::



## Tracer le graphique

Parfait. Nous pouvons maintenant passer nos donn√©es agr√©g√©es √† la commande pour cr√©er le graphique, en faisant quelques ajustements pour que le code pr√©c√©dent fonctionne.

::: {.write}
Cr√©ez un `ggplot` avec le m√™me aspect que la courb√© √©pid√©mique de la [session principale](../sessions_core/06_epicurves.qmd#sec-epicurve-steps), mais avec le premier jour de la semaine sur l'axe des abscisses. N'oubliez pas de mettre √† jour les noms des axes !

Il devrait ressembler √† ceci : 
```{r}
#| eval: true
#| echo: false

df_linelist |> 
  count(sem_symptomes_lundi) |> 
  ggplot(aes(x = sem_symptomes_lundi,
             y = n)) +
  geom_col(fill = "#2E4573") +
  labs(x = "Semaine de d√©but des symptomes",
       y = "Patients",
       title = "Cas de rougeole dans la r√©gion de mandoul (Tchad)",
       caption = "Donn√©es fictives") +
  theme_classic(base_size = 15)
```
:::




Notez que m√™me si les √©tiquettes sur l'axe des abscisses sont des dates, une barre repr√©sente les donn√©es d'une semaine (sept jours √† compter du lundi).

## Am√©liorer l'axe

Il est maintenant temps d'am√©liorer cet axe des abscisses.

`{ggplot2}` cr√©e automatiquement des √©tiquettes pour l'axe des x, en essayant de s'adapter √† l'√©tendue des donn√©es. Ces valeurs par d√©faut ne nous conviennent pas toujours, et nous voulons pouvoir manuellement changer les √©tiquettes (plus fr√©quentes ou plus espac√©es, am√©liorer le format etc.).

Pour modifier l'apparence de l'axe, nous allons utiliser une fonction de la famille *scale* de `{ggplot2}`  : `scale_x_date()` [*scale* ici est l'√©chelle].


### Modifier la fr√©quence des tirets

Dans `{ggplot2}`, les **breaks** [*cassures*] contr√¥lent la *fr√©quence* des tirets sur l'axe.

La fonction `scale_x_date()` a un argument `date_breaks` qui accepte l'intervalle entre deux √©tiquettes dans une cha√Æne de caract√®res aux formats suivants : `"1 week"`, `"2 weeks"`, `"4 months"`, `"2 years"`, etc.

```{r}
#| eval: true

df_linelist |> 
  count(sem_sortie_lundi) |> 
  ggplot(aes(x = sem_sortie_lundi,
             y = n)) +
  geom_col(fill = "#2E4573") +
  labs(x = "Date de sortie",
       y = "Patients",
       title = "Sorties rougeole dans la r√©gion de Mandoul (Tchad)") +
  scale_x_date(date_breaks = "4 months") +  # D√©finit l'intervalle entre √©tiquettes
  theme_classic(base_size = 16)
```


::: {.write}
Modifiez votre code pour que la fr√©quence des tirets les rendent lisibles sur *votre* moniteur.
:::


### Am√©liorer les √©tiquettes

Maintenant que nous avons g√©r√© l'intervalle entre les tirets, nous pouvons modifier les *√©tiquettes* elles-m√™mes (la fa√ßon dont les dates sont affich√©es sur l'axe, *labels* en anglais). Par d√©faut, elles sont sous la forme *ann√©e-mois-jour*. Nous allons voir deux mani√®res de changer √ßa

::: {.panel-tabset .nav-pills}

#### Avec le paquet {scales}

La fonction `scale_x_date()` a un argument `label` qui accepte plusieurs types d'entr√©es, telles qu'un vecteur contenant les dates ou une fonction qui g√©n√®re des labels. Le paquet `{scales}` fournit une telle fonction, `label_date_short()`, qui tente de cr√©er des √©tiquettes de dates efficaces et courtes.


```{r}
#| eval: true

df_linelist |> 
  count(sem_sortie_lundi) |> 
  ggplot(aes(x = sem_sortie_lundi,
             y = n)) +
  geom_col(fill = "#2E4573") +
  labs(x = "Date de sortie",
       y = "Patients",
       title = "Sorties rougeole dans la r√©gion de Mandoul (Tchad)") +
  scale_x_date(date_breaks = "2 months",
               labels = scales::label_date_short()) + # Etiquettes courtes
  theme_classic(base_size = 15)
```

::: {.write}
Modifiez votre code et usez `label_date_short()` pour cr√©er des √©tiquettes courtes.
:::


#### Avec la syntaxe strptime

L'automatisation c'est sympa, mais si vous pr√©f√©rez avoir le contr√¥le total, R dispose d'une *syntaxe* pour d√©crire les formats de date et d'heure. Il existe une longue page d'aide (accessibles avec la commande `help(strptime)`) avec tous les √©l√©ments de syntaxe, mais voici un r√©sum√© des √©l√©ments les plus utiles pour d√©crire le format d'une date : 

**Num√©ro du jour** : 

- `%d`: de 01 √† 31
- `%e`: de 1 √† 31

**Mois** :

- `%b` : nom du mois, forme abr√©vi√©e (la langue d√©pend de la locale de votre ordinateur)
- `%B` : nom du mois, complet (la langue d√©pend de la locale de votre ordinateur)
- `%m` : Num√©ro du mois

**Ann√©e** :

- `%y` : ann√©e √† deux chiffres (sans le si√®cle)
- `%Y` : ann√©e √† quatre chiffres

**S√©parateurs sp√©ciaux** :

- `%n` : nouvelle ligne
- `%t` : tab

Vous pouvez assembler ces √©l√©ments dans une cha√Æne de caract√®res, que vous passez √† diff√©rentes fonctions qui acceptent un *format* comme argument. 

Nous allons d'abord utiliser la fonction `format()` pour voir rapidement l'affichage qu'elle cr√©e √† partir d'une syntaxe `strptime`, puis nous illustrerons l'usage dans un graphe.

```{r}
#| eval: true

# Cr√©e un vecteur de dates pour explorer des formats diff√©rents
quelques_dates <- as.Date(c("2024-10-06", "2024-12-15", "2025-01-20"))

# Exemples de syntaxes possibles
format(quelques_dates, "%Y-%b-%d")
format(quelques_dates, "%Y-%b")
format(quelques_dates, "%Y %B %d")
format(quelques_dates, "%y/%m/%d")
format(quelques_dates, "%d/%m/%Y")
```

Revenons √† notre graphe. La fonction `scale_x_date()` a un argument `date_labels` qui accepte une cha√Æne de caract√®re dans le format `strptime` pour formater les √©tiquettes de dates.

```{r}
#| eval: true

df_linelist |> 
  count(sem_sortie_lundi) |> 
  ggplot(aes(x = sem_sortie_lundi,
             y = n)) +
  geom_col(fill = "#2E4573") +
  labs(x = "Date de sortie",
       y = "Patients",
       title = "Sorties rougeole dans la r√©gion de Mandoul (Tchad)") +
  scale_x_date(
    date_breaks = "2 months",      # D√©finit l'intervalle entre √©tiquettes
    date_labels = "%Y%n%b%n%d") +  # Definit le format des √©tiquettes
  theme_classic(base_size = 16)
```


::: {.write}
Modifiez votre graphe pour que les √©tiquettes soient comme ceci :

```{r}
#| eval: true
#| echo: false

df_linelist |> 
  count(sem_symptomes_lundi) |> 
  ggplot(aes(x = sem_symptomes_lundi,
             y = n)) +
  geom_col(fill = "#2E4573") +
  labs(x ="Date of onset",
       y = "Measles cases",
       title = "Measles in Mandoul region (Chad)",
       caption = "Ficticious data") +
  scale_x_date(date_breaks = "2 months",
               date_labels = "%m/%d%n%y") +
  theme_classic(base_size = 15)
```
:::

:::


## C'est fini !

Bravo ! Les dates dans R sont un sujet compliqu√©, et leur format est souvent un peu effrayant. Nous esp√©rons que cette petite introduction vous aura donn√© quelques astuces pour que vos courbes √©pid√©miques soient lisibles.

```{r}
#| echo: false
#| eval: true

downloadthis::download_link(
  link = 'https://github.com/epicentre-msf/repicentre/blob/main/solutions/extra/weekly_epicurves_solutions.fr.R',
  button_label = 'Solutions exercices',
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```

### Aller plus loin

### Exercices suppl√©mentaires

- Utilisez ce format dans cotre graphe : "2024-oct.", "2024-dec." 
- Cr√©ez une courbe √©pid√©mique avec la date de consultation, avec le premier jour de la semaine sur l'axe des x (vous √™tes libres du format de la date).
- Cr√©ez une courbe √©pid√©mique pour l'ann√©e 2023 qui montre le nombre d'admissions hospitali√®res hebdomadaires, avec le num√©ro ISO de la semaine en abscisse.

### D√©fi

- Tracez une courbe √©pid√©mique de la date d'apparition des sympt√¥mes par **mois**. Utilisez un format d'√©tiquette qui vous semble appropri√© et lisible.


## Ressources

- [La page d'aide de lubridate](https://lubridate.tidyverse.org/articles/lubridate.html)/