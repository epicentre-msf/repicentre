---
title: Import multiple files and sheets
description: Learn how to import multiple similar sheets from an Excel file, or several Excel files from the same format.
date: last-modified
image: ../img/under_construction.svg
params: 
  solutions: FALSE
  sub_title: "**------ With Solutions ------**"
categories:
  - Satellite
  - Import data
---

```{r setup}
#| include: false
#| eval: true
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)

solutions <- params$solutions

# library(...)         # what does this library do?
```

![](../img/under_construction.svg)

## Importing Multiple Excel Sheets with `rio`

There is another function in `rio` called `import_list()` that imports all the sheets from a Excel file. The function imports all the sheets and store them into a [list](../sessions_extra/lists.qmd). It avoids you aving to write multiple `import()` commands for each separately.

```{r}
#| eval = FALSE
# returns a list of dataframes
import_list(here(path_data_raw, "example_linelist.xlsx")) 
```

As an added bonus, you can even tell R to bind all of these tables into a single dataframe (rowwise) by setting the argument `rbind` to `TRUE`:

```{r}
#| eval = FALSE
# returns a single dataframe:
import_list(here(path_data_raw, "example_linelist.xlsx"), 
            rbind = TRUE)
```


<!-- ## Importing multiple files -->

<!-- ### With `rio` -->
<!-- The `import_list()` function can also accept a vector of file names. In this case, it will import each of these files and store them into a [list](../sessions_extra/lists.qmd). It is a quick way to load a large number of files in a subfolder.  -->

<!-- ```{r} -->
<!-- #| eval = FALSE -->
<!-- # returns a list of dataframes -->
<!-- vector_paths <- c( -->
<!--   here(path_data_raw, "example_linelist_A.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_B.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_C.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_D.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_E.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_F.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_G.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_H.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_I.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_J.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_K.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_L.xlsx"), -->
<!--   here(path_data_raw, "example_linelist_M.xlsx") -->
<!-- ) -->

<!-- import_list(vector_paths) # return a list -->
<!-- ``` -->

<!-- If you are sure that these files have exactly th same structure, you may bind them -->


<!-- ```{r} -->
<!-- import_list(vector_paths, -->
<!--             rbind = TRUE, -->
<!--             rbind_label) -->
<!-- ``` -->


<!-- ```{r} -->
<!-- DT1 = data.table(A=1:3,B=letters[1:3]) -->
<!-- DT2 = data.table(A=4:5,C=letters[4:5]) -->
<!-- l = list(DT1,DT2) -->
<!-- rbindlist(l) -->

<!-- # bind correctly by names -->
<!-- DT1 = data.table(A=1:3,B=letters[1:3]) -->
<!-- DT2 = data.table(B=letters[4:5],A=4:5) -->
<!-- l = list(DT1,DT2) -->
<!-- rbindlist(l, use.names=TRUE, fill = TRUE) -->
<!-- ``` -->

