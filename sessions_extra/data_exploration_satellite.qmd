---
title: Data exploration
description: Explore your data after importation
date: last-modified
categories:
  - Satellite
  - Data exploration
---

```{r setup}
#| include: false
#| eval: true
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(here) # for filepaths
library(rio)  # import and export files
df_linelist <- import(file = here("data", "raw", "xlsx",
              "Moissalla-measles-linelist-EN.xlsx"))
```

## Objectives

- Perform quick exploration of an imported dataset
- Produce frequency tables for variables 

:::{.callout-important}

This extra session assumes that you have been [introduced to R and R studio](01_introduction.html), and [data importation](02_import_data.html). Please go over these sessions first if that is not the case. 
:::

## Setup 

::: {.setup}
For this session we will work with our raw moissala measles linelist which can be downloaded here: 

```{r}
#| echo: false
#| eval: true

downloadthis::download_link(
  link = 'https://github.com/epicentre-msf/repicentre/data/raw/moissala_linelist_EN.xlsx',
  button_label = ' Course Folder',
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```

Make sure it is appropriately stored in `data/raw` of your project. Then open a new script called `data-exploration.R`, and make sure packages `{here}`, `{rio}` and `{dplyr}` are loaded. Finally, import the data into R as an object called `df_linelist`. 
:::

## Data exploration - the concept 

Right after importing some data into R, it is good practice to perform some have a look at them. When talking of *data exploration* we usually try to answer a few questions about the data: 

- What are the dimensions of the data (ie: how many rows and how many columns ?)
- What are the columns names ? 
- Visualise the first or last few rows 
- Understand the class of the variables
- Understand the range of values in continuous variables
- Understand the possible values in each categorical variables. 

This process is crucial and will allow us to familiarise with our data and identify issues that will be adressed during the data cleaning step. 

```{r}
library(here)
library(rio)
library(dplyr)

# REMOVE when data are updated 
df_linelist <- episimdata::moissala_linelist_EN

```





# Frequency tables 
Now let's try to understand what are the possible values in our categorical variables. For this we can use frequency tables. This is handy as:

1. It allows us to quickly see the unique values in a categorical variable
2. The number of observations for each of those categories

This is done using `count()` from `{dplyr}`, which accepts the name of a column as an argument and will then count the **number of observations** of each unique element in that column. For example, let's see what are the possible values of the variable `sex`: 

```{r}
df_linelist |>
  count(sex)
```

The output is a new, smaller dataframe containing the number of patients observed stratified by `sex`. It seems like this variable requires some recoding. 

::: {.write}
Using your linelist data, look into the values for the `outcome` variable - what do you think of it ? 

Now, try adding the argument `sort = TRUE` to the `count()` function. What did this argument do?
:::