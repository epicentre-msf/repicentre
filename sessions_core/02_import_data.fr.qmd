---
title: Importer des donn√©es
description: Cr√©ez un projet Rstudio, installez les paquets utiles et importez des donn√©es pour travailler dans R.
date: last-modified
image: ../img/core/02_import/logo.svg
categories:
- Core
- RStudio
- Data Import
---

```{r setup}
#| include: false
#| eval: true
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)

library(here) # for file paths
library(rio)  # import and export files

df_linelist <- import(file = here("data", "raw",
              "moissala_linelist_FR.xlsx"))
```

## Objectifs

- Cr√©er un projet RStudio
- Mettre en place un code organis√© et bien document√©
- Installer et charger des paquets dans la session
- Ecrire des chemins d‚Äôacc√®s aux fichiers robustes
- Importer et inspecter des donn√©es dans R

:::{.callout-important}
Les principes vus dans le module FETCH sur la gestion des donn√©es s‚Äôappliquent aussi √† votre code : on souhaite √©crire un script qui fonctionne maintenant, mais √©galement dans le futur, et qui soit partageable. Il existe quelques bonnes pratiques qui peuvent nous aider √† aller dans cette direction, et la premi√®re est d‚Äôavoir un code source propre et bien organis√©.
:::

## Mise en place du projet

### Structure des dossiers {#folder-structure}

::: {.setup}
Si ce n'est pas d√©j√† fait, t√©l√©chargez le dossier du cours d√©compressez-le. Sauvegardez le dossier non compress√© √† un endroit [**non connect√© √† OneDrive**]{.hovertip bs-toggle='tooltip' bs-title="OneDrive ne fonctionne pas bien avec R car il va constamment synchroniser certains fichiers, ce qui peut entra√Æner des erreurs ou des probl√®mes de m√©moire"} et ouvrez-le.

```{r}
#| echo: false
#| eval: true

downloadthis::download_link(
  link = 'https://github.com/epicentre-msf/repicentre/raw/main/data/FETCHR.zip',
  button_label = ' Dossier du cours',
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```
:::

Ce dossier illustre une structure typique et recommand√©e pour vos projets de code :

- üìÅ data
  - üìÅ raw
  - üìÅ clean
- üìÅ R
- üìÅ outputs

Ce dossier sera votre r√©pertoire de travail pour toutes les sessions de ce cours. Vous y cr√©erez un projet RStudio (explications ci-dessous), et y enregistrerez tous vos scripts (sous dossier `R`). Les donn√©es brutes se trouvent d√©j√† dans `data/raw`.

### D√©finitions {#sec-definitions}

Voici deux concepts importants que nous allons rencontrer dans cette session :

**R√©pertoire de travail.** Le r√©pertoire de travail est l'emplacement (dossier) o√π votre session R *en cours* travaille. Si vous enregistrez un fichier, par exemple, il sera enregistr√© dans ce dossier par d√©faut. De m√™me, Si vous ouvrez un fichier, ce dossier sera affich√© par d√©faut. Tous les chemins relatifs auront ce dossier pour origine. Par d√©faut, R choisit g√©n√©ralement votre dossier "Documents" comme r√©pertoire de travail sur les machines Windows.

**Racine.** La racine fait r√©f√©rence au niveau de dossier le plus √©lev√© du r√©pertoire de travail. Si le dossier de votre cours s'appelle `FETCHR` la racine se trouverait directement √† l'int√©rieur de celui-ci (et non dans l'un de ses sous-dossiers comme `R` ou `data`).

### Projets RStudio

Un [projet RStudio]{.hovertip bs-toggle='tooltip' bs-title="Techniquement, c'est un fichier contenant des m√©tadonn√©es qui indiquent √† RStudio quels fichiers ouvrir et quel est le r√©pertoire de travail, ce qui vous √©vite d'avoir √† le d√©finir vous m√™me"} est outil qui va faciliter votre vie et aider RStudio √† trouver les diff√©rents fichiers.


Pour rappel, votre interface doit ressembler √† ceci :

![Capture d'√©cran d'une interface RStudio typique](../img/core/01_introduction/01_rstudio_interface_en.png){fig-align="center" #fig-interface}

::: {.setup}
Ouvrez RStudio et suivez ces √©tapes pour cr√©er un nouveau projet :

- cliquez sur `File > New Project > Existing Directory > Browse`, 
- naviguez jusqu'au dossier du cours (en l'ouvrant) 
- cliquez sur `Create Project`.
:::

::: {.look}
Dans l'explorateur Windows, examinez le dossier du cours. Vous devriez maintenant voir un nouveau fichier avec l'extension `.Rproj` qui a une petite ic√¥ne bleue avec un R au milieu
:::

![Ic√¥ne associ√©e aux projets RStudio](../img/core/02_import/02_rproject.png){fig-align="center"}

:::{.callout-note}
Si vous ne voyez pas ce fichier, c'est probablement parce qu'il est cach√© par d√©faut sur votre ordinateur. Pour modifier ce param√®tre dans l'explorateur Windows, allez dans le menu *Afficher* et s√©lectionnez `Extensions de noms de fichier`.
:::

Lorsque vous ouvrez un projet RStudio, RStudio d√©marre une nouvelle session R sp√©cifique √† ce projet, ouvre les fichiers associ√©s et d√©finit la racine de votre dossier comme r√©pertoire de travail. Une cons√©quence imm√©diate est que le panneau *Files* en bas √† droite de l'interface montre les sous dossiers pr√©sents dans le r√©pertoire de travail, *i.e.* votre dossier de cours.

::: {.callout-tip}
Il est fortement recommand√© de mettre en place un projet RStudio distinct pour *chacune* de vos [analyses]{.hovertip bs-toggle='tooltip' bs-title="Ici, un projet d'analyse implique l'ensemble du processus de chargement, de nettoyage, d'analyse et de production de rapports sur un jeu de donn√©es."} afin de garantir que les fichiers de vos projets restent organis√©s.  
:::

Il existe plusieurs fa√ßons d'ouvrir un projet RStudio :

- Utilisez le menu RStudio `File > Open Project` puis s√©lectionnez le fichier `.Rproj` appropri√©
- Cliquez sur [le bouton `Project: (none)`]{.hovertip bs-toggle='tooltip' bs-title="Examinez ce bouton pour savoir dans quel projet vous travaillez actuellement."} en haut √† droite de l'interface RStudio
- Naviguez dans l'explorateur de fichiers Windows jusqu'√† votre dossier de cours et double-cliquez sur le fichier avec l'extension `.Rproj`


### Les options de RStudio

Avant de poursuivre, allons modifier certaines des options de RStudio qui peuvent causer des probl√®mes.

::: {.setup}
Ouvrez les options globales (`Tools > Global Options`) et ouvrez l'onglet `General` (menu de gauche). D√©selectionnez toutes les cases des sections `R Sessions`, `Workspace` et `History`.
:::

![Capture d'√©cran des options de RStudio](../img/core/02_import/03_do_not_save.png){fig-align="center"}

Lorsque ces options sont activ√©es, RStudio enregistre les objets de votre environnement et les charge √† chaque fois que vous ouvrez une nouvelle session R. Ca semble √™tre une bonne id√©e, mais il est en fait pr√©f√©rable de toujours commencer votre travail √† partir d'une [session R vide]{.hovertip bs-toggle='tooltip' bs-title="Une session vide signifie que l'environnement est vide, mais vos scripts avec toutes les instructions sont toujours l√† !"} afin d'√©viter les erreurs.

:::{.callout-important}
N'oubliez pas que toutes les commandes n√©cessaires au nettoyage et √† l'analyse de vos donn√©es doivent √™tre enregistr√©es explicitement dans un script, dans le bon ordre. Faire retourner le script devrait arriver aux m√™mes r√©sultats que pr√©c√©dement.
:::

### Cr√©ation d'un nouveau script

::: {.setup}
Ouvrez un nouveau script et enregistrez-le dans le sous-dossier `R` de votre projet sous le nom `import_data.R`.

Ajoutez des m√©tadonn√©es au d√©but du script, comme recommand√© lors premi√®re session, en utilisant des [commentaires](01_introduction.qmd#sec-comments). Veillez √† inclure :

- Le titre
- L'auteur du script
- La date de cr√©ation
- Une description rapide de ce que fait le script
:::

Nous sommes pr√™ts √† commencer √† coder

## Paquets {#sec-packages}

Les paquets [*packages*] sont des collections de fonctions qui √©tendent les fonctionalit√©s de R. Vous en utiliserez un grand nombre pendant ce cours et dans votre travail quotidien. R √©tant open-souce, les packages sont t√©l√©chargeable et utilisable gratuitement.

:::{.callout-note}
Dans ce cours, nous utiliserons une convention commune qui est de r√©f√©rencer les paquets entre `{}`. Par exemple `{ggplot2}` est le nom du paquet ggplot2 qui contient des fonctions pour cr√©er des graphes, telles que `ggplot()`, `geom_point()` etc...
:::

### Installation

La fonction `install.packages()` t√©l√©charge et installe un nouveau paquet sur votre ordinateur, dans la biblioth√®que de paquets associ√©e √† R. Vous n'avez √† faire cette op√©ration qu'une seule fois par paquet et ordinateur.

```{r}
#| eval = FALSE
install.packages("here") # installe le paquet {here} 
```

N'oubliez pas de mettre le nom du paquet entre guillemets lorsque vous utilisez la commande `install.packages()`. Que se passe-t-il si vous ne le faites pas ?

::: {.callout-note}
Si vous suivez cette session dans le cadre d'un cours, pour √©viter tout probl√®me potentiel de connectivit√© internet pendant la formation, nous vous avons d√©j√† fait installer la plupart des paquets du cours.

Si vous suivez ce tutoriel seul ou si vous n'avez pas encore install√© les paquets, vous devrez installer manuellement chaque nouveau paquet que nous rencontrerons avec la fonction `install.packages()`.
:::

### Utilisation

Une fois qu'un paquet est install√©, il faut indiquer √† R que nous souhaitons l'utiliser pour une  session donn√©e en le *chargeant* dans la session avec la fonction `library()`.

```{r}
library(here) # charge le paquet {here} dans la session
```

::: {.write}
Utilisez la fonction `library()` pour charger les paquets `here` et `rio` qui seront utilis√©s aujourd'hui.
:::

Il se peut que vous obteniez parfois un [message d'avertissement]{.hovertip bs-toggle='tooltip' bs-title="Contrairement aux messages d'erreur, les avertissements n'interrompent pas la commande en cours. Ils signalent des probl√®mes potentiels non graves, et n'ont pas toujours besoin d'√™tre corrig√©s."} signalant que certaines fonctions ont √©t√© [masqu√©es]{.hovertip bs-toggle='tooltip' bs-title="Le masquage se produit lorsque R essaie de charger plusieurs fonction portant le m√™me nom en m√™me temps. Par exemple, plusieurs paquets contiennent une fonction filter() ou select(). Quand un conflit se produit, R choisit la version qui a √©t√© charg√©e en dernier et les autres versions sont ignor√©es (masqu√©es)."} ou que la version actuelle du paquet a √©t√© construite pour une version diff√©rente de R. Ces messages ne doivent pas vous inqui√©ter, mais il faut les lire et essayer de comprendre ce qui se passe.

::: {.write}
Ex√©cutez le code suivant. Comprenez-vous le message d'erreur ?

```{r}
#| error: true
library(ggplot)
```

:::

Le code ci-dessus g√©n√®re une erreur car il y a une faute de frappe dans le nom du paquet, et vous avez donc essay√© de charger un paquet qui n'existe pas. Rappelez-vous que **R  est p√©nible, et en particulier est sensible √† la casse** : beaucoup de vos erreurs viendront de petites fautes dans les noms de fonctions ou d'objets. Ici, par exemple, nous voulions charger le paquet `ggplot2` mais nous avons √©crit `ggplot` √† la place.

::: {.callout-tip}
Il est recommand√© d'avoir une section au d√©but de votre script qui charge tous les paquets dont vous aurez besoin dans votre script en un seul endroit :

```{r}
# Packages ----------------------------
library(tidyverse)   # manipulation de donn√©es
library(lubridate)   # manipulation des dates
```

Cel√† permet de savoir rapidement quels paquets doivent √™tre install√©s pour ex√©cuter un script.
:::

::: {.write}
Cr√©ez une section "Paquets" dans votre script √† l'aide de  [commentaires]{.hovertip bs-toggle='tooltip' bs-title="Vous pouvez utiliser les raccourcis clavier CTRL + MAJ + C and CTRL + MAJ + R pour ins√©rer des commentaires ou des sections"}
:::

### Mettre √† jour les paquets

R dispose d'une communaut√© de d√©veloppeurs tr√®s active et il est assez courant que les paquets soient mis √† jour, avec de nouvelles fonctionalit√©s ou des corrections de bugs. Pour mettre √† jour les paquets de votre biblioth√®que, rendez-vous dans [l'onglet `Packages`]{.hovertip bs-toggle='tooltip' bs-title="Pour rappel, cet onglet affiche la liste de tous les paquets que vous avez install√©s sur votre ordinateur, avec leur num√©ro de version."} du panneau inf√©rieur droit et cliquez sur `Update`. N'oubliez pas que vous **devez √™tre connect√© √† internet** pendant ce processus.

::: {.callout-important}
La mise √† jour de certains paquets peut parfois changer le comportement de certaines fonctions, ce qui peut casser votre code. **Pas de panique**. La meilleure pratique consiste √† adapter votre code mais, dans le pire des cas, vous pouvez installer une [ancienne version du paquet incrimin√©]{.hovertip bs-toggle='tooltip' bs-title="Ce qui est g√©n√©ralement d√©conseill√© car cela rend votre code difficile √† utiliser par d'autres. Nous n'illustrerons pas la manip ici. Si vous avez √† le faire, documentez bien !"}.
:::

## Importation de donn√©es

### Trouver son chemin... {#sec-filepaths}

Pour ouvrir un fichier dans R, vous devez fournir un **chemin d'acc√®s au fichier**. Un chemin d'acc√®s est simplement un (long) nom pour un fichier qui inclut son emplacement sur votre ordinateur. Les chemins d'acc√®s peuvent √™tre *absolus* ou *relatifs*.

#### Chemins d'acc√®s absolus

Les chemins d'acc√®s absolus sont **sp√©cifiques √† votre ordinateur** et vont jusqu'au niveau de votre [disque dur]{.hovertip bs-toggle='tooltip' bs-title="Par exemple, 'C:' ou 'D:' sur un ordinateur Windows."}. Par exemple : `D:/OneDrive - MSF/Documents/monitoring/cholera/fancy_project/data/raw/example_linelist.xlsx`. Il est clair que ce chemin ne fonctionne que sur un ordinateur particulier.

L'utilisation de chemins absolus [encod√©s en dur]{.hovertip bs-toggle='tooltip' bs-title="Le codage en dur correspond au fait l'√©crire le chemin d'acc√®s en entier, comme dans l'exemple ci-dessus, au lieu de construire le chemins par morceaux comme nous allons voir apr√®s"} est **fortement d√©conseill√©** car cela rend votre code fragile et augmente la maintenance : en effet, les chemins devront tous √™tre mis √† jour chaque fois quelqu'un d'autre ex√©cute votre code, ou que le dossier du projet est d√©plac√© sur votre ordinateur.

#### Chemins d'acc√®s relatifs

Les chemins relatifs sont d√©finis par rapport √† votre [r√©pertoire de travail](../sessions_core/02_import_data.qmd#sec-definitions). 
Comme l'emplacement du fichier `.Rproj` d√©finit le r√©pertoire de travail, les chemins sont relatifs √† cette racine. Pour vous, un chemin relatif ressemblera √† √ßa : `data/raw/example_linelist.xlsx`.

Cela signifie que tant que la **structure interne du dossier** contenant votre projet est pr√©serv√©e, le chemin d'acc√®s relatif sera valable quelque soit l'ordinateur.


#### Chemins d'acc√®s robustes avec la fonction `here()`

Le paquet `{here}` dispose d'une fonction `here()` qui aide √† cr√©er des chemins d'acc√®s. Elle pr√©sente deux avantages :

- Elle d√©tecte la pr√©sence d'un fichier `.Rproj` et est capable de construire un *chemin absolu* √† partir d'un *chemin relatif* dans votre projet RStudio.

- Elle choisit automatiquement le s√©parateur adapt√© √† votre [syst√®me d'exploitation]{.hovertip bs-toggle='tooltip' bs-title="Par exemple, Windows, MacOS, Debian..."} : `/`, `\` ou `//`.

```{r}
#| eval: true
library(here)
here("data", "raw", "example_linelist.xlsx")
```


```{r}
#| eval: true
library(here)
here("data", "raw", "example_linelist.xlsx")
```

Voyez comme nous n'avons d√©fini que le chemin relatif et la fonction a reconstitu√© le chemin absolu. Cel√† marchera donc sur l'ordinateur d'un coll√®gue, y compris sur un autre syst√®me d'exploitation, du moment que la structure du r√©pertoire de travail est intacte.

Nous vous **encourageons fortement** √† utiliser `here()` chaque fois que vous devez cr√©er un chemin d'acc√®s √† un fichier.

::: {.write}
Ex√©cutez le code ci-dessus dans la console. Quel chemin d'acc√®s `here("data", "raw")` vous donne-t-il ?
:::

::: {.write}
Utilisez `here()` pour cr√©er le chemin vers le fichier `Moissalla-rougeole-liste-lineaire-FR.xlsx`.
:::

::: {.callout-important}
`here()` cr√©e une cha√Æne de caract√®res contenant l'adresse d'un fichier, mais ne v√©rifie pas si ce fichier *existe r√©ellement* sur votre ordinateur. Si le fichier est absent ou s'il y a une faute de frappe dans votre code, vous obtiendrez une erreur lors de *l'utilisation* du chemin ainsi cr√©√©. Vous pouvez tester si un fichier existe √† cette adresse avec la fonction `file.exists()`.
:::

::: {.callout-tip}
On veut souvent d√©finir plusieurs chemins dans un projet (donn√©es brutes, donn√©es propres, o√π sauver les graphes etc.). C'est une bonne pratique que de cr√©er une nouvelle section au d√©but de votre script, apr√®s le chargement des paquets, pour d√©finir et stocker les chemins d'acc√®s dans des objets.
:::

### Importer les donn√©es {#sec-import}

Dans R, diff√©rents formats de fichiers sont import√©s par diff√©rentes fonctions sp√©cialis√©es, ce qui est fastidieux √† m√©moriser et √† charger. La fonction `import()` du paquet [`{rio}`]{.hovertip bs-toggle='tooltip' bs-title="Pour R Input and Output, c'est √† dire entr√©es et sorties dans R"} nous fait gagner du temps en reconnaissant l'extension des fichier et en [appelent automatiquement une fonction sp√©cialis√©e]{.hovertip bs-toggle='tooltip' bs-title="Ce type de fonction, qui fournit une interface unifi√©e √† d'autres fonctions sp√©cifiques, est connu sous le nom de 'wrapper', c'est √† dire 'emballage'."} pour charger les donn√©es.

Comme `import()` ne fait qu'appeler d'autres fonctions en arri√®re-plan, il est possible qu'elle ait besoin d'arguments optionnels sp√©cifiques pour certains types de fichier.

::: {.callout-tip}
La (longue) liste des types de fichiers pris en charge par {rio} est sur le [site du paquet](https://gesistsa.github.io/rio/index.html#supported-file-formats). Dans la suite de la le√ßon, nous nous concentrerons sur l'importation de donn√©es √† partir de fichiers Excel `.xlsx`.
:::

#### Import de la premi√®re feuille

Au minimum la fonction `import()` a besoin qu'on lui donne le chemin du fichier avec l'argument `file` :

```{r}
import(file = here("data", "raw", "example_linelist.xlsx"))
```

Notez que nous avons imbriqu√© la commande `here()` **√† l'int√©rieur de** la commande `import()`. L'imbrication de fonctions est autoris√©e et m√™me courrante en R. R √©value les fonctions imbriqu√©es de l'int√©rieur (`here()`) √† l'ext√©rieur (`import()`). La valeur renvoy√©e par `here()` est donc utilis√©e comme *valeur d'entr√©e* d'`import()`.

::: {.write}
Importez le fichier `Moissalla-rougeole-liste-lineaire-FR.xlsx` en utilisant `here()` et `import()`.
:::

Si votre importation a fonctionn√© correctement, R affichera les donn√©es dans la console mais ne les enregistrera pas dans l'environnement car nous ne [les avons pas assign√©es √† un objet](../sessions_core/01_introduction.qmd#sec-assignement-operator).

::: {.write}
R√©importez vos donn√©es, mais cette fois-ci, sauvegardez-les dans un objet appel√© `df_linelist`.
:::

::: {.callout-tip}
Si votre jeu de donn√©es est tr√®s gros, il vaut mieux √©viter de l‚Äôafficher dans la console‚Ä¶
:::

#### Import d'une autre feuille

Comme vous venez de le voir, la fonction `import()` importe la premi√®re feuille d'un fichier Excel par d√©faut. Il est cependant possible de passer le num√©ro de la feuille ou son nom (en cha√Æne de caract√®res) √† l‚Äôargument `which` :

```{r}
import(file = here("data", "raw", "example_linelist.xlsx"),  # chemin
       which = 2)                                            # sp√©cifie la deuxi√®me feuille
```

Notez que l'argument `which` est sp√©cifique aux types de fichiers comportant plusieurs feuilles, tels que les fichiers Excel ou .Rdata. Si vous essayez de l'utiliser sur un fichier `.csv` l'argument sera ignor√©.

## Aper√ßu des donn√©es

Nous avons import√© un jeu de donn√©es dans R et l‚Äôavons assign√© √† un objet (`df_linelist`). 
Nous pouvons maintenant inspecter le data frame cr√©√© pour v√©rifier que l'export s'est bien pass√©, et commencer √† √©valuer le nettoyage √† faire.

Nous pouvons commencer par jeter un coup d'≈ìil rapide aux premi√®res lignes du data frame √† l'aide de la fonction `head()`. Son premier argument est le data frame √† inspecter et le second, `n`, accepte un nombre de lignes √† afficher (optionnel).

```{r}
head(df_linelist, n = 10) # Affiche les 10 premi√®res lignes
```

::: {.write}
Utilisez `head()` pour examiner les 12 premi√®res lignes de `df_linelist`.
:::

Nous pouvons inspecter la [structure]{.hovertip bs-toggle='tooltip' bs-title="Cela revient √° utiliser la commande `str()` sur le data frame"} du data frame √† partir de l'onglet *Environnement* dans le panneau sup√©rieur droit.  Nous pouvons √©galement visualiser le data frame dans le le visualiseur de donn√©es de RStudio (en haut √† gauche).

::: {.look}
Cliquez sur le bouton rond bleu √† c√¥t√© de `df_linelist` dans votre environnement pour examiner sa structure. Cliquez ensuite sur le nom du data frame pour le visualiser.
:::

Le visualiseur permet d‚Äôafficher le data frame comme dans un tableur et est un moyen pratique d'examiner rapidement vos donn√©es. Vous pouvez trier et filtrer vos donn√©es dans cet onglet mais ces actions ne modifieront pas l'objet `df_linelist`. Le visualiseur peut √©galement √™tre ouvert en utilisant directement la fonction `View()` sur le data frame.

## C'est fini !

Bravo et n'oubliez pas de sauvegarder votre code !

```{r}
#| echo: false
#| eval: true

downloadthis::download_link(
  link = 'https://github.com/epicentre-msf/repicentre/blob/main/sessions_core/02_import_data_solutions.fr.R',
  button_label = 'Solutions exercices',
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```

## Pour aller plus loin

### Exercices suppl√©mentaires

1. Utilisez `dim()` pour examiner les dimensions de votre data frame.
2. Utilisez `str()` pour v√©rifier le type de donn√©es de chaque colonne. Voyez-vous quelque chose d'√©trange ? N'oubliez pas que vous pouvez √©galement utiliser des fonctions telles que `is.character()` et `is.numeric()` si vous souhaitez tester le type d'une colonne particuli√®re.
3. En utilisant une fonction apprise lors de la premi√®re session, pouvez-vous extraire les noms des colonnes du data frame ? Ces r√©sultats correspondent-ils √† ce que vous voyez lorsque vous ouvrez les donn√©es dans Excel ?
4. Essayez d'ex√©cuter la fonction `summary()` sur votre data frame. Qu'est ce que le r√©sultat vous apprend sur les variables ?

### Ressources compl√©mentaires

- Le [site web](https://gesistsa.github.io/rio/index.html#supported-file-formats) de `{rio}`
- [Plus d'exemples](https://epirhandbook.com/fr/new_pages/importing.fr.html) sur l'importation de donn√©es de diff√©rents types de fichiers


