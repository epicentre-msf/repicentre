---
title: Data summaries
description: Create summary tables.
date: last-modified
# image: 
categories:
  - Core
  - R Basics
  - Data Types
---

```{r setup}
#| include: false
#| eval: true
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
```

## Objectives

- Create contingency tables with `count()`
- Compute summary statistics by group using `summarize()`
- Review how to subset rows using `filter()` and create/modify variables with `mutate()`
- Create ordered categorical variables

:::{.setup}
This session will use the clean version of the Moissala measles dataset. Download the data and store them in `data/clean` in your practice project:

```{r}
#| echo: false
#| eval: true

downloadthis::download_link(
  link = "https://github.com/epicentre-msf/repicentre/raw/refs/heads/main/data/clean/simulated_measles_ll.rds",
  button_label = "Clean Measles Linelist",
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```

:::

## Setup

:::{.setup}
Open your RStudio Project and create a new script in the R folder called `tables.R` with appropriate metadata and a "Packages" section that imports: `{rio}`, `{here}` and `{tidyverse}`. Add an "Import Data" section that loads the *cleaned* version of the measles linelist.
:::

```{r}
#| echo: false
#| eval: true
#| include: false

library(rio)
library(here)
library(tidyverse)

# Import data
df_linelist <- import(here("data", "clean", "simulated_measles_ll.rds")) |> as_tibble()

```

## Introduction: Data aggregation

OK so let's recap, you have just performed one of the most [important tasks]{.hovertip bs-toggle='tooltip' bs-title='Some consider it to be 80% of the work!'} of an epidemiologist: the **data cleaning**. Now that you have clean and standardise data, we can get into the real business and start analysing them. Analyses typically start with some tables and summaries to describe our data. This initial exploratory phase often includes:

- Univariate frequency tables to count occurrences of different values
- Summary statistics (mean, median, standard deviation) of numerical variables
- Cross-tabulations to examine relationships between categorical variables
- Group-wise summaries to compare statistics across different subsets of the data

## Counting Multiple Columns (Contingency Tables)

During the data exploration session, wyoue have learned to create frequency table for a single categorical variable using the `count()` function. Counting one variable is nice, but we often want to count the number observations based on two (or more!) variables.

 These tables are called [contingency tables]{.hovertip bs-toggle='tooltip' bs-title= 'It shows how observations are distributed across different combinations of categories.'}. For example, knowing the number of patients by `sub_prefecture` is great but we might want to stratify by both `sub_prefecture` *and* `age_group` to see if certain areas have [unusually old patients]{.hovertip bs-toggle='tooltip' bs-title= 'This type of stratification is a useful way of trying to find areas that may be good candidates for catch up campaigns.'}. Doing this is easy, you just need to pass multiple column names to `count()`; for example:

```{r}
df_linelist |>
  count(sub_prefecture, age_group)
```

:::{.write}
Create a new summary table counting the number of patients stratified by `sub_prefecture` and `hospitalisation`. What happens if you change the order of the arguments given to `count()`?
:::

```{r, echo = FALSE}
df_linelist |>
  count(sub_prefecture, hospitalisation)
```

:::{.write}
Using `count()` answer the following questions:

- How many patients were female? What is the proportion?
- What are all the possible values of the `outcome` variable?
- How many patients between 1 - 4 years have recovered?
:::

```{r, echo = FALSE}
df_linelist |>
  count(sex)

df_linelist |>
  count(outcome)

df_linelist |>
  count(age_group, outcome) |>
  print(n = Inf)

```

## Filtering out `NA`s

When looking at the categories of `outcome`, you should have spotted that some patients have missing values (`NA`):

```{r}
df_linelist |>
  count(outcome) |>
  mutate(prop = n / sum(n))
```

::: {.look}
Observe the output of the code above. How can you also call the proportion of patients who died ? Are you happy with this calculation ? 
::: 

The proportion of cases that died is also referred to as the [Case Fatality Ratio (CFR)]{.hovertip bs-toggle='tooltip' bs-title='the CFR is a ratio (or a risk) but not a rate!'}. However, to precisely calculate the CFR we need to make sure that the denominator only includes patient for whom we are sure of their outcome (ie we need to remove all cases with `NA` or `left aginst medical advice`). 

Remember that we can do this using `filter()`. To filter for missing values (`NA`) in a variable we can use the small function `is.na(outcome)`. Adding a `!` in front will do the opposite: *removing missing values from `outcome`*:

```{r}
df_linelist |>
  filter(
    outcome != "left against medical advice", 
    !is.na(outcome)
  ) |>
  count(outcome)
```

::: {.write}
Which other conditionnal statement could you use in `filter()` to obtain the same results
:::

Now that we have removed the patients with unknown outcomes, we can add this before creating our frequency table to get the right CFR. 

:::{.write}
Using your filter, update your code to summarize the observed number of patients who survived and died as well as the CFR (proportion who died). Store this new dataframe into an object, `cfr_df`. 
:::

```{r, echo = FALSE}
cfr_df <- df_linelist |>
  filter(outcome != "left against medical advice", !is.na(outcome)) |>
  count(outcome) |>
  mutate(prop = n / sum(n))
```

::: {.callout-tip}
**Bonus.** Another useful "shortcut" function is `drop_na()` from the package `{tidyr}` that equates to `filter(!is.na())`.

```{r}
df_linelist |>
  drop_na(outcome) |>
  count(outcome)
```

`drop_na()` is particularly useful as you can give it multiple column names to filter by. But be careful that doing so will remove **all** rows where **one or more** of those columns have a missing value. 
:::

## Summary Table: Statistics by sub prefecture

Ok now that we have produced some simple frequency and contingency tables we may want to increase the complexity. A common task in epidemiology is to look at summary statistics within subsets of the data. 

For example, we may be asked to produce patient statistics at the sub-prefecture level, ie: *for each sub-prefecture in the data*, we need to answer the following questions: 

- How many patients?
- What is their average age? 
- What was the earliest date of admission? 
- How many patients have been hospitalised? 
- Among children under 6 months, how many have died? 

This is exactly what the function `summarize()` has been made for! It allows us to calculate summary statistics on a dataset, and the syntax is similar to that of `mutate()`: 

```{r}
# DO NOT RUN (PSEUDO-CODE)
df |>
  mutate(new_col = function_to_create(existing_col))

df |>
  summarize(
    .by = grouping_variable,
    new_col = summary_function(existing_col)
  )
```

Consider the following code, here we are **summarising the data** to calculate the average age across all patients.

```{r}
#| eval: true

df_linelist |>
  summarize(mean_age = mean(age))

```

You might notice that this code yields a single value for average age. When the data are not grouped, `summarize()` will consider the full dataset as a single group and return one summary statistic for the whole dataset. To calculate the average age by a specific strata, we need to specify a "grouping variable" using the `.by =` argument:

```{r}
#| eval: true

df_linelist |>
  summarize(
    .by = sex,
    mean_age = mean(age)
  )

```

::: {.look}
Take a look at the above results. How would you interpret them?
:::

Now that we can use `summarize()` we can use it to calculate some proper summary statistics by sub-prefecture. Let's start by calling an empty `summarize()` and grouping the data on `sub_prefecture`.


::: {.write}
Run the following code:

```{r}
df_linelist |>
  summarize(
    .by = sub_prefecture
  )

```
What happens when you run these lines?
:::

### Counts

We first want to look at the number of cases in each `sub_prefecture`. This can be done using the helper function `n()`: 

```{r}
df_linelist |>
  summarize(
    .by = sub_prefecture,
    n_patients = n()
  )

```

::: {.write}
Ok now let's build a summary table for each `sub_prefecture`. First start by replicating the above lines
:::

### Continuous Summaries

We can then use the simple `mean`, `median`, `min`, `max` functions to produce summaries for continuous variables. For example the average age:

```{r}
df_linelist |>
  summarize(
    .by = sub_prefecture,
    n_patients = n(),
    mean_age = mean(age)
  )

```

::: {.write}
Add the minimum date of admission to your table for each of the `sub_prefecture`? Are you happy with the results? 
:::

::: {.callout-tip}
Remember that with the small functions (`mean`, `median`, `min`, `max`), you need to **explicitly tell R** to remove `NA`. 
:::

### Counting with a Condition

We may also be interested in looking at the number of patients (rows) that fit a condition: the *number of patients that were female*. Counting by a logical condition can be done with the following syntax:

```{r}
# DO NOT RUN (PSEUDO-CODE)
summarize(
  sum_category = sum(LOGIC_TEST,
  na.rm = TRUE
))
```

This sum allows us to count all the lines where our condition was met. For example:

```{r}
df_linelist |>
  summarize(
    .by = sub_prefecture,
    n_female = sum(sex == "f", na.rm = TRUE)
  )
```

::: {.write}
Add a variable to your table that counts the number of patients that have been hospitalised? (ie: rows that have `yes` in variable `hospitalisation`) 
:::

### Other Statistics

Sometimes we want to produce a statistic *other than counting* given a condition, let's say the *mean age of all hospitalised patients*. Here the syntax is a bit different: 

```{r}
# DO NOT RUN (PSEUDO-CODE)
df |>
  summarize(
    mean_category = mean(col_to_use[LOGIC_TEST],
    na.rm = TRUE
  ))
```

Here, we have:

- Indicated which column we want to use when caluclating the summary statistic (here a mean)
- Indexed that column using a logical test

For example to compute the `mean()` of the `age` variable but *only* in rows where `hospitalisation == "yes"` we would write it like this:

```{r}
df_linelist |>
  summarize(
    .by = sub_prefecture,
    n_patients = n(),
    mean_age_hosp = mean(age[hospitalisation == "yes"], na.rm = TRUE)
  )
```    

::: {.write}
Can you use this syntax to calculate the mean age of female patients in your table ?
:::

That is looking great! We are starting to get a pretty exhaustive grouped summary table with a lot of useful information by `sub_prefecture`! An extra challenge for you: 

::: {.write}
**CHALLENGE**: Could you add a variable to your table that **counts** the number of patients that died *among* the ones that are *< 6 months old*.  

::: {.callout-tip}
You want to count rows (so use `sum()`) that fill a specific condition for outcome (`outcome == "dead"`), but *only* when `age_group == "< 6 months"`
:::

:::

### Use the output 

Finally, a reminder that `summarize()` returns a dataframe that we can then further manipulate (eg: with `filter` and `mutate`). 

::: {.write}
Can you add a `mutate()` after producing your summary table to calculate: 

- The proportion of hospitalised patients per sub-prefecture
- The proportion of female patients per sub-prefecture 
:::

Here is our final table !

```{r, eval = TRUE, echo = FALSE }
sub_pref_df <- df_linelist |>
  summarize(
    .by = sub_prefecture,
    n_patients = n(),
    mean_age = mean(age),
    min_admission = min(date_admission, na.rm = TRUE),
    n_female = sum(sex == "f", na.rm = TRUE),
    n_hosp = sum(hospitalisation == "yes", na.rm = TRUE),
    mean_age_hosp = mean(age[hospitalisation == "yes"], na.rm = TRUE),
    mean_age_female = mean(age[sex == "f"], na.rm = TRUE),
    n_death_u6m = sum(outcome[age_group == "< 6 months"] == "dead", na.rm = TRUE),
    prop_female = n_female / n_patients,
    prop_hosp = n_hosp / n_patients
  )

sub_pref_df |>
  DT::datatable(
    options = list(
      scrollX = TRUE,
      pageLength = 10,
      autoWidth = TRUE
    ),
    style = "bootstrap"
  ) |>
  DT::formatRound(columns = names(which(sapply(sub_pref_df, is.numeric))), 
  digits = 2)

```

## Done!

You should be proud of yourselves, making summary tables is an important skill to an epidemiologist, making it in R is very efficient !! Don't forget to save your code !

## Going Further

### Extra Exercises

Make a summary table that summarizes: 
  - The number of patients
  - The proportion of male
  - The number of deaths
  - The CFR
  - The number of deaths among patients that had pneumonia

in all the different *age groups* ! 

### Additional Resources

- The [EpiR Handbook chapter on grouping data](https://epirhandbook.com/en/new_pages/grouping.html)

- Once you have tables, you can extensively customise them for display/publication using `{gt}` package: 
  - [Website of `gt`](https://gt.rstudio.com/index.html)
  - [Book about `gt`](https://gt.albert-rapp.de/)

