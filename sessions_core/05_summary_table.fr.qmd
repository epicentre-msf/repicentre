---
title: Tableaux récapitulatifs
description: Créer des tableaux récapitulatifs
image: ../img/core/05_summary_tables/logo.svg
categories:
- Core
- Tableaux de resumé
---

```{r setup}
#| include: false
#| eval: true
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)

library(here)
library(tidyverse)

# Import data
df_linelist <- rio::import(here("data", "clean", "moissala_linelist_clean_FR.rds")) |> 
  as_tibble()
```

## Objectifs

- Créer des tableaux d'effectifs avec `count()`
- Calculer des résumés statistiques stratifiés par groupe à l'aide de `summarize()`
- Réviser comment sélectionner les lignes en utilisant `filter()` et créer/modifier des variables avec `mutate()`
- Créer des variables catégorielles ordonnées


## Setup

**Prérequis** : cette session suppose que vous savez utiliser RStudio, que vous êtes capable d'importer des données et que vous connaissez les verbes de base de manipulation des données que nous avons vus dans les sessions de base jusqu'à présent. Si vous avez besoin d'un rappel sur l'un de ces sujets, nous vous encourageons à revoir les sessions précédentes du module.

:::{.setup}
Cette session utilisera une version nettoyée de la liste linéaire rougeole à Mandoul (Tchad).

```{r}
#| echo: false
#| eval: true

downloadthis::download_link(
  link = 'https://github.com/epicentre-msf/repicentre/raw/main/data/FETCHR.zip',
  button_label = "Linelist rougeole nettoyée",
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```

<br>
Ouvrez votre projet RStudio et créez un nouveau script dans le sous-dossier R appelé `tables.R` avec les métadonnées appropriées et une section "Paquets" qui importe : `{rio}`, `{here}` et `{tidyverse}`. Ajoutez une section "Import données" qui charge la version *nettoyée* de la linelist de la rougeole dans R.
:::


## Introduction : agrégation des données

Récapitulons. Vous venez d'effectuer l'une des tâches les [plus importantes]{.hovertip bs-toggle='tooltip' bs-title='Certains considèrent que cela représente 80 % du travail !} d'un épidémiologiste : le **nettoyage des données**. Maintenant que vous disposez de données propres et standardisées, vous pouvez commencer à les analyser. Les analyses commencent généralement par des tableaux et des résumés qui décrivent nos données :

- Tableaux d'effectifs et fréquence univariés pour compter les occurrences de différentes valeurs
- Statistiques descriptives des variables numériques (moyenne, médiane, écart-type)
- Tableaux croisés pour examiner les relations entre les variables catégorielles
- Résumés par groupe pour comparer les statistiques entre différents sous-ensembles de données

## Compter plusieurs colonnes (tableaux de contingence)

Au cours de la session d'exploration des données, vous avez appris à créer un tableau d'effectifs pour une variable catégorielle à l'aide de la fonction `count()`.
C'est bien, mais nous voulons souvent compter le nombre d'observations en fonction de deux variables (ou plus !).

Ces tableaux sont appelés [tableaux de contingence]{.hovertip bs-toggle='tooltip' bs-title='Ou tableaux croisés. Ou tableaux à double entrée. Ils montrent comment les observations sont réparties entre différentes combinaisons de catégories.'}. Par exemple, connaître le nombre de patients par sous-préfecture est très utile, mais nous pourrions vouloir stratifier à la fois par sous-préfecture et par groupe d'âge pour voir si certaines zones ont des patients anormalement âgés. Ce type de stratification est un moyen utile d'essayer de trouver des zones qui pourraient être de bons candidats pour des campagnes de rattrapage. 

C'est facile, il suffit de passer plusieurs noms de colonnes à `count()` :

```{r}
df_linelist |>
  count(sous_prefecture, age_groupe)
```

:::{.write}
Créez un tableau récapitulatif comptant le nombre de patients stratifiés par `sous_prefecture` et `hospitalisation`. Que se passe-t-il si vous modifiez l'ordre des arguments donnés à `count()` ?

En utilisant `count()`, répondez aux questions suivantes :

- Combien de patients étaient des femmes ? Quelle est la proportion ?
- Quelles sont toutes les valeurs possibles de la variable `statut_sortie` ?
- Combien de patients âgés de 1 à 4 ans se sont rétablis ?
:::


## Filtrer les valeurs `NA`

En examinant les catégories du `statut_sortie`, vous devriez avoir remarqué que certains patients n'ont pas de statut (la valeur est `NA`) :

```{r}
df_linelist |>
  count(statut_sortie) |>
  mutate(prop = n / sum(n))
```

::: {.look}
Observez le résultat du code ci-dessus. Quel est le terme technique pour la proportion de patients décédés ? Êtes-vous satisfait la manière dont le calcul ci-dessus est effectué ? 
::: 

La proportion de cas décédés est également appelée [taux de létalité]{.hovertip bs-toggle='tooltip' bs-title='Le taux de létalité est un ratio (ou un risque) mais pas un taux !'}. Pour calculer précisément le CFR, nous devons nous assurer que le dénominateur ne comprend que les patients dont nous sommes sûrs du statut, c'est-à-dire que nous devons supprimer tous les cas avec "NA" ou "contre avis médical". 

Rappelons que nous pouvons le faire en utilisant `filter()`. Pour garder les valeurs manquantes (`NA`) dans une variable, nous pouvons utiliser la fonction `is.na()`. 
L'ajout d'un `!` devant fera l'inverse : *supprimer les valeurs manquantes* :

```{r}
df_linelist |>
  filter(statut_sortie != "sortie contre avis medical", 
         !is.na(statut_sortie)) |>
  count(statut_sortie)
```

::: {.write}
Quelle autre condition pourriez-vous utiliser dans `filter()` pour obtenir le même résultat ?
:::

Maintenant que nous savons comment ne garder que les patients dont le statut est connu, nous pouvons reprendre notre code précédent et le modifier pour calculer un CFR correct. 

:::{.write}
Mettez à jour votre code pour ne conserver que les patients avec un statut de sortie connu, comptez le nombre de patients guéris et décédés, et calculez le taux de létalité (proportion de décès). Stockez ce nouveau dataframe dans un objet `cfr_df`. 
:::

```{r, echo = FALSE}
cfr_df <- df_linelist |>
  filter(statut_sortie != "sortie contre avis medical", !is.na(statut_sortie)) |>
  count(statut_sortie) |>
  mutate(prop = n / sum(n))
```

::: {.callout-tip}
**Bonus.** La fonction `drop_na(...)` du paquet `{tidyr}` est un "raccourci" pour la commande `filter(!is.na(...))` :

```{r}
df_linelist |>
  drop_na(statut_sortie) |>
  count(statut_sortie)
```

`drop_na()` est particulièrement utile car vous pouvez lui donner plusieurs noms de colonnes pour filtrer. Mais attention, cela supprimera **toutes** les lignes où **une ou plusieurs** de ces colonnes ont une valeur manquante. Faites très attention à votre nombre d'observations !
:::

## Tableau récapitulatif : statistiques par sous-préfecture

Maintenant que nous avons produit quelques tableaux de fréquence simples, nous pouvons augmenter la complexité. Une tâche courante en épidémiologie consiste à examiner les statistiques résumées dans des sous-ensembles de données. 

Par exemple, on peut nous demander de produire des statistiques sur les patients au niveau des sous-préfectures, c'est-à-dire que pour chaque sous-préfecture dans les données, nous devons répondre aux questions suivantes : 

- Combien de patients ont été consultés ?
- Quel est leur âge moyen ? 
- Quelle a été la date d'admission la plus ancienne ? 
- Combien de patients ont été hospitalisés ? 
- Parmi les enfants de moins de 6 mois, combien sont décédés ? 

C'est exactement pour cela que la fonction `summarize()` a été créée ! Elle nous permet de calculer des statistiques résumées sur un jeu de données, et la syntaxe est similaire à celle de `mutate()` : 

```{r}
#| eval: false

# NE PAS EXÉCUTER (PSEUDO-CODE)
df |>
  mutate(nouvelle_colonne = fonction(une_colonne))

df |>
  summarize(.by = variable_stratifiante,
            nouvelle_colonne = fonction_qui_résumme(une_colonne))
```

Considérons le code suivant, où nous **résumons les données** pour calculer l'âge moyen de tous les patients.

```{r}
#| eval: true

df_linelist |>
  summarize(moy_age = mean(age))
```

Notez que ce code renvoit *une seule valeur* pour l'âge moyen. Aucune variable de regroupement n'a été fournie, donc `summarize()` a renvoyé une statistique récapitulative pour l'ensemble du jeu de données. Pour calculer l'âge moyen par strate spécifique, nous devons spécifier une **variable de regroupement** en utilisant l'argument `.by` :

```{r}
#| eval: true

df_linelist |>
  summarize(.by = sexe, # Faire le résumé (ici, la moyenne) par sexe
            moy_age = mean(age))
```

::: {.look}
Jetez un œil aux résultats ci-dessus. Comment les interprétez-vous ?
:::

Maintenant que nous pouvons utiliser `summarize()`, nous pouvons l'utiliser pour calculer des statistiques récapitulatives appropriées par sous-préfecture. Commençons par appeler un `summarize()` vide et regrouper les données sur `sous_prefecture`.


::: {.write}
Exécutez le code suivant :

```{r}
df_linelist |>
  summarize(.by = sous_prefecture)
```
Que se passe-t-il lorsque vous exécutez ces lignes ?
:::

### Effectifs

Nous voulons d'abord examiner le nombre de cas dans chaque `sous_prefecture`. Cela peut être fait en utilisant la fonction `n()` qui compte les lignes : 

```{r}
df_linelist |>
  summarize(.by = sous_prefecture,
            n_patients = n()  # pour compter
)
```

::: {.write}
Ok, maintenant construisons un tableau récapitulatif pour chaque sous-préfecture. Commençons par reproduire les lignes ci-dessus.
:::

### Récapitulatifs des variables continus

Nous pouvons ensuite utiliser les fonctions `mean()`, `median()`, `min()`, `max()` (et autres) pour résummer les variables variables continues. Par exemple, l'âge moyen :

```{r}
df_linelist |>
  summarize(.by = sous_prefecture,
            n_patients = n(),
            mean_age = mean(age))
```

::: {.write}
Ajoutez la date d'admission minimale à votre tableau pour chacune des `sous_prefecture` ? 
Êtes-vous satisfait des résultats ? 
:::

::: {.callout-tip}
N'oubliez pas qu'avec les fonctions arithmétiques telles que mean(), median(), min(), max(), vous devez **indiquer explicitement à R** de supprimer NA. 
:::

### Comptage avec une condition

Nous pouvons également être intéressés par le nombre de patients (lignes) qui 
répondent à une condition : le *nombre de patients de sexe féminin*. 
Le comptage par condition logique peut être effectué avec la syntaxe suivante :

```{r}
#| eval: false
# NE PAS EXÉCUTER (PSEUDO-CODE)
summarize(sum_category = sum(LOGIC_TEST, na.rm = TRUE))
```

Cette somme nous permet de compter toutes les lignes où notre condition a été 
remplie (retourne `TRUE`). Par exemple :

Cette somme nous permet de compter toutes les lignes où notre condition a été remplie (retourne `TRUE`). Par exemple :

```{r}
df_linelist |>
  summarize(.by = sous_prefecture,
            n_female = sum(sexe == "f", na.rm = TRUE))
```

::: {.write}
Ajoutez une variable à votre tableau qui compte le nombre de patients qui ont été hospitalisés. 
(c'est-à-dire : les lignes qui ont "oui" dans la variable "hospitalisation") 
:::

### Autres statistiques

Parfois, nous voulons produire une statistique plus compliquée, par exemple 
l'âge moyen de tous les patients hospitalisés. Ici, la syntaxe est un peu différente :

```{r}
#| eval: false
# NE PAS EXÉCUTER (PSEUDO-CODE)
df |>
  summarize(mean_category = mean(col_to_use[LOGIC_TEST], na.rm = TRUE))
```

Ici, nous avons :
- Indiqué quelle statistique de synthèse nous voulons utiliser (`mean()`)
- Indiqué sur quelle colonne nous voulons calculer cette statistique (`col_to_use`)
- Création d'une condition indiquant les observations de cette colonne à utiliser dans le calcul (`[LOGIC_TEST]`)

Pour donner un exemple concret, si nous voulions calculer la moyenne de la variable 
`age` mais *uniquement* pour les patients hospitalisés 
(c'est-à-dire dans les lignes où `hospitalisation == "oui"`) nous écririons :

```{r}
df_linelist |>
  summarize(.by = sous_prefecture,
            n_patients = n(),
            moy_age_hosp = mean(age[hospitalisation == "oui"], na.rm = TRUE))
``` 

L'utilisation d'un test logique dans l'exemple ci-dessus est appelée **indexation logique**,
où une condition est essentiellement utilisée pour filtrer les observations 
que vous souhaitez prendre en compte lors d'un calcul. L'indexation logique 
est très puissante, mais elle peut aussi demander un certain temps d'adaptation,
alors ne vous inquiétez pas trop si ce n'est pas parfaitement clair à ce stade. 

::: {.write}
Pouvez-vous utiliser cette syntaxe pour calculer l'âge moyen des patientes dans votre tableau ?
:::

C'est très bien ! Nous commençons à obtenir un tableau récapitulatif groupé assez exhaustif avec beaucoup d'informations utiles par "sous-préfecture" ! Un défi supplémentaire pour vous : 

::: {.write}
**DÉFI** : Pourriez-vous ajouter une variable à votre tableau qui **compte** le nombre de patients décédés *parmi* ceux qui ont *< 6 mois*. 

<br>
**Note.** Vous voulez compter les lignes (donc utiliser `sum()`) qui remplissent une condition spécifique pour le résultat (`statut_sortie == "deces"`), mais *uniquement* lorsque `age_group == "< 6 months"`
:::

### Utiliser la sortie 

Enfin, n'oubliez pas que `summarize()` renvoie un dataframe que nous pouvons ensuite
manipuler davantage (par exemple : avec `filter()` et `mutate()`). 

::: {.write}
Ajoutez un `mutate()` après avoir produit votre tableau récapitulatif pour calculer : 

- La proportion de patients hospitalisés par sous-préfecture
- La proportion de patientes par sous-préfecture 
:::

L'en-tête de votre tableau final devrait ressembler à ceci :

```{r}
#| eval: true
#| echo: false
sub_pref_df <- df_linelist |>
  summarize(
    .by = sous_prefecture,
    n_patients = n(),
    moy_age = mean(age),
    min_admission = min(date_admission, na.rm = TRUE),
    n_femme = sum(sexe == "f", na.rm = TRUE),
    n_hosp = sum(hospitalisation == "oui", na.rm = TRUE),
    moy_age_hosp = mean(age[hospitalisation == "oui"], na.rm = TRUE),
    moy_age_femme = mean(age[sexe == "f"], na.rm = TRUE),
    n_deces_moins_6m = sum(statut_sortie[age_groupe == "< 6 mois"] == "deces", na.rm = TRUE),
    prop_female = n_femme / n_patients,
    prop_hosp = n_hosp / n_patients
  )

sub_pref_df |>
head()
```


## C'est fait !

Vous devriez être fiers de vous, la création de tableaux récapitulatifs est une compétence importante pour un épidémiologiste, et le faire en R est très efficace ! N'oubliez pas de sauvegarder votre code !

```{r}
#| echo: false
#| eval: true

downloadthis::download_link(
  link = 'https://github.com/epicentre-msf/repicentre/blob/main/sessions_core/05_summary_table_solutions_fr.R',
  button_label = 'Solutions exercices',
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```


## Pour aller plus loin

### Exercices supplémentaires

1. Créez un tableau récapitulatif qui calcule les statistiques suivantes par *groupes d'âge* : 

- Le nombre de patients
- La proportion d'hommes
- Le nombre de décès
- Le CFR
- Le nombre de décès parmi les patients atteints de pneumonie

2. Faites un tableau qui montre la proportion de patients par âge ayant reçu un vaccin contre la rougeole (par rappel oral ou par carte) et ceux qui ont reçu 1 ou 2 doses.

3. Faites un tableau comparant la proportion de patients hospitalisés et non hospitalisés présentant un TDR positif pour le paludisme, de la fièvre, une éruption cutanée, une toux, des yeux rouges, une pneumonie, une encéphalite et un MUAC « rouge » ou « jaune » (moins de 125 mm).

4. Calculer le nombre moyen de jours entre l'apparition des premiers symptômes et la consultation par sous-préfecture.

5. Calculer le temps moyen passé à l'hôpital (i.e. jours entre l'admission et le résultat) par résultat (i.e. chez ceux qui ont guéri et ceux qui sont décédés).

### Ressources supplémentaires

- Le chapitre du [manuel EpiR sur le regroupement des données](https://epirhandbook.com/en/new_pages/grouping.html)
- Une fois que vous avez des tableaux, vous pouvez les personnaliser en profondeur pour l'affichage/la publication à l'aide du paquetage `{gt}` : 
  - [Site web de `gt`](https://gt.rstudio.com/index.html)
  - [Livre sur `gt`](https://gt.albert-rapp.de/)
