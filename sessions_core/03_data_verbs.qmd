---
title: Data Manipulation, Basics
description: An introduction to data manipulation and cleaning using `{dplyr}`
date: last-modified
image: ../img/core/03_manipulation_basic/logo.svg
categories:
  - Core
  - Data Manipulation
  - Data Cleaning
---

```{r setup}
#| include: false
#| echo: false
#| eval: true
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)

library(dplyr)

df_raw <- rio::import(here::here('data', 'raw', 'moissala_linelist_EN.xlsx'))
```


Objectives
----------------------------------------------------------------------------------------------------
- Learn basic data verbs from `{dplyr}` to:
  - Select specific columns (`select()`)
  - Rename columns (`rename()`)
  - Add new columns and change existing ones (`mutate()`)
  - Remove duplicate observations
- Understand the pipe operator `|>`


Setup
----------------------------------------------------------------------------------------------------
**Dependencies.** This session assumes that you know how to use RStudio and that you are able to import data. If you need a refresher on either of these topics, we encourage you to review the [first two sessions in the learning pathway](https://epicentre-msf.github.io/repicentre/pathway.html).


::: {.setup}
This session will work with the **raw** Moissala linelist data, which can be downloaded here:

```{r}
#| echo: false
#| eval: true

downloadthis::download_link(
  link = 'https://github.com/epicentre-msf/repicentre/raw/refs/heads/main/data/raw/moissala_linelist_EN.xlsx',
  button_label = ' Download Data',
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```
<br>
Make sure this dataset is saved into the appropriate subdirectory of your R project and create a new script called `data_verbs_practice.R` in your `R` directory. Add an appropriate header and load the following packages: `{here}`, `{rio}`, and `{tidyverse}`.
<br><br>
Finally, add an import section where you use `{here}` and `{rio}` to load your data into an object called [`df_raw`]{.hovertip bs-toggle='tooltip' bs-title="Note, that we are calling this our raw data, not `df_linelist` as we did previously. You will see why later."}.
:::


Manipulating Data with `{dplyr}`
----------------------------------------------------------------------------------------------------
Now that we know how to set up a project and import data, we can finally start to play around with it. Going forward we will be using several packages from the "[tidyverse]{.hovertip bs-toggle='tooltip' bs-title="The tidyverse is a collection of packages that are designed for maximum human readability and user friendliness. Check out their website for more information on what's available."}" to help us manipulate, summarize, and visualize our data. Today's session will focus on data manipulation using a package called `{dplyr}`.

### What is `{dplyr}`
Data manipulation is the foundation of [working with data in R]{.hovertip bs-toggle='tooltip' bs-title="Or really any other language, including Excel!"} and as such is foundational to the work we do as epidemiologists. In particular, data manipulation skills will be critical when trying to clean our data. 

In R, the package `{dplyr}` provides a large number of functions to help us manipulate data frames and perform many of the tasks that we will need to use on a daily basis, for example:

- Subsetting our data to remove certain [variables]{.hovertip bs-toggle='tooltip' bs-title="Remember that each variable is a column in the context of a data frame"}
- Renaming certain variables
- Adding or modifying a variable
- Removing duplicate entries

In `{dplyr}` each of these actions can be done with a particular function, which typically have an [intuitive verb for a name]{.hovertip bs-toggle='tooltip' bs-title="These verbs, as with everything in R, are in English and will admittedly be less intuitive for learners coming from a non-anglophone background."}. For example, renaming columns will use the function `rename()`.

In today's session we will look at the "data manipulation verb", ie the function, needed for each of the above tasks as well as how to chain them all together into an efficient data pipeline.


:::{.callout-note}
You may have noticed that we asked you to load a package called `{tidyverse}` rather than `{dplyr}` in the setup. Loading `{tidyverse}` will load [several of the most useful packages]{.hovertip bs-toggle='tooltip' bs-title="The tidyverse is pretty big and loading *all* of its contents would be impractical for most projects. The package `{tidyverse}` therefore only loads the most useful 'core' packages from the full collection."} from the broader tidyverse, including `{dplyr}` and a couple other packages that we will see later in the session.
:::


Basic Data Verbs
----------------------------------------------------------------------------------------------------

### Selecting Specific Columns
A lot of the time when we receive a dataset it will have extra columns that we don't need, either because those columns contain [sensitive data]{.hovertip bs-toggle='tooltip' bs-title="Like patient names, for example"} or because our analysis will only focus on a subset of the data. This is where a function like `select()` comes in handy.

Here is the basic syntax, note that this is [pseudo-code]{.hovertip bs-toggle='tooltip' bs-title="Pseudo-code is used to show model syntax but isn't designed to actually be run. Often it will use stand in names like `column_name` to illustrate a concept. In this session and following ones we will often use pseudo-code to demonstrate the basic syntax of new functions as they are introduced."} and isn't something you are intended to run yourself.

```{r}
# DO NOT RUN (PSEUDO-CODE)
select(df_raw, first_column_to_keep, second_column_to_keep)
```

Here we see that the first argument is our dataset and each subsequent argument is the name of a column that we would like to keep. In the tidyverse, variables (ie column names) don't need to be put into quotation marks. So for example, if we want to select the columns `id`, `sex`, and `age` we can use the following:

```{r}
select(df_raw, id, sex, age)
```

:::{.write}
Use `select()` to select the following variables in your dataset: `id`, `sex`, `age`, `sub_prefecture`, `date_onset`, and `outcome`. The head of your output should look something like this:

```{r}
#| eval: true
#| echo: false
head(select(df_raw, id, sex, age, date_onset, outcome))
```
<br>
Take a look at this output and then at `df_raw`. We can see that `df_raw` still contains all of the columns, which is what we want. But can you tell why it didn't change?
:::

Often, we want to keep most of the variables in our dataset and only remove one or two. We can use the above syntax to do this, but it can become pretty tedious to [write out every column name]{.hovertip bs-toggle='tooltip' bs-title="Anyone who has worked with complex linelists or survey data can certainly feel the pain here."}. In these cases, instead of telling `select what to **keep**, we can use a subtraction sign (`-`) to tell it what to **remove**. For example, if we wanted to remove the `village_commune` column from our dataframe we can use the following:

```{r}
select(df_raw, -village_commune)
```

Way easier!

:::{.write}
Use the `-` syntax in `select()` to select all of the columns in `df_raw` **except**: [`full_name`]{.hovertip bs-toggle='tooltip' bs-title="In general, full names and other identifiable information should be removed immediately when working with linelist data."} and `age_unit` from your dataset.
:::

### Renaming Columns
Another common issue when we get new datasets is that the variable names are [inconvenient]{.hovertip bs-toggle='tooltip' bs-title="This could be because they are too long, or worse because they contain spaces or accents"}. In those cases, `rename()` can work wonders. Here's the basic syntax:

```{r}
# DO NOT RUN (PSEUDO CODE)
rename(df,
       new_column_name = old_column_name,
       another_new_name = another_old_name)
```

As in the case of `select()`, and indeed in essentially all `{dplyr}` verbs, the first argument is our daframe. Then each subsequent argument is a statement of `new_column_name = old_column_name` telling R which columns to rename and the new names that we want to use, with each pair given its own line to improve readability. If we wanted to change `village_commune` to simply be `village`, for example, we can write:

```{r}
rename(df_raw,
       village = village_commune)
```

:::{.write}
Use `rename()` on `df_raw` to change the columns `sub_prefecture`, `village_commune`, and `health_facility_name` to be `prefecture`, `village`, and `facility` respectively.
:::

In the above exercise it may have been difficult to check if the output looked correct because R would have printed out the full data frame. In these cases it can be helpful to create a temporary object just to check if everything looks alright. You can call this object whatever you want, but a common name is [`tmp`]{.hovertip bs-toggle='tooltip' bs-title="Here `tmp` stands for 'temporary'."}.

:::{.write}
Repeat the last exercise but this time assign the output to an object called `tmp` and use `names()` to check that the column names changed as you expected. The output of `names()` should give you something like this:

```{r}
#| eval: true
#| echo: false

df_raw |>
  rename(prefecture = sub_prefecture,
         village = village_commune,
         facility = health_facility_name) |>
  names()
```
:::

:::{.callout-important}
Temporary objects, like the `tmp` data frame you just created are just that: temporary. They are usually used to test if something has worked and designed to be overwritten each time you need to test something else. As such, you should not use these temporary objects as the input for other parts of your code. If you want to make a data frame that will be reused, such as a clean version of `df_raw`, this should be done using an object with a proper name like `df` or `df_clean`.
:::

### Changing and Adding Columns
So now we know how to select and rename columns, but how do we modify them? This is where [`mutate()`]{.hovertip bs-toggle='tooltip' bs-title="This name is admittedly less intuitive that other `{dplyr}` verbs. It is called mutate because you are changing (or 'mutating', if you will) parts of the data."} comes into play. This function can be used both to add new columns and to change existing ones.

Let's start with the basic `mutate()` syntax needed to add a new column:

```{r}
# DO NOT RUN (PSEUDO-CODE)
mutate(df,
       new_column = action(existing_column),
       another_new_column = another_action(another_existing_column))
```

In the above code, we are creating a new column (`new_column`) by performing some sort of action (`action()`) on an existing column in the dataframe (`existing_column`). This action could be anything, it could use a function or be a simple arithmetic operation and can use one or more columns. For example, if we wanted to create a new column expressing [MUAC in cm]{.hovertip bs-toggle='tooltip' bs-title="This is obviously an indicator you probably wouldn't need in practice, but is used here just to illustrate the use of mutate()."} we could use the following:

```{r}
mutate(df_raw,
       muac_cm = muac / 100)
```

:::{.write}
Use `mutate()` to create a new column called `age_years` that expresses `age` in years rather than months. The head of your new `age_years` column should look like this:

```{r}
#| eval: true
#| echo: false
df_raw |>
  mutate(age_years = age / 12) |>
  select(age_years) |>
  head()
```
:::

Great! But what if instead of creating a new column we instead wanted to change an existing one? You just need to use the existing column name on the left side of the `=` instead of giving a new column name. For example, in the above MUAC code we would write:

```{r}
mutate(df_raw,
       muac = muac / 100)
```

We might want to keep age in months as well as years, so we won't reassign that column. But there are some other columns that could stand to be changed. There are a lot of reasons we might want to change a column, two of the most common ones are:

1. The format of a string needs changing
2. The data type of a column is incorrect

Our dataset has both of these problems. For example, while it isn't per se a problem that `region` and `sub_prefecture` are in all capitals, it also isn't [particularly nice]{.hovertip bs-toggle='tooltip' bs-title="Also, inconsistent capitalization is a common type of dirtiness in datasets and standardizing by making everything lower case or title case can be a useful part of cleaning."}. To fix this, we can use another function from the `{tidyverse}`, this time from a package called `{stringr}` to make these columns [title case]{.hovertip bs-toggle='tooltip' bs-title="Title case is when the first letter of each word is capitalized in the way you would see for the title of a book."}:

```{r}
mutate(df_raw,
       region = str_to_title(region),
       sub_prefecture = str_to_title(sub_prefecture))
```

:::{.write}
Use `mutate()` to update the format of `malaria_rdt` and `outcome` to use title case. The head of these two columns should now look something like this:

```{r}
#| eval: true
#| echo: false

df_raw |>
  mutate(malaria_rdt = stringr::str_to_title(malaria_rdt),
         outcome = stringr::str_to_title(outcome)) |>
  select(malaria_rdt, outcome) |>
  head()
```
:::

:::{.callout-note}
Notice that we didn't need to load `{stringr}` to do the above exercise. That's because, like `{dplyr}` this package is loaded when we load the `{tidyverse}`.
:::


That's nicer. Now let's consider the second issue, having variables with the wrong type.

:::{.look}
Take a look at the data type of your columns, do any of them look strange? 
<br><br>
**Hint.** `str()` may be useful here.
:::

Most of the columns look ok, but it seems theres something strange with the dates. Some of them are character type and others are something called [POSIXct]{.hovertip bs-toggle='tooltip' bs-title="This is a data type in R that is sometimes used to express dates. It isn't the most convenient way of date handling, though the reasons why are a bit outside of the scope of this course. In general we recommend converting `POSIXct` to `Date` whenever working with dates."}. We would much rather have all of these columns use the simple `Date` type. 

To convert to dates, we are going to call on yet [another package from the the tidyverse, `{lubridate}`]{.hovertip bs-toggle='tooltip' bs-title="As you can see, the tidyverse contians a lot of convenient packages to make our lives as epidemiologists easier."}. In particular, we are going to use the [function `ymd()`]{.hovertip bs-toggle='tooltip' bs-title="Here the name of the function indicates that it expects dates to be formated as year-month-day. Other functions are available in {lubridate} for dates that are constructed differently."}. For example:

```{r}
mutate(df_raw,
       date_outcome = ymd(date_outcome))
```

:::{.write}
Use `mutate()` and `ymd()` to modify `date_onset` and `date_admission` to be `Date` type. Use a temporary data frame `tmp` to check that your code is doing what you want it to.
:::


### Removing Duplicates
Ok great! We know how to select, rename, and modify our data. Another task we will often need to do is removing duplicate entries. Fortunately this one is easily done using the function `distinct()`, which has the following basic syntax:

```{r}
# DO NOT RUN (PSEUDO-CODE)
distinct(df)
```

Notice that distinct only needs one argument by default, the dataset itself. This will look for and remove any duplicate observations in the data frame. There are some fancier ways of using `distinct()` that will look for duplication on certain variables only, but that's outside of the scope of today's session.

:::{.write}
Use `distinct()` to create a temporary data frame, `tmp`, that contains all the unique observations in `df_raw`. Compare the number of rows in `tmp` to that of `df_raw`. Did we have any duplicates?
:::



The Pipe Operator
----------------------------------------------------------------------------------------------------
So it looks like we have actually done quite a bit of cleaning while learning the core `{dplyr}` verbs. We should probably try to put some of the above steps together to start building a basic data cleaning pipeline. So far we haven't been saving any of our changes, except perhaps to a temporary data frame. It would be nice to keep them in a new clean `df` object.

For example, if we want to effect the column renaming we did above to a reusable object we might write something like this:

```{r}
df <- rename(df_raw, 
             prefecture = sub_prefecture,
             village = village_commune,
             facility = health_facility_name)
```


:::{.callout-tip}
In general, it's good practice to keep a raw version of your dataset, here `df_raw`, that remains unmodified in your code. This is so that you always have it available in your environment as a reference and is always available at the start of your cleaning pipeline to improve reproducibility.
:::


Now we have a new object, `df` that we can do more operations on. Brilliant. For example, if we now wanted to select everything except for `full_name` we could update the above code like this:

```{r}
# Step 1: Rename Variables
df <- rename(df_raw, 
             prefecture = sub_prefecture,
             village = village_commune,
             facility = health_facility_name)

# Step 2: Select Variables to Keep
df <- select(df,
             -full_name)
```

Notice that in this second step we are using `df` as the input of `select()` rather than `df_raw` because we want to continue working on our modified version of the data. Let's say now we want to add a column of age in years:

```{r}
# Step 1: Rename Variables
df <- rename(df_raw, 
             prefecture = sub_prefecture,
             village = village_commune,
             facility = health_facility_name)

# Step 2: Select Variables to Keep
df <- select(df,
             -full_name)

# Step 3: Add Age in Years
df <- mutate(df,
             age_years = age / 12)
```

Hm, ok well this is working but it is starting to get repetitive. With each step we are reusing the output of the last step and then updating the same data frame, `df`. It would be better if these actions could be chained together in a simpler way. 

This is exactly what the pipe operator, `|>` is for! The pipe has the following basic syntax:

```{r}
# DO NOT RUN (PSEUDO-CODE)
input |> action()
```

Here the input on the left side (`input`) is "piped into" the action on the right side (`action()`). So for example instead of writing:

```{r}
select(df_raw, id, sex)
```

We could instead write:
```{r}
df_raw |>
  select(id, sex)
```

:::{.write}
Try out the above code to see if it works.
:::

This can be used to chain multiple actions together and you will often see tidyverse style code that uses pipes in the following way:

```{r}
# DO NOT RUN (PSEUDO-CODE)
df <- df_raw |>
  first_action() |>
  second_action() |>
  third_action()
```

:::{.callout-tip}
Notice that here each action in the pipe is given its own line. This is considered good practice as it makes your code easier to read and understand.
:::

So, if we wanted to chain the example actions we saw above into a single pipe, we might write something like this:

```{r}
df <- df_raw |>
  rename(prefecture = sub_prefecture,
         village = village_commune,
         facility = health_facility_name) |>
  select(-full_name) |>
  mutate(age_years = age / 12)
```

That's a lot easier than reassigning `df` after each step! 

:::{.write}
Let's see if we can put together what we learned above into a single pipeline! Use the pipe operator `|>`, `select()`, `rename()`, `mutate()`, `str_to_title()`, `ymd()`, and `distinct()` to perform the following actions on `df_raw` and assign the output to a new data frame called `df`:

- Remove the variables `full_name` and `age_unit`
- Rename the following variables:
  - `age` becomes `age_months`
  - `sub_prefecture` becomes `prefecture`
  - `village_commune` becomes `village`
  - `health_facility_name` becomes `facility`
- Add a variable `age_years` with patient age in years
- Update `region` and `prefecture` to use title case
- Update all date columns to use `Date` type
- Remove any duplicate observations

The head of your final data should look something like this:

```{r}
#| eval: true
#| echo: false

df_raw |>
  select(-full_name, -age_unit) |>
  rename(age_months = age,
         prefecture = sub_prefecture,
         village = village_commune,
         facility = health_facility_name) |>
  mutate(age_years = age_months / 12,
         region = stringr::str_to_title(region),
         prefecture = stringr::str_to_title(prefecture),
         date_onset = lubridate::ymd(date_onset),
         date_consultation = lubridate::ymd(date_consultation),
         date_admission = lubridate::ymd(date_admission),
         date_outcome = lubridate::ymd(date_outcome)) |>
  distinct() |>
  head()
```

**Hint.** Be careful with your column names here! If you renamed something you will need to use the new names for any subsequent parts of the pipe.
:::

Amazing! That looks like a great start at a data cleaning pipeline. Keep this code handy, you will use it in the next session where we will look at another common part of data cleaning: **recoding**.


Done!
----------------------------------------------------------------------------------------------------
Well done, you've learned the fundamentals of data manipulation and how to string multiple commands together into a data manipulation pipe. Moving forward, solution files will focus less on being "exercise by exercise" and rather provide an example of what a real script might look like in a real world context. In this case, the solutions will then focus only on the final pipe that is created at the end of the session.

```{r}
#| echo: false
#| eval: true

downloadthis::download_link(
  link = 'https://github.com/epicentre-msf/repicentre/blob/main/sessions_core/03_data_verbs_solutions.R',
  button_label = 'Solution File',
  has_icon = TRUE,
  icon = "fa fa-save",
  self_contained = FALSE
)
```


Going Further
----------------------------------------------------------------------------------------------------

### Extra Exercises


1. Print a data frame of the clean(insh) data with the columns `id`, `sex` and `age`.

2. Print a data frame of the raw data with the columns `vacc_status` and `vacc_doses`.

3. Then pass the data frame of the above question to the `distinct()` function using a *pipe.* Do you understand what the deduplication does here?

4. Print a data frame of the clean(ish) data with the columns `sex` alone. Then, pipe it into the `distinct()` function.

::: {.callout-tip collapse="true"}
The code you just wrote could be simplified into `distinct(df_raw, sex)` or `df_raw |> distinct(sex)`.
:::

5. Write a command that would create this output (only the head is shown):

```{r}
#| echo: false

df <- df_raw |>
  select(-full_name, -age_unit) |>
  rename(age_months = age,
         prefecture = sub_prefecture,
         village = village_commune,
         facility = health_facility_name) |>
  mutate(age_years = age_months / 12,
         region = stringr::str_to_title(region),
         prefecture = stringr::str_to_title(prefecture),
         date_onset = lubridate::ymd(date_onset),
         date_consultation = lubridate::ymd(date_consultation),
         date_admission = lubridate::ymd(date_admission),
         date_outcome = lubridate::ymd(date_outcome)) |>
  distinct() |>
  head()


df %>% select(fever, rash, cough, red_eye, pneumonia, encephalitis)
```

6. Write a command that would create this output (whole output is shown!): 

```{r}
#| echo: false

df %>% select(prefecture, facility) %>% distinct()
```


7. A a line to the `mutate()` of your big pipe to update the `hospitalisation` variable so that its text would be in title case as well.

8. Perhaps you would prefer to use lower case for the  `region` column rather than the title case, update your code to do this instead. **Hint**: you might want to check out `str_to_lower()` from `{stringr}`.

9. Create a `delay_consultation` column, that contains the number of days between the onset of symptoms and the consultation.

10. Train to use the pipe: rewrite the following commands, which we have sees today or in past sessions using `{dplyr}` verbs and the *pipe*

```{r}
class(df_raw$age)
count(df, sex, fever)
count(df, outcome, sort = TRUE)
mean(df$muac)
min(df$age_months)
```

**Note**: you will often use the pipe to create cleaning pipeline, but it is not *mandatory.*


### Challenge

**Create another clean(ish) data frame**

Create a clean data frame that contains the columns `id`, `hospitalisation`, `hospitalisation_date`, `outcome` and `outcome_date`. The date columns are formatted as Dates, and the two text columns are in *title case* (the outcome columns is not standardized, don't worry, we will learn how to do that in the next session). There are no duplicates. The head of the data frame looks like this: 

```{r}
#| echo: false

df_raw %>% 
    rename(
      hospitalisation_date = date_admission,
      outcome_date = date_outcome) |>
  select(id, hospitalisation, hospitalisation_date, 
         outcome, outcome_date) |>
  mutate(hospitalisation_date = lubridate::ymd(hospitalisation_date),
         outcome_date = lubridate::ymd(outcome_date),
         hospitalisation = stringr::str_to_title(hospitalisation),
         outcome = stringr::str_to_title(outcome)) |>
  distinct() |>
  head()
```


**From base R to `{tidyverse}` syntax**
The code below contains steps to create a `df1` data frame written in base R syntax. It uses function and syntax that we have seen in all the previous sessions. Can you rewrite this code with `{dplyr}` verbs and the *pipe* to obtain an identical `df1` data frame?

```{r}
df1 <- df_raw
df1$age_months <- df1$age
df1$age_years  <- df1$age_months / 12
df1["country"] <- "Chad"
df1 <- df1[, c("id", "age_months", "age_years", "country", "sub_prefecture")]
names(df1)[5] <- "pref"
df1 <- distinct(df1)
```

::: {.callout-tip }
Do not hesitate to run the steps on your computer to remind yourself of what sort of actions they do. Make a list of all the steps that this command does, so that you might "translate" these steps in a pipeline. The order in the pipeline does not have to be exactly the same.
:::

**Fix the code!**
When we type code, it is very easy to introduce little typos that prevent the code to run. Finding them is part of the debugging step. The code below has *several* problems that prevent it from running (typos, order problems). Can you fix this pipe? Once it runs without errors, can you reorganize it to make it more condensed and logical?

```{r}
df_raw |>
  select(-age_unit) |>
  rename(
    patient_name = full_name,
    age_month = age,
    prefecture = sub_prefecture,
    village = village_commune,
    facility = health_facility_name) |>
  mutate(age_years = age_months / 12,
         region = str_to_title(region)) |>
  mutate(prefecture = str_to_title(prefecture),
         date_onset = ymd(date_onset),
         date_consultation = ymd(date_consultation)) |>
  select(-full_name) |>
  mutat(date_admission = ymd(date_admission),
         date_outcome = ymd(date_outcome)) |>
  distinct()
```

::: {.callout-tip}
To debug a pipeline, run it step by step (by pairs of statement `input |> function()`) to see the problems that may arise at each step (inspect the error if error there is, and the intermediate data frame created). Make your way down the pipe to fix each step that needs to be fixed.
:::

::: {.callout-tip}
When you write a pipeline, test each step before adding a new one to avoid the situation above!
:::